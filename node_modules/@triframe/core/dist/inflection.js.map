{"version":3,"sources":["../src/inflection.js"],"names":["inflection","UNCOUNTABLE_WORDS","Rules","SINGULAR_TO_PLURAL","PLURAL_TO_SINGULAR","TITLE_LOWERCASE_WORDS","CommonRegExp","ID_SUFFIX","UNDERSCORES","NUMBERS","SPACES","SPACES_OR_UNDERSCORES","UPPERCASE","UNDERSCORE_PREFIX","applyRules_","str","rules","skip","ignore","indexOf","toLowerCase","i","ii","length","rule","test","lastIndex","replace","toPlural","toSingular","toCamelCase","upper","slice","parts","split","part","charAt","toUpperCase","substr","join","toPascalCase","toTitleCase","words","o","oo","toCapitalized","toUnderscored","x","toDashed","toHumanized","start_lowercase","toTableName","toColumnName","toClassName","toForeignKeyName","replaceNumbersWithOrdinals","num","singles","Number","tens","isPlural","word","isSingular"],"mappings":"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","sourcesContent":["const inflection = {}\r\n\r\n/**\r\n * List of nouns that use the same form for both singular and plural.\r\n * @type {Array.<string>}\r\n */\r\ninflection.UNCOUNTABLE_WORDS = [\r\n\t'equipment',\r\n\t'information',\r\n\t'rice',\r\n\t'money',\r\n\t'species',\r\n\t'series',\r\n\t'fish',\r\n\t'sheep',\r\n\t'moose',\r\n\t'deer',\r\n\t'news'\r\n];\r\n\r\n/**\r\n * Translation rules\r\n * @enum {Array.<[RegExp, string]>}\r\n */\r\ninflection.Rules = {\r\n\tSINGULAR_TO_PLURAL: [\r\n\t\t[ /(m)an$/gi, '$1en' ],\r\n\t\t[ /(pe)rson$/gi, '$1ople' ],\r\n\t\t[ /(child)$/gi, '$1ren' ],\r\n\t\t[ /^(ox)$/gi, '$1en' ],\r\n\t\t[ /(ax|test)is$/gi, '$1es' ],\r\n\t\t[ /(octop|vir)us$/gi, '$1i' ],\r\n\t\t[ /(alias|status)$/gi, '$1es' ],\r\n\t\t[ /(bu)s$/gi, '$1ses' ],\r\n\t\t[ /(buffal|tomat|potat)o$/gi, '$1oes' ],\r\n\t\t[ /([ti])um$/gi, '$1a' ],\r\n\t\t[ /sis$/gi, 'ses' ],\r\n\t\t[ /(?:([^f])fe|([lr])f)$/gi, '$1$2ves' ],\r\n\t\t[ /(hive)$/gi, '$1s' ],\r\n\t\t[ /([^aeiouy]|qu)y$/gi, '$1ies' ],\r\n\t\t[ /(x|ch|ss|sh)$/gi, '$1es' ],\r\n\t\t[ /(matr|vert|ind)ix|ex$/gi, '$1ices' ],\r\n\t\t[ /(m|l)ouse$/gi, '$1ice' ],\r\n\t\t[ /(quiz)$/gi, '$1zes' ],\r\n\t\t[ /s$/gi, 's' ],\r\n\t\t[ /$/g, 's' ]\r\n\t],\r\n\r\n\tPLURAL_TO_SINGULAR: [\r\n\t\t[ /(m)en$/gi, '$1an' ],\r\n\t\t[ /(pe)ople$/gi, '$1rson' ],\r\n\t\t[ /(child)ren$/gi, '$1' ],\r\n\t\t[ /([ti])a$/gi, '$1um' ],\r\n\t\t[ /((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/gi, '$2sis' ],\r\n\t\t[ /(hive)s$/gi, '$1' ],\r\n\t\t[ /(tive)s$/gi, '$1' ],\r\n\t\t[ /(curve)s$/gi, '$1' ],\r\n\t\t[ /([lr])ves$/gi, '$1f' ],\r\n\t\t[ /([^fo])ves$/gi, '$1fe' ],\r\n\t\t[ /([^aeiouy]|qu)ies$/gi, '$1y' ],\r\n\t\t[ /(s)eries$/gi, '$1eries' ],\r\n\t\t[ /(m)ovies$/gi, '$1ovie' ],\r\n\t\t[ /(x|ch|ss|sh)es$/gi, '$1' ],\r\n\t\t[ /(m|l)ice$/gi, '$1ouse' ],\r\n\t\t[ /(bus)es$/gi, '$1' ],\r\n\t\t[ /(o)es$/gi, '$1' ],\r\n\t\t[ /(shoe)s$/gi, '$1' ],\r\n\t\t[ /(cris|ax|test)es$/gi, '$1is' ],\r\n\t\t[ /(octop|vir)i$/gi, '$1us' ],\r\n\t\t[ /(alias|status)es$/gi, '$1' ],\r\n\t\t[ /^(ox)en/gi, '$1' ],\r\n\t\t[ /(vert|ind)ices$/gi, '$1ex' ],\r\n\t\t[ /(matr)ices$/gi, '$1ix' ],\r\n\t\t[ /(quiz)zes$/gi, '$1' ],\r\n\t\t[ /s$/gi, '' ]\r\n\t]\r\n};\r\n\r\n\r\n/**\r\n * List of words that are not to be capitalized for title case\r\n * @type {Array.<string>}\r\n */\r\ninflection.TITLE_LOWERCASE_WORDS = [\r\n\t'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at', 'by',\r\n\t'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'\r\n];\r\n\r\n/**\r\n * Regular expressions used for conversions\r\n * @enum {RegExp}\r\n */\r\ninflection.CommonRegExp = {\r\n\tID_SUFFIX: /(_ids|_id)$/g,\r\n\tUNDERSCORES: /_+/g,\r\n\tNUMBERS: /(^|\\s)\\d+/g,\r\n\tSPACES: /\\s+/g,\r\n\tSPACES_OR_UNDERSCORES: /[\\s_]+/g,\r\n\tUPPERCASE: /[A-Z]/g,\r\n\tUNDERSCORE_PREFIX: /^_/\r\n};\r\n\r\n/**\r\n * General function that applies replacement rules to a string\r\n * @private\r\n * @param {string} str The string on which to preform the replacements\r\n * @param {Array.<[RegExp, string]>} rules List of rules to apply\r\n * @param {Array.<string>} skip Sub-strings to skip if they match\r\n * @return {string}\r\n */\r\ninflection.applyRules_ = function (str, rules, skip) {\r\n\tvar ignore = (skip.indexOf(str.toLowerCase()) !== -1);\r\n\tif (!ignore) {\r\n\t\tfor (var i = 0, ii = rules.length; i < ii; ++i) {\r\n\t\t\tvar rule = rules[i];\r\n\t\t\tif (rule[0].test(str)) {\r\n\t\t\t\trule[0].lastIndex = 0;\r\n\t\t\t\treturn str.replace(rule[0], rule[1]);\r\n\t\t\t} else {\r\n\t\t\t\trule[0].lastIndex = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn str;\r\n};\r\n\r\n/**\r\n * Returns the plural form of the word\r\n * @param {string} str The word of which to get a plural form\r\n * @return {string}\r\n */\r\ninflection.toPlural = function (str) {\r\n\treturn inflection.applyRules_(\r\n\t\tstr,\r\n\t\tinflection.Rules.SINGULAR_TO_PLURAL,\r\n\t\tinflection.UNCOUNTABLE_WORDS\r\n\t);\r\n};\r\n\r\n/**\r\n * Returns the singular form of the word\r\n * @param {string} str The word of which to get a singular form\r\n * @return {string}\r\n */\r\ninflection.toSingular = function (str) {\r\n\treturn inflection.applyRules_(\r\n\t\tstr,\r\n\t\tinflection.Rules.PLURAL_TO_SINGULAR,\r\n\t\tinflection.UNCOUNTABLE_WORDS\r\n\t);\r\n};\r\n\r\n/**\r\n * Returns a camel-cased (e.g. thisIsCamel) form of the string\r\n * @param {string} str The string of which to get the camel-cased form\r\n * @param {boolean=} upper Whether to return the \"upper\" camel-cased form\r\n *   also known as Pascal-case\r\n * @return {string}\r\n */\r\ninflection.toCamelCase = function (str, upper) {\r\n\t// str = str.toLowerCase();\r\n\tstr = str[0].toLowerCase() + str.slice(1)\r\n\tvar parts = str.split(inflection.CommonRegExp.SPACES_OR_UNDERSCORES);\r\n\tfor (var i = upper === true ? 0 : 1, ii = parts.length; i < ii; ++i) {\r\n\t\tvar part = parts[i];\r\n\t\tparts[i] = part.charAt(0).toUpperCase() + part.substr(1);\r\n\t}\r\n\treturn parts.join('');\r\n};\r\n\r\n/**\r\n * Returns a Pascal-cased (e.g. ThisIsPascal) form of the string\r\n * @param {string} str The string of which to get the Pascal-cased form\r\n * @return {string}\r\n */\r\ninflection.toPascalCase = function (str) {\r\n\treturn inflection.toCamelCase(str, true);\r\n};\r\n\r\n/**\r\n * Returns a title-case form of the string\r\n * @param {string} str The string of which to get the title-case form\r\n * @return {string}\r\n */\r\ninflection.toTitleCase = function (str) {\r\n\tstr = str.replace(inflection.CommonRegExp.UNDERSCORES, ' ');\r\n\tvar words = str.split(inflection.CommonRegExp.SPACES);\r\n\tfor (var i = 0, ii = words.length; i < ii; ++i) {\r\n\t\tvar parts = words[i].split('-');\r\n\t\tfor (var o = 0, oo = parts.length; o < oo; ++o) {\r\n\t\t\tvar part = parts[o].toLowerCase();\r\n\t\t\tif (inflection.TITLE_LOWERCASE_WORDS.indexOf(part) < 0) {\r\n\t\t\t\tparts[o] = inflection.toCapitalized(part);\r\n\t\t\t}\r\n\t\t}\r\n\t\twords[i] = parts.join('-');\r\n\t}\r\n\tstr = words.join(' ');\r\n\tstr = str.charAt(0).toUpperCase() + str.substr(1);\r\n\treturn str;\r\n};\r\n\r\n/**\r\n * Returns an underscored (e.g. abc_def_ghi) form of the string\r\n * @param {string} str The string of which to get the pascal-cased form\r\n * @return {string}\r\n */\r\ninflection.toUnderscored = function (str) {\r\n\tstr = str.replace(inflection.CommonRegExp.SPACES_OR_UNDERSCORES, '_');\r\n\tstr = str.replace(inflection.CommonRegExp.UPPERCASE, x => `_${x}`);\r\n\tstr = str.replace(inflection.CommonRegExp.UNDERSCORES, '_');\r\n\tstr = str.replace(inflection.CommonRegExp.UNDERSCORE_PREFIX, '');\r\n\treturn str.toLowerCase();\r\n};\r\n\r\n/**\r\n * Returns a dashed form of the string\r\n * @param {string} str The string of which to get the dashed form\r\n * @return {string}\r\n */\r\ninflection.toDashed = function (str) {\r\n\tstr = toUnderscored(str)\r\n\tstr = str.replace(inflection.CommonRegExp.SPACES_OR_UNDERSCORES, '-');\r\n\treturn str;\r\n};\r\n\r\n/**\r\n * Returns a human readable form of the string\r\n * @param {string} str The string of which to get the human readable form\r\n * @param {boolean=} start_lowercase \r\n * @return {string}\r\n */\r\ninflection.toHumanized = function (str, start_lowercase) {\r\n\tstr = str.toLowerCase();\r\n\tstr = str.replace(inflection.CommonRegExp.ID_SUFFIX, '');\r\n\tstr = str.replace(inflection.CommonRegExp.UNDERSCORES, ' ');\r\n\treturn start_lowercase ? str : inflection.toCapitalized(str);\r\n};\r\n\r\n/**\r\n * Returns a capitalized form of the string\r\n * @param {string} str The string of which to get the capitalized form\r\n * @return {string}\r\n */\r\ninflection.toCapitalized = function (str) {\r\n\tstr = str.toLowerCase();\r\n\tstr = str.charAt(0).toUpperCase() + str.substr(1);\r\n\treturn str;\r\n};\r\n\r\n/**\r\n * Returns a form of the string that can be used for a table name\r\n * @param {string} str The original string\r\n * @return {string}\r\n */\r\ninflection.toTableName = function (str) {\r\n\tstr = inflection.toUnderscored(str);\r\n\tstr = inflection.toPlural(str);\r\n\treturn str;\r\n};\r\n\r\n/**\r\n * Returns a form of the string that can be used for a column name\r\n * @param {string} str The original string\r\n * @return {string}\r\n */\r\ninflection.toColumnName = function (str) {\r\n\tstr = inflection.toUnderscored(str);\r\n\treturn str;\r\n};\r\n\r\n/**\r\n * Returns a form of the string that can be used for a class/constructor name\r\n * @param {string} str The original string\r\n * @return {string}\r\n */\r\ninflection.toClassName = function (str) {\r\n\tstr = inflection.toPascalCase(str);\r\n\tstr = inflection.toSingular(str);\r\n\treturn str;\r\n};\r\n\r\n/**\r\n * Returns a form of the string that can be used for a foreign key name\r\n * @param {string} str The original string\r\n * @return {string}\r\n */\r\ninflection.toForeignKeyName = function (str) {\r\n\tstr = inflection.toUnderscored(str);\r\n\tstr += '_id';\r\n\treturn str;\r\n};\r\n\r\n/**\r\n * Replaces all numbers in the string with their ordinal forms\r\n * @param {string} str The original string\r\n * @return {string}\r\n */\r\ninflection.replaceNumbersWithOrdinals = function (str) {\r\n\treturn str.replace(inflection.CommonRegExp.NUMBERS, function (num) {\r\n\t\tvar singles = Number(num.slice(-1));\r\n\t\tvar tens = Number(num.slice(-2, -1));\r\n\t\tif (tens !== 1) {\r\n\t\t\tif (singles === 1) return num + 'st';\r\n\t\t\telse if (singles === 2) return num + 'nd';\r\n\t\t\telse if (singles === 3) return num + 'rd';\r\n\t\t}\r\n\t\treturn num + 'th';\r\n\t});\r\n};\r\n\r\nexport const isPlural = (word) => toPlural(word) === word\r\nexport const isSingular = (word) => toSingular(word) === word\r\n\r\n\r\nexport const toPlural = inflection.toPlural;\r\nexport const toSingular = inflection.toSingular;\r\nexport const toCamelCase = inflection.toCamelCase;\r\nexport const toPascalCase = inflection.toPascalCase;\r\nexport const toTitleCase = inflection.toTitleCase;\r\nexport const toDashed = inflection.toDashed;\r\nexport const toUnderscored = inflection.toUnderscored;\r\nexport const toHumanized = inflection.toHumanized;\r\nexport const toCapitalized = inflection.toCapitalized;\r\nexport const toTableName = inflection.toTableName;\r\nexport const toClassName = inflection.toClassName;\r\nexport const toForeignKeyName = inflection.toForeignKeyName;\r\nexport const replaceNumbersWithOrdinals = inflection.replaceNumbersWithOrdinals;\r\nexport const toColumnName = inflection.toColumnName"],"file":"inflection.js"}