"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.metadata = exports.saveMetadata = exports.getMetadata = undefined;

var _EventEmitter = require("./EventEmitter");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

global['@@triframe.metadata'] = global['@@triframe.metadata'] || {};
const store = global['@@triframe.metadata'];
const skippedPrototypes = [Object.prototype, Function.prototype, _EventEmitter.EventEmitter.prototype, undefined, null];

const getMetadata = (object, key) => {
  let metadata = {};
  let placement = typeof object == 'function' ? '.' : '#';

  for (let target = typeof object == 'function' ? object.prototype : object.__proto__; !skippedPrototypes.includes(target); target = target.__proto__) {
    let Class = target.constructor;
    let namespace = `${Class.name}${placement}${key}`;
    metadata = _objectSpread(_objectSpread({}, store[namespace]), metadata);
  }

  return metadata;
};

const saveMetadata = (target, key, metadata) => {
  let Class = typeof target == 'function' ? target : target.constructor;
  let placement = typeof target == 'function' ? '.' : '#';
  let namespace = `${Class.name}${placement}${key}`;
  store[namespace] = store[namespace] || {};
  Object.assign(store[namespace], _objectSpread(_objectSpread({}, metadata), {}, {
    className: Class.name,
    key,
    Class: Class,
    namespace
  }));
};

const metadata = store;
exports.getMetadata = getMetadata;
exports.saveMetadata = saveMetadata;
exports.metadata = metadata;
//# sourceMappingURL=metadata.js.map