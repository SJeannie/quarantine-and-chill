{"version":3,"sources":["../src/createObservable.js"],"names":["primativeTypes","isPlain","value","includes","constructor","name","crawl","obj","callback","path","key","createObservable","resource","agent","EventEmitter","monitor","node","on","patches","emit","Object","defineProperty","enumerable","get","set","newValue","op"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,cAAc,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB,QAAtB,EAAgC,MAAhC,EAAwC,UAAxC,CAAvB;;AACA,MAAMC,OAAO,GAAGC,KAAK,IAAIA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,IAAsC,CAACF,cAAc,CAACG,QAAf,CAAwBD,KAAK,CAACE,WAAN,CAAkBC,IAA1C,CAAhE;;AAEA,MAAMC,KAAK,GAAG,CAACC,GAAD,EAAMC,QAAN,EAAgBC,IAAI,GAAG,GAAvB,KAA+B;AACzC,MAAIR,OAAO,CAACM,GAAD,CAAX,EAAkB;AACdC,IAAAA,QAAQ,CAACD,GAAD,EAAME,IAAN,CAAR;;AACA,SAAK,IAAIC,GAAT,IAAgBH,GAAhB,EAAqB;AACjB,UAAIL,KAAK,GAAGK,GAAG,CAACG,GAAD,CAAf;AACAJ,MAAAA,KAAK,CAACJ,KAAD,EAAQM,QAAR,EAAkB,GAAEC,IAAK,GAAEC,GAAI,GAA/B,CAAL;AACH;AACJ;AACJ,CARD;;AAUO,MAAMC,gBAAgB,WAAhBA,gBAAgB,GAAGC,QAAQ,IAAI;AACxC,QAAMC,KAAK,GAAG,IAAIC,0BAAJ,EAAd;;AACA,QAAMC,OAAO,GAAG,CAACC,IAAD,EAAOP,IAAP,KAAgB;AAC5B,QAAI,OAAOO,IAAI,CAACC,EAAZ,KAAmB,UAAvB,EAAmCD,IAAI,CAACC,EAAL,CAAQ,UAAR,EAAqBC,OAAD,IAAaL,KAAK,CAACM,IAAN,CAAY,QAAZ,EAAqBD,OAArB,CAAjC,EAAnC,KACK,qBAAKF,IAAL,EAAW,CAACN,GAAD,EAAMR,KAAN,KAAgB;AAC5BkB,MAAAA,MAAM,CAACC,cAAP,CAAsBL,IAAtB,EAA4BN,GAA5B,EAAiC;AAC7BY,QAAAA,UAAU,EAAE,IADiB;AAE7BC,QAAAA,GAAG,EAAE,MAAMrB,KAFkB;AAG7BsB,QAAAA,GAAG,EAAEC,QAAQ,IAAI;AACbvB,UAAAA,KAAK,GAAGuB,QAAR;AACAZ,UAAAA,KAAK,CAACM,IAAN,CAAY,QAAZ,EAAqB,CAAE;AACnBO,YAAAA,EAAE,EAAE,SADe;AAEnBjB,YAAAA,IAAI,EAAG,GAAEA,IAAK,GAAEC,GAAI,EAFD;AAGnBR,YAAAA,KAAK,EAAEuB;AAHY,WAAF,CAArB;AAKH;AAV4B,OAAjC;AAYH,KAbI;AAcR,GAhBD;;AAiBAnB,EAAAA,KAAK,CAACM,QAAD,EAAWG,OAAX,CAAL;AACA,SAAOF,KAAK,CAACI,EAAN,CAAS,QAAT,CAAP;AACH,CArBM","sourcesContent":["import { EventEmitter } from \"./EventEmitter\"\r\nimport { each } from './iterators'\r\n\r\nconst primativeTypes = ['String', 'Boolean', 'Number', 'Date', 'Function']\r\nconst isPlain = value => value && typeof value === 'object' && !primativeTypes.includes(value.constructor.name)\r\n\r\nconst crawl = (obj, callback, path = \"/\") => {\r\n    if (isPlain(obj)) {\r\n        callback(obj, path)\r\n        for (let key in obj) {\r\n            let value = obj[key]\r\n            crawl(value, callback,`${path}${key}/`)\r\n        }\r\n    }\r\n}\r\n\r\nexport const createObservable = resource => {\r\n    const agent = new EventEmitter;\r\n    const monitor = (node, path) => {\r\n        if (typeof node.on === 'function') node.on('Î”.change', (patches) => agent.emit(`change`, patches))\r\n        else each(node, (key, value) => {\r\n            Object.defineProperty(node, key, {\r\n                enumerable: true,\r\n                get: () => value,\r\n                set: newValue => {\r\n                    value = newValue\r\n                    agent.emit(`change`, [ {\r\n                        op: 'replace',\r\n                        path: `${path}${key}`,\r\n                        value: newValue\r\n                    } ])\r\n                }\r\n            })\r\n        })\r\n    }\r\n    crawl(resource, monitor)\r\n    return agent.on('change')\r\n}"],"file":"createObservable.js"}