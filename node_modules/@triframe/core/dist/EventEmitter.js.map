{"version":3,"sources":["../src/EventEmitter.js"],"names":["each","object","Object","callback","index","element","entries","result","Break","Pipe","require","bin","Symbol","nodes","submodules","EventEmitter","constructor","defineProperty","value","enumerable","writable","_nowAndOn","emit","node","calls","forEach","args","nowAndOn","events","push","stream1","on","observe","stream","onCancel","destroy","_onArray","event","Array","isArray","provision","Promise","all","map","matches","predicate","resolve","promise","then","_provision","filter","x","predicateSegments","split","eventSegments","i","ii","currentPredicateSegment","currentEventSegment","previousPredicateSegment","previousEventSegment","length","toJSON","window"],"mappings":"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","sourcesContent":["const each = function(object = new Object, callback){\r\n    for( const [index, element] of entries(object) ){\r\n        let result = callback(index, element, object);\r\n        if(result === Break) break;\r\n    }\r\n}\r\n\r\nconst { Pipe } = require('./Pipe')\r\n\r\nconst bin = Symbol()\r\nconst nodes = Symbol()\r\nconst submodules = Symbol()\r\n\r\n\r\nexport class EventEmitter {\r\n\r\n    constructor(){\r\n        Object.defineProperty(this, nodes, {\r\n            value: {},\r\n            enumerable: false,\r\n            writable: true\r\n        })\r\n\r\n        Object.defineProperty(this, submodules, {\r\n            value: {},\r\n            enumerable: false,\r\n            writable: true\r\n        })\r\n       \r\n        Object.defineProperty(this, bin, {\r\n            value: [],\r\n            enumerable: false,\r\n            writable: true\r\n        })\r\n       \r\n    }\r\n\r\n\r\n    get bin(){\r\n        return this[bin]\r\n    }\r\n\r\n\r\n    _nowAndOn(emit, node){\r\n        node.callback = emit\r\n        emit()\r\n        node.calls.forEach( (args) => emit(...args))\r\n    }\r\n\r\n    nowAndOn(events, callback){\r\n        let node = { events, calls: [], callback: (...args) => node.calls.push(args)}\r\n        let stream1 = this.on(events) \r\n        stream1.observe( (...args) => {\r\n            node.callback(...args)\r\n        })\r\n        let stream = new Pipe( this._nowAndOn, node )\r\n        stream.onCancel( () => stream1.destroy() )\r\n        if(callback) stream.observe(callback)\r\n        return stream\r\n    }\r\n\r\n    _onArray(emit, events){ each(events, (index, event) => this.on(event, emit)) }\r\n\r\n    on(events, callback){\r\n        let stream\r\n        if(Array.isArray(events)) stream = new Pipe( [ this, this._onArray ], events)\r\n        else stream = this.provision(events)\r\n        if(callback) stream.observe(callback)\r\n        return stream;\r\n    }\r\n\r\n    emit(event, ...args){\r\n        return Promise.all(this[bin].map( (node) => {\r\n            if(this.matches( node.predicate, event)){ \r\n                return new Promise( resolve => {\r\n                    let promise = node.callback(...args, event)\r\n                    if(promise && promise.then) promise.then(resolve)\r\n                    else resolve()\r\n                })\r\n            }\r\n        }))\r\n    }\r\n\r\n    _provision(emit, node, calls){\r\n        node.callback = emit;\r\n        calls.forEach( async ([args, resolve]) => { await emit(...args); resolve() }) \r\n    }\r\n\r\n    provision(event){\r\n        let calls = new Array\r\n        let node = {\r\n            predicate: event,\r\n            callback: function(...args){\r\n                return new Promise( resolve => {\r\n                    calls.push([args,  resolve])\r\n                })\r\n            }\r\n        }\r\n        this[bin].push(node)\r\n        let stream = new Pipe( this._provision, node, calls )\r\n        stream.onCancel( () => {\r\n            this[bin] = this[bin].filter( x => x !== node)\r\n        })\r\n        return stream\r\n    }\r\n\r\n    // of(namespace){\r\n    //     if(this[submodules][namespace]) return this[submodules][namespace]\r\n    //     let newEmitter = this[submodules][namespace] = new EventEmitter \r\n    //     const proxyMarker = Symbol()\r\n    //     this.on(`${namespace}.*`, (payload, ...args) => {\r\n    //         let event = args.pop()\r\n    //         if(metadata[proxyMarker]) return \r\n    //         let newEvent = event.replace(`${namespace}.`, '')\r\n    //         newEmitter.emit(newEvent, payload)\r\n    //     })\r\n    //     newEmitter.on('*', (...args, event) => {\r\n    //         this.emit(`${namespace}.${event}`, payload, { [proxyMarker]: true })\r\n    //     })\r\n    //     return newEmitter\r\n    // }\r\n\r\n    matches(predicate, event){\r\n        if(event === predicate) return true\r\n\r\n        if(predicate === event) return true\r\n        let predicateSegments = predicate.split('.')\r\n        let eventSegments = event.split('.')\r\n        \r\n        let i = 0\r\n        let ii = 0\r\n    \r\n        while(true){\r\n            let currentPredicateSegment = predicateSegments[i]\r\n            let currentEventSegment = eventSegments[ii]\r\n            let previousPredicateSegment = predicateSegments[i - 1]\r\n            let previousEventSegment = eventSegments[ii -1]\r\n            \r\n            if(i === predicateSegments.length && ii == eventSegments.length){\r\n                return true\r\n            } \r\n            if(i === predicateSegments.length || ii == eventSegments.length){\r\n                return false\r\n            }\r\n            if(currentPredicateSegment === '*' && i === predicateSegments.length - 1){\r\n                return true\r\n            }\r\n            if(currentEventSegment === '*' && i === eventSegments.length - 1){\r\n                return true\r\n            }\r\n            if(currentPredicateSegment === currentEventSegment){\r\n                i++\r\n                ii++\r\n                continue\r\n            }\r\n            if(currentPredicateSegment === '*' || currentEventSegment === '*'){\r\n                i++\r\n                ii++\r\n                continue\r\n            }\r\n            if(currentPredicateSegment === '*' || currentEventSegment === '*'){\r\n                i++\r\n                ii++\r\n                continue\r\n            }\r\n            if(previousPredicateSegment === '*' && i === 1){\r\n                ii++\r\n                continue\r\n            }\r\n            if(previousEventSegment === '*' && ii === 1){\r\n                i++\r\n                continue\r\n            }\r\n            return false\r\n        }\r\n    }\r\n\r\n    toJSON(){\r\n        return {}\r\n    }\r\n\r\n\r\n}\r\n\r\nif(typeof window != 'undefined') window.EventEmitter = EventEmitter"],"file":"EventEmitter.js"}