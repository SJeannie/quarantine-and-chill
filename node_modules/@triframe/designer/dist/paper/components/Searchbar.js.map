{"version":3,"sources":["../../../src/paper/components/Searchbar.js"],"names":["Searchbar","arguments","handleClearPress","clear","props","onChangeText","args","root","setNativeProps","isFocused","focus","blur","clearAccessibilityLabel","clearIcon","icon","customIconColor","iconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","style","theme","value","rest","colors","roundness","dark","fonts","textColor","text","font","regular","alpha","rgb","string","rippleColor","borderRadius","elevation","styles","container","size","color","I18nManager","isRTL","input","primary","c","React","Component","defaultProps","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { StyleSheet, TextInput, I18nManager, } from 'react-native';\r\nimport color from 'color';\r\nimport IconButton from './IconButton';\r\nimport Surface from './Surface';\r\nimport { withTheme } from '../core/theming';\r\nimport Icon from './Icon';\r\n/**\r\n * Searchbar is a simple input box where users can type search queries.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Searchbar } from '../';\r\n *\r\n * export default class MyComponent extends React.Component {\r\n *   state = {\r\n *     searchQuery: '',\r\n *   };\r\n *\r\n *   _onChangeSearch = query => this.setState({ searchQuery: query });\r\n *\r\n *   render() {\r\n *     const { searchQuery } = this.state;\r\n *     return (\r\n *       <Searchbar\r\n *         placeholder=\"Search\"\r\n *         onChangeText={this._onChangeSearch}\r\n *         value={searchQuery}\r\n *       />\r\n *     );\r\n *   }\r\n * }\r\n * ```\r\n */\r\nlet Searchbar = /** @class */ (() => {\r\n    class Searchbar extends React.Component {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.handleClearPress = () => {\r\n                this.clear();\r\n                this.props.onChangeText && this.props.onChangeText('');\r\n            };\r\n        }\r\n        /**\r\n         * @internal\r\n         */ setNativeProps(args) {\r\n            return this.root && this.root.setNativeProps(args);\r\n        }\r\n        /**\r\n         * Returns `true` if the input is currently focused, `false` otherwise.\r\n         */\r\n        isFocused() {\r\n            return this.root && this.root.isFocused();\r\n        }\r\n        /**\r\n         * Removes all text from the TextInput.\r\n         */\r\n        clear() {\r\n            return this.root && this.root.clear();\r\n        }\r\n        /**\r\n         * Focuses the input.\r\n         */\r\n        focus() {\r\n            return this.root && this.root.focus();\r\n        }\r\n        /**\r\n         * Removes focus from the input.\r\n         */\r\n        blur() {\r\n            return this.root && this.root.blur();\r\n        }\r\n        render() {\r\n            const { clearAccessibilityLabel, clearIcon, icon, iconColor: customIconColor, inputStyle, onIconPress, placeholder, searchAccessibilityLabel, style, theme, value, ...rest } = this.props;\r\n            const { colors, roundness, dark, fonts } = theme;\r\n            const textColor = colors.text;\r\n            const font = fonts.regular;\r\n            const iconColor = customIconColor ||\r\n                (dark\r\n                    ? textColor\r\n                    : color(textColor)\r\n                        .alpha(0.54)\r\n                        .rgb()\r\n                        .string());\r\n            const rippleColor = color(textColor)\r\n                .alpha(0.32)\r\n                .rgb()\r\n                .string();\r\n            return (<Surface style={[\r\n                { borderRadius: roundness, elevation: 4 },\r\n                styles.container,\r\n                style,\r\n            ]}>\r\n        <IconButton accessibilityTraits=\"button\" accessibilityComponentType=\"button\" accessibilityRole=\"button\" borderless rippleColor={rippleColor} onPress={onIconPress} color={iconColor} icon={icon ||\r\n                (({ size, color }) => (<Icon name=\"magnify\" color={color} size={size} direction={I18nManager.isRTL ? 'rtl' : 'ltr'}/>))} accessibilityLabel={searchAccessibilityLabel}/>\r\n        <TextInput style={[styles.input, { color: textColor, ...font }, inputStyle]} placeholder={placeholder || ''} placeholderTextColor={colors.placeholder} selectionColor={colors.primary} underlineColorAndroid=\"transparent\" returnKeyType=\"search\" keyboardAppearance={dark ? 'dark' : 'light'} accessibilityTraits=\"search\" accessibilityRole=\"search\" ref={c => {\r\n                this.root = c;\r\n            }} value={value} {...rest}/>\r\n        <IconButton borderless disabled={!value} accessibilityLabel={clearAccessibilityLabel} color={value ? iconColor : 'rgba(255, 255, 255, 0)'} rippleColor={rippleColor} onPress={this.handleClearPress} icon={clearIcon ||\r\n                (({ size, color }) => (<Icon name=\"close\" color={color} size={size} direction={I18nManager.isRTL ? 'rtl' : 'ltr'}/>))} accessibilityTraits=\"button\" accessibilityComponentType=\"button\" accessibilityRole=\"button\"/>\r\n      </Surface>);\r\n        }\r\n    }\r\n    Searchbar.defaultProps = {\r\n        searchAccessibilityLabel: 'search',\r\n        clearAccessibilityLabel: 'clear',\r\n    };\r\n    return Searchbar;\r\n})();\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n    },\r\n    input: {\r\n        flex: 1,\r\n        fontSize: 18,\r\n        paddingLeft: 8,\r\n        alignSelf: 'stretch',\r\n        textAlign: I18nManager.isRTL ? 'right' : 'left',\r\n        minWidth: 0,\r\n    },\r\n});\r\nexport default withTheme(Searchbar);\r\n"],"file":"Searchbar.js"}