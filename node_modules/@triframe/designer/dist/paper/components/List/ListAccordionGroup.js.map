{"version":3,"sources":["../../../../src/paper/components/List/ListAccordionGroup.js"],"names":["ListAccordionGroupContext","React","createContext","ListAccordionGroup","arguments","state","expandedId","undefined","onAccordionPress","setState","currentExpandedId","props","children","Component","displayName"],"mappings":"ovBAAA,oD,i1BACO,GAAMA,CAAAA,yBAAyB,CAAGC,KAAK,CAACC,aAAN,CAAoB,IAApB,CAAlC,C,4DAsCP,GAAIC,CAAAA,kBAAkB,CAAkB,UAAM,IACpCA,CAAAA,kBADoC,oIAEtC,6BAAc,iEACV,wBAASC,SAAT,EACA,MAAKC,KAAL,CAAa,CACTC,UAAU,CAAEC,SADH,CAAb,CAGA,MAAKC,gBAAL,CAAwB,SAACF,UAAD,CAAgB,CACpC,MAAKG,QAAL,CAAc,kBAAeC,CAAAA,iBAAf,MAAGJ,UAAH,OAAwC,CAClDA,UAAU,CAAEI,iBAAiB,GAAKJ,UAAtB,CAAmCC,SAAnC,CAA+CD,UADT,CAAxC,EAAd,EAGH,CAJD,CALU,aAUb,CAZqC,mFAa7B,iBAC8C,KAAKK,KADnD,CACGL,UADH,aACGA,UADH,CACeE,gBADf,aACeA,gBADf,CACiCI,QADjC,aACiCA,QADjC,CAEL,MAAQ,qBAAC,yBAAD,CAA2B,QAA3B,EAAoC,KAAK,CAAE,CAC/CN,UAAU,CAAEA,UAAU,EAAI,KAAKD,KAAL,CAAWC,UADU,CAE/CE,gBAAgB,CAAEA,gBAAgB,EAAI,KAAKA,gBAFI,CAA3C,6EAIXI,QAJW,CAAR,CAMH,CArBqC,gCACTX,KAAK,CAACY,SADG,EAuB1CV,kBAAkB,CAACW,WAAnB,CAAiC,qBAAjC,CACA,MAAOX,CAAAA,kBAAP,CACH,CAzBsC,EAAvC,C,aA0BeA,kB","sourcesContent":["import * as React from 'react';\r\nexport const ListAccordionGroupContext = React.createContext(null);\r\n/**\r\n * List.AccordionGroup allows to control a group of List Accordions. Id prop for List.Accordion is required in order to group to work.\r\n * List.AccordionGroup can be controlled or uncontrolled component. Example shows uncontrolled version.\r\n * At most one Accordion will be expanded in given time.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { View, Text } from 'react-native';\r\n * import { List } from '../../';\r\n *\r\n * function MyComponent() {\r\n *  return (\r\n *   <List.AccordionGroup>\r\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\r\n *       <List.Item title=\"Item 1\" />\r\n *     </List.Accordion>\r\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\r\n *       <List.Item title=\"Item 2\" />\r\n *     </List.Accordion>\r\n *     <View>\r\n *       <Text>\r\n *         List.Accordion can be wrapped because implementation uses React.Context.\r\n *       </Text>\r\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\r\n *         <List.Item title=\"Item 3\" />\r\n *       </List.Accordion>\r\n *     </View>\r\n *   </List.AccordionGroup>\r\n *  );\r\n * }\r\n *```\r\n */\r\nlet ListAccordionGroup = /** @class */ (() => {\r\n    class ListAccordionGroup extends React.Component {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.state = {\r\n                expandedId: undefined,\r\n            };\r\n            this.onAccordionPress = (expandedId) => {\r\n                this.setState(({ expandedId: currentExpandedId }) => ({\r\n                    expandedId: currentExpandedId === expandedId ? undefined : expandedId,\r\n                }));\r\n            };\r\n        }\r\n        render() {\r\n            const { expandedId, onAccordionPress, children } = this.props;\r\n            return (<ListAccordionGroupContext.Provider value={{\r\n                expandedId: expandedId || this.state.expandedId,\r\n                onAccordionPress: onAccordionPress || this.onAccordionPress,\r\n            }}>\r\n        {children}\r\n      </ListAccordionGroupContext.Provider>);\r\n        }\r\n    }\r\n    ListAccordionGroup.displayName = 'List.AccordionGroup';\r\n    return ListAccordionGroup;\r\n})();\r\nexport default ListAccordionGroup;\r\n"],"file":"ListAccordionGroup.js"}