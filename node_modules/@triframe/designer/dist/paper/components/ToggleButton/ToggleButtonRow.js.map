{"version":3,"sources":["../../../../src/paper/components/ToggleButton/ToggleButtonRow.js"],"names":["ToggleButtonRow","props","value","onValueChange","children","style","count","React","Children","styles","row","map","child","i","type","ToggleButton","cloneElement","button","first","last","middle","Component","displayName","StyleSheet","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":"ktBAAA,oDACA,yCACA,oE,s1BA6BA,GAAIA,CAAAA,eAAe,CAAkB,UAAM,IACjCA,CAAAA,eADiC,iUAE1B,iBAC6C,KAAKC,KADlD,CACGC,KADH,aACGA,KADH,CACUC,aADV,aACUA,aADV,CACyBC,QADzB,aACyBA,QADzB,CACmCC,KADnC,aACmCA,KADnC,CAEL,GAAMC,CAAAA,KAAK,CAAGC,KAAK,CAACC,QAAN,CAAeF,KAAf,CAAqBF,QAArB,CAAd,CACA,MAAQ,qBAAC,qBAAD,CAAc,KAAd,EAAoB,KAAK,CAAEF,KAA3B,CAAkC,aAAa,CAAEC,aAAjD,6EACZ,oBAAC,iBAAD,EAAM,KAAK,CAAE,CAACM,MAAM,CAACC,GAAR,CAAaL,KAAb,CAAb,4EACGE,KAAK,CAACC,QAAN,CAAeG,GAAf,CAAmBP,QAAnB,CAA6B,SAACQ,KAAD,CAAQC,CAAR,CAAc,CAEtC,GAAID,KAAK,EAAIA,KAAK,CAACE,IAAN,GAAeC,qBAA5B,CAA0C,CAEtC,MAAOR,CAAAA,KAAK,CAACS,YAAN,CAAmBJ,KAAnB,CAA0B,CAC7BP,KAAK,CAAE,CACHI,MAAM,CAACQ,MADJ,CAEHJ,CAAC,GAAK,CAAN,CACMJ,MAAM,CAACS,KADb,CAEML,CAAC,GAAKP,KAAK,CAAG,CAAd,CACIG,MAAM,CAACU,IADX,CAEIV,MAAM,CAACW,MANd,CAQHR,KAAK,CAACX,KAAN,CAAYI,KART,CADsB,CAA1B,CAAP,CAYH,CACD,MAAOO,CAAAA,KAAP,CACH,CAlBF,CADH,CADY,CAAR,CAuBH,CA5BkC,6BACTL,KAAK,CAACc,SADG,EA8BvCrB,eAAe,CAACsB,WAAhB,CAA8B,kBAA9B,CACA,MAAOtB,CAAAA,eAAP,CACH,CAhCmC,EAApC,CAiCA,GAAMS,CAAAA,MAAM,CAAGc,wBAAWC,MAAX,CAAkB,CAC7Bd,GAAG,CAAE,CACDe,aAAa,CAAE,KADd,CADwB,CAI7BR,MAAM,CAAE,CACJS,WAAW,CAAEH,wBAAWI,aADpB,CAJqB,CAO7BT,KAAK,CAAE,CACHU,oBAAoB,CAAE,CADnB,CAEHC,uBAAuB,CAAE,CAFtB,CAPsB,CAW7BT,MAAM,CAAE,CACJU,YAAY,CAAE,CADV,CAEJC,eAAe,CAAE,CAFb,CAXqB,CAe7BZ,IAAI,CAAE,CACFY,eAAe,CAAE,CADf,CAEFC,mBAAmB,CAAE,CAFnB,CAGFC,sBAAsB,CAAE,CAHtB,CAfuB,CAAlB,CAAf,C,aAqBejC,e","sourcesContent":["import * as React from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\nimport ToggleButton from './ToggleButton';\r\n/**\r\n * Toggle button row renders a group of toggle buttons in a row.\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { View } from 'react-native';\r\n * import { ToggleButton } from '../../';\r\n *\r\n * export default class MyComponent extends React.Component {\r\n *   state = {\r\n *     value: 'left',\r\n *   };\r\n *\r\n *   render() {\r\n *     return(\r\n *       <ToggleButton.Row\r\n *         onValueChange={value => this.setState({ value })}\r\n *         value={this.state.value}\r\n *       >\r\n *           <ToggleButton icon=\"format-align-left\" value=\"left\" />\r\n *           <ToggleButton icon=\"format-align-right\" value=\"right\" />\r\n *       </ToggleButton.Row>\r\n *     )\r\n *   }\r\n * }\r\n *```\r\n */\r\nlet ToggleButtonRow = /** @class */ (() => {\r\n    class ToggleButtonRow extends React.Component {\r\n        render() {\r\n            const { value, onValueChange, children, style } = this.props;\r\n            const count = React.Children.count(children);\r\n            return (<ToggleButton.Group value={value} onValueChange={onValueChange}>\r\n        <View style={[styles.row, style]}>\r\n          {React.Children.map(children, (child, i) => {\r\n                // @ts-ignore\r\n                if (child && child.type === ToggleButton) {\r\n                    // @ts-ignore\r\n                    return React.cloneElement(child, {\r\n                        style: [\r\n                            styles.button,\r\n                            i === 0\r\n                                ? styles.first\r\n                                : i === count - 1\r\n                                    ? styles.last\r\n                                    : styles.middle,\r\n                            // @ts-ignore\r\n                            child.props.style,\r\n                        ],\r\n                    });\r\n                }\r\n                return child;\r\n            })}\r\n        </View>\r\n      </ToggleButton.Group>);\r\n        }\r\n    }\r\n    ToggleButtonRow.displayName = 'ToggleButton.Row';\r\n    return ToggleButtonRow;\r\n})();\r\nconst styles = StyleSheet.create({\r\n    row: {\r\n        flexDirection: 'row',\r\n    },\r\n    button: {\r\n        borderWidth: StyleSheet.hairlineWidth,\r\n    },\r\n    first: {\r\n        borderTopRightRadius: 0,\r\n        borderBottomRightRadius: 0,\r\n    },\r\n    middle: {\r\n        borderRadius: 0,\r\n        borderLeftWidth: 0,\r\n    },\r\n    last: {\r\n        borderLeftWidth: 0,\r\n        borderTopLeftRadius: 0,\r\n        borderBottomLeftRadius: 0,\r\n    },\r\n});\r\nexport default ToggleButtonRow;\r\n"],"file":"ToggleButtonRow.js"}