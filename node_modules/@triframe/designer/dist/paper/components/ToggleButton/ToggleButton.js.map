{"version":3,"sources":["../../../../src/paper/components/ToggleButton/ToggleButton.js"],"names":["ToggleButton","props","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","context","backgroundColor","checked","dark","e","onValueChange","styles","content","borderColor","white","black","alpha","rgb","string","React","Component","Group","ToggleButtonGroup","Row","ToggleButtonRow","StyleSheet","create","width","height","margin"],"mappings":"k5BAAA,oDACA,yCACA,2CACA,oDACA,iEACA,+EACA,0EACA,2C,m1BAwCA,GAAIA,CAAAA,YAAY,CAAkB,UAAM,IAC9BA,CAAAA,YAD8B,kTAEvB,gCAC+F,KAAKC,KADpG,CACGC,IADH,aACGA,IADH,CACSC,IADT,aACSA,IADT,CACeC,KADf,aACeA,KADf,CACsBC,kBADtB,aACsBA,kBADtB,CAC0CC,QAD1C,aAC0CA,QAD1C,CACoDC,KADpD,aACoDA,KADpD,CAC2DC,KAD3D,aAC2DA,KAD3D,CACkEC,MADlE,aACkEA,MADlE,CAC0EC,QAD1E,aAC0EA,OAD1E,CACsFC,IADtF,+IAEL,GAAMC,CAAAA,YAAY,CAAGR,KAAK,CAACS,SAA3B,CACA,MAAQ,qBAAC,2CAAD,CAA0B,QAA1B,8EACX,SAACC,OAAD,CAAa,CACN,GAAIC,CAAAA,eAAJ,CACA,GAAMC,CAAAA,OAAO,CAAIF,OAAO,EAAIA,OAAO,CAACN,KAAR,GAAkBA,KAA9B,EAAwCC,MAAM,GAAK,SAAnE,CACA,GAAIO,OAAJ,CAAa,CACTD,eAAe,CAAGX,KAAK,CAACa,IAAN,CACZ,0BADY,CAEZ,oBAFN,CAGH,CAJD,IAKK,CACDF,eAAe,CAAG,aAAlB,CACH,CACD,MAAQ,qBAAC,mBAAD,wBAAY,UAAU,CAAE,KAAxB,CAA+B,IAAI,CAAEb,IAArC,CAA2C,OAAO,CAAE,iBAACgB,CAAD,CAAO,CAC/D,GAAIR,QAAJ,CAAa,CACTA,QAAO,CAACQ,CAAD,CAAP,CACH,CACD,GAAIJ,OAAJ,CAAa,CACTA,OAAO,CAACK,aAAR,CAAsB,CAACH,OAAD,CAAWR,KAAX,CAAmB,IAAzC,EACH,CACJ,CAPO,CAOL,IAAI,CAAEL,IAPD,CAOO,kBAAkB,CAAEE,kBAP3B,CAO+C,QAAQ,CAAEC,QAPzD,CAOmE,KAAK,CAAE,CAC9Ec,MAAM,CAACC,OADuE,CAE9E,CACIN,eAAe,CAAfA,eADJ,CAEIH,YAAY,CAAZA,YAFJ,CAGIU,WAAW,CAAE,mBAAMlB,KAAK,CAACa,IAAN,CAAaM,aAAb,CAAqBC,aAA3B,EACRC,KADQ,CACF,IADE,EAERC,GAFQ,GAGRC,MAHQ,EAHjB,CAF8E,CAU9EpB,KAV8E,CAP1E,EAkBDI,IAlBC,gFAAR,CAmBH,CA/BO,CAAR,CAiCH,CAtC+B,0BACTiB,KAAK,CAACC,SADG,EAyCpC7B,YAAY,CAAC8B,KAAb,CAAqBC,0BAArB,CAEA/B,YAAY,CAACgC,GAAb,CAAmBC,wBAAnB,CACA,MAAOjC,CAAAA,YAAP,CACH,CA7CgC,EAAjC,CA8CA,GAAMoB,CAAAA,MAAM,CAAGc,wBAAWC,MAAX,CAAkB,CAC7Bd,OAAO,CAAE,CACLe,KAAK,CAAE,EADF,CAELC,MAAM,CAAE,EAFH,CAGLC,MAAM,CAAE,CAHH,CADoB,CAAlB,CAAf,C,aAOe,uBAAUtC,YAAV,C","sourcesContent":["import * as React from 'react';\r\nimport { StyleSheet, } from 'react-native';\r\nimport { withTheme } from '../../core/theming';\r\nimport color from 'color';\r\nimport IconButton from '../IconButton';\r\nimport ToggleButtonGroup, { ToggleButtonGroupContext, } from './ToggleButtonGroup';\r\nimport ToggleButtonRow from './ToggleButtonRow';\r\nimport { black, white } from '../../styles/colors';\r\n/**\r\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\r\n * a group should share a common container.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { ToggleButton } from '../../';\r\n *\r\n * export default class ToggleButtonExample extends React.Component {\r\n *   state = {\r\n *     status: 'checked',\r\n *   };\r\n *\r\n *   _onButtonToggle = value => {\r\n *      this.setState({\r\n *        status: value === 'checked'\r\n *          ? 'unchecked'\r\n *          : 'checked',\r\n *      });\r\n *   }\r\n *\r\n *   render() {\r\n *     return (\r\n *       <ToggleButton\r\n *         icon=\"bluetooth\"\r\n *         value=\"bluetooth\"\r\n *         status={this.state.status}\r\n *         onPress={this._onButtonToggle}\r\n *       />\r\n *     );\r\n *   }\r\n * }\r\n * ```\r\n */\r\nlet ToggleButton = /** @class */ (() => {\r\n    class ToggleButton extends React.Component {\r\n        render() {\r\n            const { icon, size, theme, accessibilityLabel, disabled, style, value, status, onPress, ...rest } = this.props;\r\n            const borderRadius = theme.roundness;\r\n            return (<ToggleButtonGroupContext.Consumer>\r\n        {(context) => {\r\n                let backgroundColor;\r\n                const checked = (context && context.value === value) || status === 'checked';\r\n                if (checked) {\r\n                    backgroundColor = theme.dark\r\n                        ? 'rgba(255, 255, 255, .12)'\r\n                        : 'rgba(0, 0, 0, .08)';\r\n                }\r\n                else {\r\n                    backgroundColor = 'transparent';\r\n                }\r\n                return (<IconButton borderless={false} icon={icon} onPress={(e) => {\r\n                    if (onPress) {\r\n                        onPress(e);\r\n                    }\r\n                    if (context) {\r\n                        context.onValueChange(!checked ? value : null);\r\n                    }\r\n                }} size={size} accessibilityLabel={accessibilityLabel} disabled={disabled} style={[\r\n                    styles.content,\r\n                    {\r\n                        backgroundColor,\r\n                        borderRadius,\r\n                        borderColor: color(theme.dark ? white : black)\r\n                            .alpha(0.29)\r\n                            .rgb()\r\n                            .string(),\r\n                    },\r\n                    style,\r\n                ]} {...rest}/>);\r\n            }}\r\n      </ToggleButtonGroupContext.Consumer>);\r\n        }\r\n    }\r\n    // @component ./ToggleButtonGroup.tsx\r\n    ToggleButton.Group = ToggleButtonGroup;\r\n    // @component ./ToggleButtonRow.tsx\r\n    ToggleButton.Row = ToggleButtonRow;\r\n    return ToggleButton;\r\n})();\r\nconst styles = StyleSheet.create({\r\n    content: {\r\n        width: 42,\r\n        height: 42,\r\n        margin: 0,\r\n    },\r\n});\r\nexport default withTheme(ToggleButton);\r\n"],"file":"ToggleButton.js"}