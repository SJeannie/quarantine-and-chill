{"version":3,"sources":["../../../src/paper/components/IconButton.js"],"names":["IconButton","icon","customColor","color","size","accessibilityLabel","disabled","onPress","animated","theme","style","rest","iconColor","colors","text","rippleColor","alpha","rgb","string","IconComponent","CrossFadeIcon","Icon","buttonSize","styles","container","width","height","borderRadius","TouchableRipple","supported","top","left","bottom","right","StyleSheet","create","alignItems","justifyContent","overflow","margin","opacity"],"mappings":"wbAAA,oDACA,yCACA,oDACA,0EACA,oDACA,sEACA,wC,gJAiCA,GAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAA6H,IAA1HC,CAAAA,IAA0H,MAA1HA,IAA0H,CAA7GC,WAA6G,MAApHC,KAAoH,gBAAhGC,IAAgG,CAAhGA,IAAgG,oBAAzF,EAAyF,WAArFC,kBAAqF,MAArFA,kBAAqF,CAAjEC,QAAiE,MAAjEA,QAAiE,CAAvDC,OAAuD,MAAvDA,OAAuD,oBAA9CC,QAA8C,CAA9CA,QAA8C,wBAAnC,KAAmC,eAA5BC,KAA4B,MAA5BA,KAA4B,CAArBC,KAAqB,MAArBA,KAAqB,CAAXC,IAAW,0IAC5I,GAAMC,CAAAA,SAAS,CAAG,MAAOV,CAAAA,WAAP,GAAuB,WAAvB,CAAqCA,WAArC,CAAmDO,KAAK,CAACI,MAAN,CAAaC,IAAlF,CACA,GAAMC,CAAAA,WAAW,CAAG,mBAAMH,SAAN,EACfI,KADe,CACT,IADS,EAEfC,GAFe,GAGfC,MAHe,EAApB,CAIA,GAAMC,CAAAA,aAAa,CAAGX,QAAQ,CAAGY,sBAAH,CAAmBC,aAAjD,CACA,GAAMC,CAAAA,UAAU,CAAGlB,IAAI,CAAG,GAA1B,CACA,MAAQ,qBAAC,wBAAD,wBAAiB,UAAU,KAA3B,CAA4B,QAAQ,KAApC,CAAqC,OAAO,CAAEG,OAA9C,CAAuD,WAAW,CAAEQ,WAApE,CAAiF,KAAK,CAAE,CAC5FQ,MAAM,CAACC,SADqF,CAE5F,CAAEC,KAAK,CAAEH,UAAT,CAAqBI,MAAM,CAAEJ,UAA7B,CAAyCK,YAAY,CAAEL,UAAU,CAAG,CAApE,CAF4F,CAG5FhB,QAAQ,EAAIiB,MAAM,CAACjB,QAHyE,CAI5FI,KAJ4F,CAAxF,CAKL,kBAAkB,CAAEL,kBALf,CAKmC,mBAAmB,CAAEC,QAAQ,CAAG,CAAC,QAAD,CAAW,UAAX,CAAH,CAA4B,QAL5F,CAKsG,0BAA0B,CAAC,QALjI,CAK0I,iBAAiB,CAAC,QAL5J,CAKqK,mBAAmB,CAAEA,QAAQ,CAAG,CAAC,UAAD,CAAH,CAAkB,EALpN,CAKwN,QAAQ,CAAEA,QALlO,CAK4O,OAAO,CAE3PsB,yBAAgBC,SAAhB,CACM,CAAEC,GAAG,CAAE,EAAP,CAAWC,IAAI,CAAE,EAAjB,CAAqBC,MAAM,CAAE,EAA7B,CAAiCC,KAAK,CAAE,EAAxC,CADN,CAEM,CAAEH,GAAG,CAAE,CAAP,CAAUC,IAAI,CAAE,CAAhB,CAAmBC,MAAM,CAAE,CAA3B,CAA8BC,KAAK,CAAE,CAArC,CATE,EAS4CtB,IAT5C,gFAUN,oBAAC,iBAAD,8EACE,oBAAC,aAAD,EAAe,KAAK,CAAEC,SAAtB,CAAiC,MAAM,CAAEX,IAAzC,CAA+C,IAAI,CAAEG,IAArD,6EADF,CAVM,CAAR,CAcH,CAtBD,CAuBA,GAAMmB,CAAAA,MAAM,CAAGW,wBAAWC,MAAX,CAAkB,CAE7BX,SAAS,CAAE,CACPY,UAAU,CAAE,QADL,CAEPC,cAAc,CAAE,QAFT,CAGPC,QAAQ,CAAE,QAHH,CAIPC,MAAM,CAAE,CAJD,CAFkB,CAQ7BjC,QAAQ,CAAE,CACNkC,OAAO,CAAE,IADH,CARmB,CAAlB,CAAf,C,aAYe,uBAAUxC,UAAV,C","sourcesContent":["import * as React from 'react';\r\nimport { View, StyleSheet, } from 'react-native';\r\nimport color from 'color';\r\nimport TouchableRipple from './TouchableRipple';\r\nimport Icon from './Icon';\r\nimport CrossFadeIcon from './CrossFadeIcon';\r\nimport { withTheme } from '../core/theming';\r\n/**\r\n * An icon button is a button which displays only an icon without a label.\r\n * By default button has 150% size of the icon.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/icon-button-1.png\" />\r\n *     <figcaption>Icon button</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/icon-button-2.png\" />\r\n *     <figcaption>Pressed icon button</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { IconButton, Colors } from '../';\r\n *\r\n * const MyComponent = () => (\r\n *   <IconButton\r\n *     icon=\"camera\"\r\n *     color={Colors.red500}\r\n *     size={20}\r\n *     onPress={() => console.log('Pressed')}\r\n *   />\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst IconButton = ({ icon, color: customColor, size = 24, accessibilityLabel, disabled, onPress, animated = false, theme, style, ...rest }) => {\r\n    const iconColor = typeof customColor !== 'undefined' ? customColor : theme.colors.text;\r\n    const rippleColor = color(iconColor)\r\n        .alpha(0.32)\r\n        .rgb()\r\n        .string();\r\n    const IconComponent = animated ? CrossFadeIcon : Icon;\r\n    const buttonSize = size * 1.5;\r\n    return (<TouchableRipple borderless centered onPress={onPress} rippleColor={rippleColor} style={[\r\n        styles.container,\r\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\r\n        disabled && styles.disabled,\r\n        style,\r\n    ]} accessibilityLabel={accessibilityLabel} accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'} accessibilityComponentType=\"button\" accessibilityRole=\"button\" accessibilityStates={disabled ? ['disabled'] : []} disabled={disabled} hitSlop={\r\n    // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\r\n    TouchableRipple.supported\r\n        ? { top: 10, left: 10, bottom: 10, right: 10 }\r\n        : { top: 6, left: 6, bottom: 6, right: 6 }} {...rest}>\r\n      <View>\r\n        <IconComponent color={iconColor} source={icon} size={size}/>\r\n      </View>\r\n    </TouchableRipple>);\r\n};\r\nconst styles = StyleSheet.create({\r\n    // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\r\n    container: {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        overflow: 'hidden',\r\n        margin: 6,\r\n    },\r\n    disabled: {\r\n        opacity: 0.32,\r\n    },\r\n});\r\nexport default withTheme(IconButton);\r\n"],"file":"IconButton.js"}