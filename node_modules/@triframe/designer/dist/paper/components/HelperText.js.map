{"version":3,"sources":["../../../src/paper/components/HelperText.js"],"names":["HelperText","arguments","state","shown","Animated","Value","props","visible","textHeight","showText","scale","theme","animation","timing","toValue","duration","useNativeDriver","start","hideText","handleTextLayout","e","onLayout","setState","nativeEvent","layout","height","prevProps","prevState","style","type","padding","rest","colors","dark","textColor","error","text","alpha","rgb","string","styles","color","opacity","display","transform","translateY","interpolate","inputRange","outputRange","children","React","PureComponent","defaultProps","StyleSheet","create","fontSize","paddingVertical","paddingHorizontal"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport color from 'color';\r\nimport { Animated, StyleSheet, } from 'react-native';\r\nimport AnimatedText from './Typography/AnimatedText';\r\nimport { withTheme } from '../core/theming';\r\n/**\r\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { View } from 'react-native';\r\n * import { HelperText, TextInput } from '../';\r\n *\r\n * export default class MyComponent extends React.Component {\r\n *   state = {\r\n *     text: ''\r\n *   };\r\n *\r\n *   _onChangeText = text => this.setState({ text });\r\n *\r\n *   _hasErrors = () => {\r\n *     return !this.state.text.includes('@');\r\n *   }\r\n *\r\n *   render(){\r\n *     const { text } = this.state;\r\n *\r\n *     return (\r\n *       <View>\r\n *         <TextInput\r\n *           label=\"Email\"\r\n *           value={text}\r\n *           onChangeText={this._onChangeText}\r\n *         />\r\n *         <HelperText\r\n *           type=\"error\"\r\n *           visible={this._hasErrors()}\r\n *         >\r\n *           Email address is invalid!\r\n *         </HelperText>\r\n *       </View>\r\n *     );\r\n *   }\r\n * }\r\n * ```\r\n */\r\nlet HelperText = /** @class */ (() => {\r\n    class HelperText extends React.PureComponent {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.state = {\r\n                shown: new Animated.Value(this.props.visible ? 1 : 0),\r\n                textHeight: 0,\r\n            };\r\n            this.showText = () => {\r\n                const { scale } = this.props.theme.animation;\r\n                Animated.timing(this.state.shown, {\r\n                    toValue: 1,\r\n                    duration: 150 * scale,\r\n                    useNativeDriver: true,\r\n                }).start();\r\n            };\r\n            this.hideText = () => {\r\n                const { scale } = this.props.theme.animation;\r\n                Animated.timing(this.state.shown, {\r\n                    toValue: 0,\r\n                    duration: 180 * scale,\r\n                    useNativeDriver: true,\r\n                }).start();\r\n            };\r\n            this.handleTextLayout = (e) => {\r\n                //@ts-ignore Animated.Text typings are improved but something is still broken. It thinks onLayout is not callable.\r\n                this.props.onLayout && this.props.onLayout(e);\r\n                this.setState({\r\n                    textHeight: e.nativeEvent.layout.height,\r\n                });\r\n            };\r\n        }\r\n        componentDidUpdate(prevProps, prevState) {\r\n            if (prevProps.visible !== this.props.visible ||\r\n                prevState.textHeight !== this.state.textHeight) {\r\n                if (this.props.visible) {\r\n                    this.showText();\r\n                }\r\n                else {\r\n                    this.hideText();\r\n                }\r\n            }\r\n        }\r\n        render() {\r\n            const { style, type, visible, theme, \r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            onLayout, padding, ...rest } = this.props;\r\n            const { colors, dark } = theme;\r\n            const textColor = this.props.type === 'error'\r\n                ? colors.error\r\n                : color(colors.text)\r\n                    .alpha(dark ? 0.7 : 0.54)\r\n                    .rgb()\r\n                    .string();\r\n            return (<AnimatedText onLayout={this.handleTextLayout} style={[\r\n                styles.text,\r\n                padding !== 'none' ? styles.padding : {},\r\n                {\r\n                    color: textColor,\r\n                    opacity: this.state.shown,\r\n                    display: visible ? 'initial' : 'none',\r\n                    transform: visible && type === 'error'\r\n                        ? [\r\n                            {\r\n                                translateY: this.state.shown.interpolate({\r\n                                    inputRange: [0, 1],\r\n                                    outputRange: [-this.state.textHeight / 2, 0],\r\n                                }),\r\n                            },\r\n                        ]\r\n                        : [],\r\n                },\r\n                style,\r\n            ]} {...rest}>\r\n        {this.props.children}\r\n      </AnimatedText>);\r\n        }\r\n    }\r\n    HelperText.defaultProps = {\r\n        type: 'info',\r\n        padding: 'normal',\r\n        visible: true,\r\n    };\r\n    return HelperText;\r\n})();\r\nconst styles = StyleSheet.create({\r\n    text: {\r\n        fontSize: 12,\r\n        paddingVertical: 4,\r\n    },\r\n    padding: {\r\n        paddingHorizontal: 12,\r\n    },\r\n});\r\nexport default withTheme(HelperText);\r\n"],"file":"HelperText.js"}