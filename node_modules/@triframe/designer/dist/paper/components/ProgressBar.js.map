{"version":3,"sources":["../../../src/paper/components/ProgressBar.js"],"names":["INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","isRTL","I18nManager","ProgressBar","arguments","state","width","timer","Animated","Value","fade","indeterminateAnimation","onLayout","event","visible","props","previousWidth","setState","nativeEvent","layout","startAnimation","indeterminate","progress","scale","theme","animation","timing","duration","toValue","useNativeDriver","isInteraction","start","Platform","OS","setValue","loop","stopAnimation","stop","prevProps","color","style","rest","tintColor","colors","primary","trackTintColor","alpha","rgb","string","styles","container","backgroundColor","opacity","progressBar","transform","translateX","interpolate","inputRange","outputRange","scaleX","React","Component","defaultProps","StyleSheet","create","height","overflow","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Animated, Platform, StyleSheet, View, I18nManager, } from 'react-native';\r\nimport setColor from 'color';\r\nimport { withTheme } from '../core/theming';\r\nconst INDETERMINATE_DURATION = 2000;\r\nconst INDETERMINATE_MAX_WIDTH = 0.6;\r\nconst { isRTL } = I18nManager;\r\n/**\r\n * Progress bar is an indicator used to present progress of some activity in the app.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img src=\"screenshots/progress-bar.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { ProgressBar, Colors } from '../';\r\n *\r\n * const MyComponent = () => (\r\n *   <ProgressBar progress={0.5} color={Colors.red800} />\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nlet ProgressBar = /** @class */ (() => {\r\n    class ProgressBar extends React.Component {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.state = {\r\n                width: 0,\r\n                timer: new Animated.Value(0),\r\n                fade: new Animated.Value(0),\r\n            };\r\n            this.indeterminateAnimation = null;\r\n            this.onLayout = (event) => {\r\n                const { visible } = this.props;\r\n                const { width: previousWidth } = this.state;\r\n                this.setState({ width: event.nativeEvent.layout.width }, () => {\r\n                    // Start animation the very first time when previously the width was unclear\r\n                    if (visible && previousWidth === 0) {\r\n                        this.startAnimation();\r\n                    }\r\n                });\r\n            };\r\n            this.startAnimation = () => {\r\n                const { indeterminate, progress, theme: { animation: { scale }, }, } = this.props;\r\n                const { fade, timer } = this.state;\r\n                // Show progress bar\r\n                Animated.timing(fade, {\r\n                    duration: 200 * scale,\r\n                    toValue: 1,\r\n                    useNativeDriver: true,\r\n                    isInteraction: false,\r\n                }).start();\r\n                // Animate progress bar\r\n                if (indeterminate) {\r\n                    if (!this.indeterminateAnimation) {\r\n                        this.indeterminateAnimation = Animated.timing(timer, {\r\n                            duration: INDETERMINATE_DURATION,\r\n                            toValue: 1,\r\n                            // Animated.loop does not work if useNativeDriver is true on web\r\n                            useNativeDriver: Platform.OS !== 'web',\r\n                            isInteraction: false,\r\n                        });\r\n                    }\r\n                    // Reset timer to the beginning\r\n                    timer.setValue(0);\r\n                    Animated.loop(this.indeterminateAnimation).start();\r\n                }\r\n                else {\r\n                    Animated.timing(timer, {\r\n                        duration: 200 * scale,\r\n                        toValue: progress ? progress : 0,\r\n                        useNativeDriver: true,\r\n                        isInteraction: false,\r\n                    }).start();\r\n                }\r\n            };\r\n            this.stopAnimation = () => {\r\n                const { fade } = this.state;\r\n                const { scale } = this.props.theme.animation;\r\n                // Stop indeterminate animation\r\n                if (this.indeterminateAnimation) {\r\n                    this.indeterminateAnimation.stop();\r\n                }\r\n                Animated.timing(fade, {\r\n                    duration: 200 * scale,\r\n                    toValue: 0,\r\n                    useNativeDriver: true,\r\n                    isInteraction: false,\r\n                }).start();\r\n            };\r\n        }\r\n        componentDidUpdate(prevProps) {\r\n            const { visible, progress } = this.props;\r\n            if (progress !== prevProps.progress || visible !== prevProps.visible) {\r\n                if (visible) {\r\n                    this.startAnimation();\r\n                }\r\n                else {\r\n                    this.stopAnimation();\r\n                }\r\n            }\r\n        }\r\n        render() {\r\n            const { color, indeterminate, style, theme, \r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            progress, \r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            visible, ...rest } = this.props;\r\n            const { fade, timer, width } = this.state;\r\n            const tintColor = color || theme.colors.primary;\r\n            const trackTintColor = setColor(tintColor)\r\n                .alpha(0.38)\r\n                .rgb()\r\n                .string();\r\n            return (<View onLayout={this.onLayout} {...rest}>\r\n        <Animated.View style={[\r\n                styles.container,\r\n                { backgroundColor: trackTintColor, opacity: fade },\r\n                style,\r\n            ]}>\r\n          <Animated.View style={[\r\n                styles.progressBar,\r\n                {\r\n                    backgroundColor: tintColor,\r\n                    width,\r\n                    transform: [\r\n                        {\r\n                            translateX: timer.interpolate(indeterminate\r\n                                ? {\r\n                                    inputRange: [0, 0.5, 1],\r\n                                    outputRange: [\r\n                                        (isRTL ? 1 : -1) * 0.5 * width,\r\n                                        (isRTL ? 1 : -1) *\r\n                                            0.5 *\r\n                                            INDETERMINATE_MAX_WIDTH *\r\n                                            width,\r\n                                        (isRTL ? -1 : 1) * 0.7 * width,\r\n                                    ],\r\n                                }\r\n                                : {\r\n                                    inputRange: [0, 1],\r\n                                    outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0],\r\n                                }),\r\n                        },\r\n                        {\r\n                            // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\r\n                            scaleX: timer.interpolate(indeterminate\r\n                                ? {\r\n                                    inputRange: [0, 0.5, 1],\r\n                                    outputRange: [\r\n                                        0.0001,\r\n                                        INDETERMINATE_MAX_WIDTH,\r\n                                        0.0001,\r\n                                    ],\r\n                                }\r\n                                : {\r\n                                    inputRange: [0, 1],\r\n                                    outputRange: [0.0001, 1],\r\n                                }),\r\n                        },\r\n                    ],\r\n                },\r\n            ]}/>\r\n        </Animated.View>\r\n      </View>);\r\n        }\r\n    }\r\n    ProgressBar.defaultProps = {\r\n        visible: true,\r\n        progress: 0,\r\n    };\r\n    return ProgressBar;\r\n})();\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        height: 4,\r\n        overflow: 'hidden',\r\n    },\r\n    progressBar: {\r\n        flex: 1,\r\n    },\r\n});\r\nexport default withTheme(ProgressBar);\r\n"],"file":"ProgressBar.js"}