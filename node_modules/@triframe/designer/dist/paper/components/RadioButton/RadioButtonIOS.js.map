{"version":3,"sources":["../../../../src/paper/components/RadioButton/RadioButtonIOS.js"],"names":["RadioButtonIOS","props","disabled","onPress","theme","status","value","rest","checkedColor","colors","color","accent","rippleColor","text","alpha","rgb","string","fade","context","checked","contextValue","undefined","onValueChange","styles","container","opacity","I18nManager","isRTL","React","Component","displayName","StyleSheet","create","borderRadius","padding"],"mappings":"y6BAAA,oDACA,yCACA,oDACA,oDACA,8BACA,qDACA,2EACA,2C,o1BAgBA,GAAIA,CAAAA,cAAc,CAAkB,UAAM,IAChCA,CAAAA,cADgC,4TAEzB,gCACwD,KAAKC,KAD7D,CACGC,QADH,aACGA,QADH,CACaC,OADb,aACaA,OADb,CACsBC,KADtB,aACsBA,KADtB,CAC6BC,MAD7B,aAC6BA,MAD7B,CACqCC,KADrC,aACqCA,KADrC,CAC+CC,IAD/C,oGAEL,GAAMC,CAAAA,YAAY,CAAGN,QAAQ,CACvBE,KAAK,CAACK,MAAN,CAAaP,QADU,CAEvB,KAAKD,KAAL,CAAWS,KAAX,EAAoBN,KAAK,CAACK,MAAN,CAAaE,MAFvC,CAGA,GAAIC,CAAAA,WAAJ,CACA,GAAIV,QAAJ,CAAc,CACVU,WAAW,CAAG,mBAAMR,KAAK,CAACK,MAAN,CAAaI,IAAnB,EACTC,KADS,CACH,IADG,EAETC,GAFS,GAGTC,MAHS,EAAd,CAIH,CALD,IAMK,CACDJ,WAAW,CAAG,mBAAMJ,YAAN,EACTS,IADS,CACJ,IADI,EAETF,GAFS,GAGTC,MAHS,EAAd,CAIH,CACD,MAAQ,qBAAC,oCAAD,CAAoB,QAApB,8EACX,SAACE,OAAD,CAAa,CACN,GAAMC,CAAAA,OAAO,CAAG,qBAAU,CACtBC,YAAY,CAAEF,OAAF,cAAEA,OAAO,CAAEZ,KADD,CAEtBD,MAAM,CAANA,MAFsB,CAGtBC,KAAK,CAALA,KAHsB,CAAV,IAIT,SAJP,CAKA,MAAQ,qBAAC,wBAAD,0BAAqBC,IAArB,EAA2B,UAAU,KAArC,CAAsC,WAAW,CAAEK,WAAnD,CAAgE,OAAO,CAAEV,QAAQ,CACnFmB,SADmF,CAEnF,UAAM,CACJ,uBAAY,CACRlB,OAAO,CAAPA,OADQ,CAERG,KAAK,CAALA,KAFQ,CAGRgB,aAAa,CAAEJ,OAAF,cAAEA,OAAO,CAAEI,aAHhB,CAAZ,EAKH,CARG,CAQD,mBAAmB,CAAEpB,QAAQ,CAAG,CAAC,QAAD,CAAW,UAAX,CAAH,CAA4B,QARxD,CAQkE,0BAA0B,CAAEiB,OAAO,CAAG,qBAAH,CAA2B,uBARhI,CAQyJ,iBAAiB,CAAC,QAR3K,CAQoL,mBAAmB,CAAEjB,QAAQ,CAAG,CAAC,UAAD,CAAH,CAAkB,EARnO,CAQuO,uBAAuB,CAAC,QAR/P,CAQwQ,KAAK,CAAEqB,MAAM,CAACC,SARtR,+EASV,oBAAC,iBAAD,EAAM,KAAK,CAAE,CAAEC,OAAO,CAAEN,OAAO,CAAG,CAAH,CAAO,CAAzB,CAAb,8EACE,oBAAC,aAAD,EAAM,gBAAgB,CAAE,KAAxB,CAA+B,IAAI,CAAC,OAApC,CAA4C,IAAI,CAAE,EAAlD,CAAsD,KAAK,CAAEX,YAA7D,CAA2E,SAAS,CAAEkB,yBAAYC,KAAZ,CAAoB,KAApB,CAA4B,KAAlH,8EADF,CATU,CAAR,CAaH,CApBO,CAAR,CAsBH,CA1CiC,4BACTC,KAAK,CAACC,SADG,EA4CtC7B,cAAc,CAAC8B,WAAf,CAA6B,iBAA7B,CACA,MAAO9B,CAAAA,cAAP,CACH,CA9CkC,EAAnC,C,sCA+CA,GAAMuB,CAAAA,MAAM,CAAGQ,wBAAWC,MAAX,CAAkB,CAC7BR,SAAS,CAAE,CACPS,YAAY,CAAE,EADP,CAEPC,OAAO,CAAE,CAFF,CADkB,CAAlB,CAAf,C,aAMe,uBAAUlC,cAAV,C","sourcesContent":["import * as React from 'react';\r\nimport { StyleSheet, View, I18nManager } from 'react-native';\r\nimport color from 'color';\r\nimport { RadioButtonContext } from './RadioButtonGroup';\r\nimport { handlePress, isChecked } from './utils';\r\nimport Icon from '../Icon';\r\nimport TouchableRipple from '../TouchableRipple';\r\nimport { withTheme } from '../../core/theming';\r\n/**\r\n * Radio buttons allow the selection a single option from a set.\r\n * This component follows platform guidelines for iOS.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\r\n *     <figcaption>Enabled</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\r\n *     <figcaption>Disabled</figcaption>\r\n *   </figure>\r\n * </div>\r\n */\r\nlet RadioButtonIOS = /** @class */ (() => {\r\n    class RadioButtonIOS extends React.Component {\r\n        render() {\r\n            const { disabled, onPress, theme, status, value, ...rest } = this.props;\r\n            const checkedColor = disabled\r\n                ? theme.colors.disabled\r\n                : this.props.color || theme.colors.accent;\r\n            let rippleColor;\r\n            if (disabled) {\r\n                rippleColor = color(theme.colors.text)\r\n                    .alpha(0.16)\r\n                    .rgb()\r\n                    .string();\r\n            }\r\n            else {\r\n                rippleColor = color(checkedColor)\r\n                    .fade(0.32)\r\n                    .rgb()\r\n                    .string();\r\n            }\r\n            return (<RadioButtonContext.Consumer>\r\n        {(context) => {\r\n                const checked = isChecked({\r\n                    contextValue: context?.value,\r\n                    status,\r\n                    value,\r\n                }) === 'checked';\r\n                return (<TouchableRipple {...rest} borderless rippleColor={rippleColor} onPress={disabled\r\n                    ? undefined\r\n                    : () => {\r\n                        handlePress({\r\n                            onPress,\r\n                            value,\r\n                            onValueChange: context?.onValueChange,\r\n                        });\r\n                    }} accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'} accessibilityComponentType={checked ? 'radiobutton_checked' : 'radiobutton_unchecked'} accessibilityRole=\"button\" accessibilityStates={disabled ? ['disabled'] : []} accessibilityLiveRegion=\"polite\" style={styles.container}>\r\n              <View style={{ opacity: checked ? 1 : 0 }}>\r\n                <Icon allowFontScaling={false} name=\"check\" size={24} color={checkedColor} direction={I18nManager.isRTL ? 'rtl' : 'ltr'}/>\r\n              </View>\r\n            </TouchableRipple>);\r\n            }}\r\n      </RadioButtonContext.Consumer>);\r\n        }\r\n    }\r\n    RadioButtonIOS.displayName = 'RadioButton.IOS';\r\n    return RadioButtonIOS;\r\n})();\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        borderRadius: 18,\r\n        padding: 6,\r\n    },\r\n});\r\nexport default withTheme(RadioButtonIOS);\r\n// @component-docs ignore-next-line\r\nexport { RadioButtonIOS };\r\n"],"file":"RadioButtonIOS.js"}