{"version":3,"sources":["../../../../src/paper/components/RadioButton/RadioButtonAndroid.js"],"names":["BORDER_WIDTH","RadioButtonAndroid","arguments","state","borderAnim","Animated","Value","radioAnim","prevProps","status","props","scale","theme","animation","setValue","timing","toValue","duration","useNativeDriver","start","disabled","onPress","value","rest","checkedColor","color","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","context","checked","contextValue","fade","undefined","onValueChange","styles","container","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","React","Component","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Animated, View, StyleSheet } from 'react-native';\r\nimport color from 'color';\r\nimport { RadioButtonContext } from './RadioButtonGroup';\r\nimport { handlePress, isChecked } from './utils';\r\nimport TouchableRipple from '../TouchableRipple';\r\nimport { withTheme } from '../../core/theming';\r\nconst BORDER_WIDTH = 2;\r\n/**\r\n * Radio buttons allow the selection a single option from a set.\r\n * This component follows platform guidelines for Android.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/radio-enabled.android.png\" />\r\n *     <figcaption>Enabled</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/radio-disabled.android.png\" />\r\n *     <figcaption>Disabled</figcaption>\r\n *   </figure>\r\n * </div>\r\n */\r\nlet RadioButtonAndroid = /** @class */ (() => {\r\n    class RadioButtonAndroid extends React.Component {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.state = {\r\n                borderAnim: new Animated.Value(BORDER_WIDTH),\r\n                radioAnim: new Animated.Value(1),\r\n            };\r\n        }\r\n        componentDidUpdate(prevProps) {\r\n            if (prevProps.status === this.props.status) {\r\n                return;\r\n            }\r\n            const { scale } = this.props.theme.animation;\r\n            if (this.props.status === 'checked') {\r\n                this.state.radioAnim.setValue(1.2);\r\n                Animated.timing(this.state.radioAnim, {\r\n                    toValue: 1,\r\n                    duration: 150 * scale,\r\n                    useNativeDriver: false,\r\n                }).start();\r\n            }\r\n            else {\r\n                this.state.borderAnim.setValue(10);\r\n                Animated.timing(this.state.borderAnim, {\r\n                    toValue: BORDER_WIDTH,\r\n                    duration: 150 * scale,\r\n                    useNativeDriver: false,\r\n                }).start();\r\n            }\r\n        }\r\n        render() {\r\n            const { disabled, onPress, theme, value, status, ...rest } = this.props;\r\n            const checkedColor = this.props.color || theme.colors.accent;\r\n            const uncheckedColor = this.props.uncheckedColor ||\r\n                color(theme.colors.text)\r\n                    .alpha(theme.dark ? 0.7 : 0.54)\r\n                    .rgb()\r\n                    .string();\r\n            let rippleColor, radioColor;\r\n            return (<RadioButtonContext.Consumer>\r\n        {(context) => {\r\n                const checked = isChecked({\r\n                    contextValue: context?.value,\r\n                    status,\r\n                    value,\r\n                }) === 'checked';\r\n                if (disabled) {\r\n                    rippleColor = color(theme.colors.text)\r\n                        .alpha(0.16)\r\n                        .rgb()\r\n                        .string();\r\n                    radioColor = theme.colors.disabled;\r\n                }\r\n                else {\r\n                    rippleColor = color(checkedColor)\r\n                        .fade(0.32)\r\n                        .rgb()\r\n                        .string();\r\n                    radioColor = checked ? checkedColor : uncheckedColor;\r\n                }\r\n                return (<TouchableRipple {...rest} borderless rippleColor={rippleColor} onPress={disabled\r\n                    ? undefined\r\n                    : () => {\r\n                        handlePress({\r\n                            onPress,\r\n                            onValueChange: context?.onValueChange,\r\n                            value,\r\n                        });\r\n                    }} accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'} accessibilityComponentType={checked ? 'radiobutton_checked' : 'radiobutton_unchecked'} accessibilityRole=\"button\" accessibilityStates={disabled ? ['disabled'] : []} accessibilityLiveRegion=\"polite\" style={styles.container}>\r\n              <Animated.View style={[\r\n                    styles.radio,\r\n                    {\r\n                        borderColor: radioColor,\r\n                        borderWidth: this.state.borderAnim,\r\n                    },\r\n                ]}>\r\n                {checked ? (<View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\r\n                    <Animated.View style={[\r\n                    styles.dot,\r\n                    {\r\n                        backgroundColor: radioColor,\r\n                        transform: [{ scale: this.state.radioAnim }],\r\n                    },\r\n                ]}/>\r\n                  </View>) : null}\r\n              </Animated.View>\r\n            </TouchableRipple>);\r\n            }}\r\n      </RadioButtonContext.Consumer>);\r\n        }\r\n    }\r\n    RadioButtonAndroid.displayName = 'RadioButton.Android';\r\n    return RadioButtonAndroid;\r\n})();\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        borderRadius: 18,\r\n    },\r\n    radioContainer: {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    radio: {\r\n        height: 20,\r\n        width: 20,\r\n        borderRadius: 10,\r\n        margin: 8,\r\n    },\r\n    dot: {\r\n        height: 10,\r\n        width: 10,\r\n        borderRadius: 5,\r\n    },\r\n});\r\nexport default withTheme(RadioButtonAndroid);\r\n// @component-docs ignore-next-line\r\nexport { RadioButtonAndroid };\r\n"],"file":"RadioButtonAndroid.js"}