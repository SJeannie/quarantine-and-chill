{"version":3,"sources":["../../../../src/paper/components/RadioButton/RadioButtonItem.js"],"names":["RadioButtonItem","props","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","colors","theme","context","undefined","onValueChange","styles","container","text","React","Component","displayName","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize"],"mappings":"0uBAAA,oDACA,yCACA,2CACA,oDACA,8BACA,2EACA,kEACA,gE,q1BAoCA,GAAIA,CAAAA,eAAe,CAAkB,UAAM,IACjCA,CAAAA,eADiC,iUAE1B,gCAC6G,KAAKC,KADlH,CACGC,KADH,aACGA,KADH,CACUC,KADV,aACUA,KADV,CACiBC,KADjB,aACiBA,KADjB,CACwBC,UADxB,aACwBA,UADxB,CACoCC,OADpC,aACoCA,OADpC,CAC6CC,QAD7C,aAC6CA,QAD7C,CACuDC,KADvD,aACuDA,KADvD,CAC8DC,cAD9D,aAC8DA,cAD9D,CAC8EC,MAD9E,aAC8EA,MAD9E,CAC+FC,MAD/F,aACsFC,KADtF,CAC+FD,MAD/F,CAEL,MAAQ,qBAAC,oCAAD,CAAoB,QAApB,8EACX,SAACE,OAAD,CAAa,CACN,MAAQ,qBAAC,wBAAD,EAAiB,OAAO,CAAEN,QAAQ,CACpCO,SADoC,CAEpC,iBAAM,uBAAY,CAChBR,OAAO,CAAEA,OADO,CAEhBS,aAAa,CAAEF,OAAF,cAAEA,OAAO,CAAEE,aAFR,CAGhBb,KAAK,CAALA,KAHgB,CAAZ,CAAN,EAFE,8EAOV,oBAAC,iBAAD,EAAM,KAAK,CAAE,CAACc,MAAM,CAACC,SAAR,CAAmBb,KAAnB,CAAb,CAAwC,aAAa,CAAC,MAAtD,8EACE,oBAAC,aAAD,EAAM,KAAK,CAAE,CAACY,MAAM,CAACb,KAAR,CAAe,CAAEK,KAAK,CAAEG,MAAM,CAACO,IAAhB,CAAf,CAAuCb,UAAvC,CAAb,8EACGF,KADH,CADF,CAIE,oBAAC,oBAAD,EAAa,KAAK,CAAED,KAApB,CAA2B,QAAQ,CAAEK,QAArC,CAA+C,MAAM,CAAEG,MAAvD,CAA+D,KAAK,CAAEF,KAAtE,CAA6E,cAAc,CAAEC,cAA7F,8EAJF,CAPU,CAAR,CAcH,CAhBO,CAAR,CAkBH,CAtBkC,6BACTU,KAAK,CAACC,SADG,EAwBvCpB,eAAe,CAACqB,WAAhB,CAA8B,kBAA9B,CACA,MAAOrB,CAAAA,eAAP,CACH,CA1BmC,EAApC,C,qDA2Be,uBAAUA,eAAV,C,0BAGf,GAAMgB,CAAAA,MAAM,CAAGM,wBAAWC,MAAX,CAAkB,CAC7BN,SAAS,CAAE,CACPO,aAAa,CAAE,KADR,CAEPC,UAAU,CAAE,QAFL,CAGPC,cAAc,CAAE,eAHT,CAIPC,eAAe,CAAE,CAJV,CAKPC,iBAAiB,CAAE,EALZ,CADkB,CAQ7BzB,KAAK,CAAE,CACH0B,QAAQ,CAAE,EADP,CARsB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\r\nimport { View, StyleSheet, } from 'react-native';\r\nimport { withTheme } from '../../core/theming';\r\nimport { RadioButtonContext } from './RadioButtonGroup';\r\nimport { handlePress } from './utils';\r\nimport TouchableRipple from '../TouchableRipple';\r\nimport RadioButton from './RadioButton';\r\nimport Text from '../Typography/Text';\r\n/**\r\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\r\n *     <figcaption>Pressed</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { View } from 'react-native';\r\n * import { RadioButton, Text } from '../../';\r\n *\r\n * export default class MyComponent extends React.Component {\r\n *   state = {\r\n *     value: 'first',\r\n *   };\r\n *\r\n *   render() {\r\n *     return(\r\n *       <RadioButton.Group\r\n *         onValueChange={value => this.setState({ value })}\r\n *         value={this.state.value}\r\n *       >\r\n *           <RadioButton.Item label=\"First item\" value=\"first\" />\r\n *           <RadioButton.Item label=\"Second item\" value=\"second\" />\r\n *       </RadioButton.Group>\r\n *     )\r\n *   }\r\n * }\r\n *```\r\n */\r\nlet RadioButtonItem = /** @class */ (() => {\r\n    class RadioButtonItem extends React.Component {\r\n        render() {\r\n            const { value, label, style, labelStyle, onPress, disabled, color, uncheckedColor, status, theme: { colors }, } = this.props;\r\n            return (<RadioButtonContext.Consumer>\r\n        {(context) => {\r\n                return (<TouchableRipple onPress={disabled\r\n                    ? undefined\r\n                    : () => handlePress({\r\n                        onPress: onPress,\r\n                        onValueChange: context?.onValueChange,\r\n                        value,\r\n                    })}>\r\n              <View style={[styles.container, style]} pointerEvents=\"none\">\r\n                <Text style={[styles.label, { color: colors.text }, labelStyle]}>\r\n                  {label}\r\n                </Text>\r\n                <RadioButton value={value} disabled={disabled} status={status} color={color} uncheckedColor={uncheckedColor}/>\r\n              </View>\r\n            </TouchableRipple>);\r\n            }}\r\n      </RadioButtonContext.Consumer>);\r\n        }\r\n    }\r\n    RadioButtonItem.displayName = 'RadioButton.Item';\r\n    return RadioButtonItem;\r\n})();\r\nexport default withTheme(RadioButtonItem);\r\n// @component-docs ignore-next-line\r\nexport { RadioButtonItem };\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        paddingVertical: 8,\r\n        paddingHorizontal: 16,\r\n    },\r\n    label: {\r\n        fontSize: 16,\r\n    },\r\n});\r\n"],"file":"RadioButtonItem.js"}