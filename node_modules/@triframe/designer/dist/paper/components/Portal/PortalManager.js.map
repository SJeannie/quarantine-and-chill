{"version":3,"sources":["../../../../src/paper/components/Portal/PortalManager.js"],"names":["PortalManager","arguments","state","portals","mount","key","children","setState","update","map","item","unmount","filter","StyleSheet","absoluteFill","React","PureComponent"],"mappings":"o5BAAA,oDACA,yC,0nDAIqBA,CAAAA,a,kIACjB,wBAAc,4DACV,wBAASC,SAAT,EACA,MAAKC,KAAL,CAAa,CACTC,OAAO,CAAE,EADA,CAAb,CAGA,MAAKC,KAAL,CAAa,SAACC,GAAD,CAAMC,QAAN,CAAmB,CAC5B,MAAKC,QAAL,CAAc,SAAAL,KAAK,QAAK,CACpBC,OAAO,2CAAMD,KAAK,CAACC,OAAZ,GAAqB,CAAEE,GAAG,CAAHA,GAAF,CAAOC,QAAQ,CAARA,QAAP,CAArB,EADa,CAAL,EAAnB,EAGH,CAJD,CAKA,MAAKE,MAAL,CAAc,SAACH,GAAD,CAAMC,QAAN,QAAmB,OAAKC,QAAL,CAAc,SAAAL,KAAK,QAAK,CACrDC,OAAO,CAAED,KAAK,CAACC,OAAN,CAAcM,GAAd,CAAkB,SAAAC,IAAI,CAAI,CAC/B,GAAIA,IAAI,CAACL,GAAL,GAAaA,GAAjB,CAAsB,CAClB,sCAAYK,IAAZ,MAAkBJ,QAAQ,CAARA,QAAlB,GACH,CACD,MAAOI,CAAAA,IAAP,CACH,CALQ,CAD4C,CAAL,EAAnB,CAAnB,EAAd,CAQA,MAAKC,OAAL,CAAe,SAACN,GAAD,QAAS,OAAKE,QAAL,CAAc,SAAAL,KAAK,QAAK,CAC5CC,OAAO,CAAED,KAAK,CAACC,OAAN,CAAcS,MAAd,CAAqB,SAAAF,IAAI,QAAIA,CAAAA,IAAI,CAACL,GAAL,GAAaA,GAAjB,EAAzB,CADmC,CAAL,EAAnB,CAAT,EAAf,CAlBU,aAqBb,C,8EACQ,iBACL,MAAO,MAAKH,KAAL,CAAWC,OAAX,CAAmBM,GAAnB,CAAuB,kBAAGJ,CAAAA,GAAH,MAAGA,GAAH,CAAQC,QAAR,MAAQA,QAAR,OAAwB,qBAAC,iBAAD,EAAM,GAAG,CAAED,GAAX,CAAgB,WAAW,CAAE,KAA7B,CAA6I,aAAa,CAAC,UAA3J,CAAsK,KAAK,CAAEQ,wBAAWC,YAAxL,+EACrDR,QADqD,CAAxB,EAAvB,CAAP,CAGH,C,2BA3BsCS,KAAK,CAACC,a","sourcesContent":["import * as React from 'react';\r\nimport { View, StyleSheet } from 'react-native';\r\n/**\r\n * Portal host is the component which actually renders all Portals.\r\n */\r\nexport default class PortalManager extends React.PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            portals: [],\r\n        };\r\n        this.mount = (key, children) => {\r\n            this.setState(state => ({\r\n                portals: [...state.portals, { key, children }],\r\n            }));\r\n        };\r\n        this.update = (key, children) => this.setState(state => ({\r\n            portals: state.portals.map(item => {\r\n                if (item.key === key) {\r\n                    return { ...item, children };\r\n                }\r\n                return item;\r\n            }),\r\n        }));\r\n        this.unmount = (key) => this.setState(state => ({\r\n            portals: state.portals.filter(item => item.key !== key),\r\n        }));\r\n    }\r\n    render() {\r\n        return this.state.portals.map(({ key, children }) => (<View key={key} collapsable={false /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */} pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\r\n        {children}\r\n      </View>));\r\n    }\r\n}\r\n"],"file":"PortalManager.js"}