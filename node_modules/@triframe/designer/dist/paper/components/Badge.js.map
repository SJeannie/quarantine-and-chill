{"version":3,"sources":["../../../src/paper/components/Badge.js"],"names":["defaultSize","Badge","arguments","state","opacity","Animated","Value","props","visible","prevProps","scale","theme","animation","timing","toValue","duration","useNativeDriver","start","children","size","style","rest","StyleSheet","flatten","backgroundColor","colors","notification","restStyle","textColor","isLight","black","white","borderRadius","color","fontSize","fonts","regular","lineHeight","height","minWidth","styles","container","React","Component","defaultProps","create","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":"g/BAAA,oDACA,yCACA,oDACA,wCACA,wC,umDACA,GAAMA,CAAAA,WAAW,CAAG,EAApB,CA4BA,GAAIC,CAAAA,KAAK,CAAkB,UAAM,IACvBA,CAAAA,KADuB,0GAEzB,gBAAc,oDACV,wBAASC,SAAT,EACA,MAAKC,KAAL,CAAa,CACTC,OAAO,CAAE,GAAIC,uBAASC,KAAb,CAAmB,MAAKC,KAAL,CAAWC,OAAX,CAAqB,CAArB,CAAyB,CAA5C,CADA,CAAb,CAFU,aAKb,CAPwB,6FAQNC,SARM,CAQK,iBAC6B,KAAKF,KADlC,CAClBC,OADkB,aAClBA,OADkB,CACaE,KADb,aACTC,KADS,CACAC,SADA,CACaF,KADb,CAE1B,GAAIF,OAAO,GAAKC,SAAS,CAACD,OAA1B,CAAmC,CAC/BH,sBAASQ,MAAT,CAAgB,KAAKV,KAAL,CAAWC,OAA3B,CAAoC,CAChCU,OAAO,CAAEN,OAAO,CAAG,CAAH,CAAO,CADS,CAEhCO,QAAQ,CAAE,IAAML,KAFgB,CAGhCM,eAAe,CAAE,IAHe,CAApC,EAIGC,KAJH,GAKH,CACJ,CAjBwB,uCAkBhB,kBAGgB,KAAKV,KAHrB,CACGW,QADH,cACGA,QADH,gCACaC,IADb,CACaA,IADb,4BACoBnB,WADpB,mBACiCoB,KADjC,cACiCA,KADjC,CACwCT,KADxC,cACwCA,KADxC,CAGLH,OAHK,cAGLA,OAHK,CAGOa,IAHP,sGAIGjB,CAAAA,OAJH,CAIe,KAAKD,KAJpB,CAIGC,OAJH,UAKiEkB,wBAAWC,OAAX,CAAmBH,KAAnB,GAA6B,EAL9F,2BAKGI,eALH,CAKGA,eALH,+BAKqBb,KAAK,CAACc,MAAN,CAAaC,YALlC,sBAKmDC,SALnD,iEAML,GAAMC,CAAAA,SAAS,CAAG,mBAAMJ,eAAN,EAAuBK,OAAvB,GAAmCC,aAAnC,CAA2CC,aAA7D,CACA,GAAMC,CAAAA,YAAY,CAAGb,IAAI,CAAG,CAA5B,CACA,MAAQ,qBAAC,qBAAD,CAAU,IAAV,wBAAe,aAAa,CAAE,CAA9B,CAAiC,KAAK,CAAE,8BAExCf,OAAO,CAAPA,OAFwC,CAGxCoB,eAAe,CAAfA,eAHwC,CAIxCS,KAAK,CAAEL,SAJiC,CAKxCM,QAAQ,CAAEf,IAAI,CAAG,GALuB,EAMrCR,KAAK,CAACwB,KAAN,CAAYC,OANyB,MAOxCC,UAAU,CAAElB,IAP4B,CAQxCmB,MAAM,CAAEnB,IARgC,CASxCoB,QAAQ,CAAEpB,IAT8B,CAUxCa,YAAY,CAAZA,YAVwC,GAY5CQ,MAAM,CAACC,SAZqC,CAa5Cd,SAb4C,CAAxC,EAcDN,IAdC,+EAeXH,QAfW,CAAR,CAiBH,CA3CwB,mBACTwB,KAAK,CAACC,SADG,EA6C7B1C,KAAK,CAAC2C,YAAN,CAAqB,CACjBpC,OAAO,CAAE,IADQ,CAEjBW,IAAI,CAAEnB,WAFW,CAArB,CAIA,MAAOC,CAAAA,KAAP,CACH,CAlDyB,EAA1B,C,aAmDe,uBAAUA,KAAV,C,0BACf,GAAMuC,CAAAA,MAAM,CAAGlB,wBAAWuB,MAAX,CAAkB,CAC7BJ,SAAS,CAAE,CACPK,SAAS,CAAE,UADJ,CAEPC,SAAS,CAAE,QAFJ,CAGPC,iBAAiB,CAAE,QAHZ,CAIPC,iBAAiB,CAAE,CAJZ,CAKPC,QAAQ,CAAE,QALH,CADkB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\r\nimport { Animated, StyleSheet } from 'react-native';\r\nimport color from 'color';\r\nimport { black, white } from '../styles/colors';\r\nimport { withTheme } from '../core/theming';\r\nconst defaultSize = 20;\r\n/**\r\n * Badges are small status descriptors for UI elements.\r\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\r\n *     <figcaption>Badge with content</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\r\n *     <figcaption>Badge without content</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Badge } from '../';\r\n *\r\n * const MyComponent = () => (\r\n *   <Badge>3</Badge>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nlet Badge = /** @class */ (() => {\r\n    class Badge extends React.Component {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.state = {\r\n                opacity: new Animated.Value(this.props.visible ? 1 : 0),\r\n            };\r\n        }\r\n        componentDidUpdate(prevProps) {\r\n            const { visible, theme: { animation: { scale }, }, } = this.props;\r\n            if (visible !== prevProps.visible) {\r\n                Animated.timing(this.state.opacity, {\r\n                    toValue: visible ? 1 : 0,\r\n                    duration: 150 * scale,\r\n                    useNativeDriver: true,\r\n                }).start();\r\n            }\r\n        }\r\n        render() {\r\n            const { children, size = defaultSize, style, theme, \r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            visible, ...rest } = this.props;\r\n            const { opacity } = this.state;\r\n            const { backgroundColor = theme.colors.notification, ...restStyle } = StyleSheet.flatten(style) || {};\r\n            const textColor = color(backgroundColor).isLight() ? black : white;\r\n            const borderRadius = size / 2;\r\n            return (<Animated.Text numberOfLines={1} style={[\r\n                {\r\n                    opacity,\r\n                    backgroundColor,\r\n                    color: textColor,\r\n                    fontSize: size * 0.5,\r\n                    ...theme.fonts.regular,\r\n                    lineHeight: size,\r\n                    height: size,\r\n                    minWidth: size,\r\n                    borderRadius,\r\n                },\r\n                styles.container,\r\n                restStyle,\r\n            ]} {...rest}>\r\n        {children}\r\n      </Animated.Text>);\r\n        }\r\n    }\r\n    Badge.defaultProps = {\r\n        visible: true,\r\n        size: defaultSize,\r\n    };\r\n    return Badge;\r\n})();\r\nexport default withTheme(Badge);\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        alignSelf: 'flex-end',\r\n        textAlign: 'center',\r\n        textAlignVertical: 'center',\r\n        paddingHorizontal: 4,\r\n        overflow: 'hidden',\r\n    },\r\n});\r\n"],"file":"Badge.js"}