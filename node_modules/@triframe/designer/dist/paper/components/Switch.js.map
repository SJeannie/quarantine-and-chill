{"version":3,"sources":["../../../src/paper/components/Switch.js"],"names":["version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","props","value","disabled","onValueChange","color","theme","rest","checkedColor","colors","accent","onTintColor","Platform","OS","dark","white","alpha","rgb","string","black","thumbTintColor","grey800","grey400","grey50","major","minor","thumbColor","trackColor","true","false","React","Component"],"mappings":"k5BAAA,oDACA,wCACA,yCACA,oDACA,wC,+zBACA,GAAMA,CAAAA,OAAO,CAAGC,2BAAcC,iBAAd,CACVD,2BAAcC,iBAAd,CAAgCC,kBADtB,CAEVC,SAFN,C,GAiDMC,CAAAA,M,oRACO,iBAC6D,KAAKC,KADlE,CACGC,KADH,aACGA,KADH,CACUC,QADV,aACUA,QADV,CACoBC,aADpB,aACoBA,aADpB,CACmCC,KADnC,aACmCA,KADnC,CAC0CC,KAD1C,aAC0CA,KAD1C,CACoDC,IADpD,yGAEL,GAAMC,CAAAA,YAAY,CAAGH,KAAK,EAAIC,KAAK,CAACG,MAAN,CAAaC,MAA3C,CACA,GAAMC,CAAAA,WAAW,CAAGC,sBAASC,EAAT,GAAgB,KAAhB,CACdL,YADc,CAEdL,QAAQ,CACJG,KAAK,CAACQ,IAAN,CACI,mBAASC,aAAT,EACGC,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EADJ,CAKI,mBAASC,aAAT,EACGH,KADH,CACS,IADT,EAEGC,GAFH,GAGGC,MAHH,EANA,CAUJ,mBAASV,YAAT,EACGQ,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EAZV,CAgBA,GAAME,CAAAA,cAAc,CAAGR,sBAASC,EAAT,GAAgB,KAAhB,CACjBd,SADiB,CAEjBI,QAAQ,CACJG,KAAK,CAACQ,IAAN,CACIO,eADJ,CAEIC,eAHA,CAIJpB,KAAK,CACDM,YADC,CAEDF,KAAK,CAACQ,IAAN,CACIQ,eADJ,CAEIC,cAVlB,CAWA,GAAMtB,CAAAA,KAAK,CAAGN,OAAO,EAAIA,OAAO,CAAC6B,KAAR,GAAkB,CAA7B,EAAkC7B,OAAO,CAAC8B,KAAR,EAAiB,EAAnD,CACR,CACEd,WAAW,CAAXA,WADF,CAEES,cAAc,CAAdA,cAFF,CADQ,CAKR,CACEM,UAAU,CAAEN,cADd,CAEEO,UAAU,CAAE,CACRC,IAAI,CAAEjB,WADE,CAERkB,KAAK,CAAE,EAFC,CAFd,CALN,CAYA,MAAQ,qBAAC,mBAAD,wBAAc,KAAK,CAAE3B,KAArB,CAA4B,QAAQ,CAAEC,QAAtC,CAAgD,aAAa,CAAEA,QAAQ,CAAGJ,SAAH,CAAeK,aAAtF,EAAyGH,KAAzG,CAAoHM,IAApH,+EAAR,CACH,C,oBA5CgBuB,KAAK,CAACC,S,eA8CZ,uBAAU/B,MAAV,C","sourcesContent":["import * as React from 'react';\r\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\r\nimport { NativeModules, Platform, Switch as NativeSwitch, } from 'react-native';\r\nimport setColor from 'color';\r\nimport { withTheme } from '../core/theming';\r\nconst version = NativeModules.PlatformConstants\r\n    ? NativeModules.PlatformConstants.reactNativeVersion\r\n    : undefined;\r\n/**\r\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/switch-enabled.android.png\" />\r\n *     <figcaption>Android (enabled)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/switch-disabled.android.png\" />\r\n *     <figcaption>Android (disabled)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\r\n *     <figcaption>iOS (enabled)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\r\n *     <figcaption>iOS (disabled)</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Switch } from '../';\r\n *\r\n * export default class MyComponent extends React.Component {\r\n *   state = {\r\n *     isSwitchOn: false,\r\n *   };\r\n *\r\n *   _onToggleSwitch = () => this.setState(state => ({ isSwitchOn: !state.isSwitchOn }));\r\n *\r\n *   render() {\r\n *     const { isSwitchOn } = this.state;\r\n *     return (\r\n *       <Switch\r\n *         value={isSwitchOn}\r\n *         onValueChange={this._onToggleSwitch}\r\n *       />\r\n *     );\r\n *   }\r\n * }\r\n * ```\r\n */\r\nclass Switch extends React.Component {\r\n    render() {\r\n        const { value, disabled, onValueChange, color, theme, ...rest } = this.props;\r\n        const checkedColor = color || theme.colors.accent;\r\n        const onTintColor = Platform.OS === 'ios'\r\n            ? checkedColor\r\n            : disabled\r\n                ? theme.dark\r\n                    ? setColor(white)\r\n                        .alpha(0.1)\r\n                        .rgb()\r\n                        .string()\r\n                    : setColor(black)\r\n                        .alpha(0.12)\r\n                        .rgb()\r\n                        .string()\r\n                : setColor(checkedColor)\r\n                    .alpha(0.5)\r\n                    .rgb()\r\n                    .string();\r\n        const thumbTintColor = Platform.OS === 'ios'\r\n            ? undefined\r\n            : disabled\r\n                ? theme.dark\r\n                    ? grey800\r\n                    : grey400\r\n                : value\r\n                    ? checkedColor\r\n                    : theme.dark\r\n                        ? grey400\r\n                        : grey50;\r\n        const props = version && version.major === 0 && version.minor <= 56\r\n            ? {\r\n                onTintColor,\r\n                thumbTintColor,\r\n            }\r\n            : {\r\n                thumbColor: thumbTintColor,\r\n                trackColor: {\r\n                    true: onTintColor,\r\n                    false: '',\r\n                },\r\n            };\r\n        return (<NativeSwitch value={value} disabled={disabled} onValueChange={disabled ? undefined : onValueChange} {...props} {...rest}/>);\r\n    }\r\n}\r\nexport default withTheme(Switch);\r\n"],"file":"Switch.js"}