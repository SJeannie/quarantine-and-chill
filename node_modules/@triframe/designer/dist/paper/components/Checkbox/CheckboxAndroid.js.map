{"version":3,"sources":["../../../../src/paper/components/Checkbox/CheckboxAndroid.js"],"names":["ANIMATION_DURATION","CheckboxAndroid","arguments","state","scaleAnim","Animated","Value","prevProps","status","props","checked","animation","theme","sequence","timing","toValue","duration","scale","useNativeDriver","start","disabled","onPress","rest","indeterminate","checkedColor","color","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","checkboxColor","fade","borderWidth","interpolate","inputRange","outputRange","icon","styles","container","transform","StyleSheet","absoluteFill","fillContainer","fill","borderColor","React","Component","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Animated, View, StyleSheet } from 'react-native';\r\nimport color from 'color';\r\nimport Icon from '../Icon';\r\nimport TouchableRipple from '../TouchableRipple';\r\nimport { withTheme } from '../../core/theming';\r\n// From https://material.io/design/motion/speed.html#duration\r\nconst ANIMATION_DURATION = 100;\r\n/**\r\n * Checkboxes allow the selection of multiple options from a set.\r\n * This component follows platform guidelines for Android.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\r\n *     <figcaption>Enabled</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\r\n *     <figcaption>Disabled</figcaption>\r\n *   </figure>\r\n * </div>\r\n */\r\nlet CheckboxAndroid = /** @class */ (() => {\r\n    class CheckboxAndroid extends React.Component {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.state = {\r\n                scaleAnim: new Animated.Value(1),\r\n            };\r\n        }\r\n        componentDidUpdate(prevProps) {\r\n            if (prevProps.status === this.props.status) {\r\n                return;\r\n            }\r\n            const checked = this.props.status === 'checked';\r\n            const { animation } = this.props.theme;\r\n            Animated.sequence([\r\n                Animated.timing(this.state.scaleAnim, {\r\n                    toValue: 0.85,\r\n                    duration: checked ? ANIMATION_DURATION * animation.scale : 0,\r\n                    useNativeDriver: false,\r\n                }),\r\n                Animated.timing(this.state.scaleAnim, {\r\n                    toValue: 1,\r\n                    duration: checked\r\n                        ? ANIMATION_DURATION * animation.scale\r\n                        : ANIMATION_DURATION * animation.scale * 1.75,\r\n                    useNativeDriver: false,\r\n                }),\r\n            ]).start();\r\n        }\r\n        render() {\r\n            const { status, disabled, onPress, theme, ...rest } = this.props;\r\n            const checked = status === 'checked';\r\n            const indeterminate = status === 'indeterminate';\r\n            const checkedColor = this.props.color || theme.colors.accent;\r\n            const uncheckedColor = this.props.uncheckedColor ||\r\n                color(theme.colors.text)\r\n                    .alpha(theme.dark ? 0.7 : 0.54)\r\n                    .rgb()\r\n                    .string();\r\n            let rippleColor, checkboxColor;\r\n            if (disabled) {\r\n                rippleColor = color(theme.colors.text)\r\n                    .alpha(0.16)\r\n                    .rgb()\r\n                    .string();\r\n                checkboxColor = theme.colors.disabled;\r\n            }\r\n            else {\r\n                rippleColor = color(checkedColor)\r\n                    .fade(0.32)\r\n                    .rgb()\r\n                    .string();\r\n                checkboxColor = checked ? checkedColor : uncheckedColor;\r\n            }\r\n            const borderWidth = this.state.scaleAnim.interpolate({\r\n                inputRange: [0.8, 1],\r\n                outputRange: [7, 0],\r\n            });\r\n            const icon = indeterminate\r\n                ? 'minus-box'\r\n                : checked\r\n                    ? 'checkbox-marked'\r\n                    : 'checkbox-blank-outline';\r\n            return (<TouchableRipple {...rest} borderless rippleColor={rippleColor} onPress={onPress} disabled={disabled} accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'} accessibilityComponentType=\"button\" accessibilityRole=\"button\" accessibilityStates={disabled ? ['disabled'] : []} accessibilityLiveRegion=\"polite\" style={styles.container}>\r\n        <Animated.View style={{ transform: [{ scale: this.state.scaleAnim }] }}>\r\n          <Icon allowFontScaling={false} name={icon} size={24} color={checkboxColor} direction=\"ltr\"/>\r\n          <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\r\n            <Animated.View style={[\r\n                styles.fill,\r\n                { borderColor: checkboxColor },\r\n                { borderWidth },\r\n            ]}/>\r\n          </View>\r\n        </Animated.View>\r\n      </TouchableRipple>);\r\n        }\r\n    }\r\n    CheckboxAndroid.displayName = 'Checkbox.Android';\r\n    return CheckboxAndroid;\r\n})();\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        borderRadius: 18,\r\n        width: 36,\r\n        height: 36,\r\n        padding: 6,\r\n    },\r\n    fillContainer: {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    fill: {\r\n        height: 14,\r\n        width: 14,\r\n    },\r\n});\r\nexport default withTheme(CheckboxAndroid);\r\n// @component-docs ignore-next-line\r\nexport { CheckboxAndroid };\r\n"],"file":"CheckboxAndroid.js"}