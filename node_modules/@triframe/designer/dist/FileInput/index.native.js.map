{"version":3,"sources":["../../src/FileInput/index.native.js"],"names":["FileInput","onChange","multiple","path","children","props","filenames","changeFilenames","openImagePickerAsync","url","ImagePicker","requestCameraRollPermissionsAsync","permissionResult","granted","alert","launchImageLibraryAsync","base64","result","cancelled","localUri","uri","filename","split","pop","match","exec","type","formData","FormData","append","name","fetch","method","credentials","headers","body","then","res","json","urls","models"],"mappings":"qmBAAA,qDACA,iCACA,+BACA,qCACA,sE,0IAGO,GAAMA,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAAkG,wBAA/FC,QAA+F,CAA/FA,QAA+F,wBAApF,iBAAM,KAAM,EAAZ,EAAoF,kCAApEC,QAAoE,CAApEA,QAAoE,wBAAzD,KAAyD,8BAAlDC,IAAkD,CAAlDA,IAAkD,oBAA3C,KAA2C,8BAApCC,QAAoC,CAApCA,QAAoC,wBAAzB,QAAyB,eAAZC,KAAY,qGAChF,oBAAS,EAAT,CADgF,qDAC/GC,SAD+G,eACpGC,eADoG,eAEvH,GAAIC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAAOC,GAAP,qPACIC,WAAW,CAACC,iCAAZ,EADJ,SACrBC,gBADqB,oBAGrBA,gBAAgB,CAACC,OAAjB,GAA6B,KAHR,0BAIvBC,KAAK,CAAC,+CAAD,CAAL,CAJuB,0FAQNJ,WAAW,CAACK,uBAAZ,CAAoC,CACrDC,MAAM,CAAE,KAD6C,CAApC,CARM,SAQrBC,MARqB,eAYzB,GAAI,CAACA,MAAM,CAACC,SAAZ,CAAuB,CAEjBC,QAFiB,CAENF,MAAM,CAACG,GAFD,CAGjBC,QAHiB,CAGNF,QAAQ,CAACG,KAAT,CAAe,GAAf,EAAoBC,GAApB,EAHM,CAKrBhB,eAAe,CAACc,QAAD,CAAf,CAGIG,KARiB,CAQT,WAAWC,IAAX,CAAgBJ,QAAhB,CARS,CASjBK,IATiB,CASVF,KAAK,UAAYA,KAAK,CAAC,CAAD,CAAjB,QATK,CAYjBG,QAZiB,CAYN,GAAIC,CAAAA,QAAJ,EAZM,CAcrBD,QAAQ,CAACE,MAAT,CAAgB,CAAhB,CAAmB,CAAET,GAAG,CAAED,QAAP,CAAiBW,IAAI,CAAET,QAAvB,CAAiCK,IAAI,CAAJA,IAAjC,CAAnB,EAEAK,KAAK,CAAItB,GAAJ,WAAkB,CACrBuB,MAAM,CAAE,MADa,CAErBC,WAAW,CAAE,SAFQ,CAGrBC,OAAO,CAAE,CACP,eAAgB,qBADT,CAHY,CAMrBC,IAAI,CAAER,QANe,CAAlB,CAAL,CAQGS,IARH,CAQQ,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EARX,EASGF,IATH,CASQ,SAAAG,IAAI,CAAI,CACZtC,QAAQ,CAACC,QAAQ,CAAGqC,IAAH,CAAUA,IAAI,CAAC,CAAD,CAAvB,CAAR,CACD,CAXH,EAYD,CAxCwB,sEAA3B,CA2CA,MACE,8BAAC,eAAD,CAAO,QAAP,8EACG,SAAAC,MAAM,QACL,2DACE,6BAAC,cAAD,wBAAQ,OAAO,CAAE,yBAAMhC,CAAAA,oBAAoB,CAACgC,MAAM,CAAC/B,GAAR,CAA1B,EAAjB,EAA6DJ,KAA7D,gFAAqED,QAArE,CADF,CAEE,6BAAC,iBAAD,+EAAaE,SAAb,CAFF,CADK,EADT,CADF,CAUD,CAvDI,C","sourcesContent":["import React, { useState } from 'react'\r\nimport { Button } from '../Button'\r\nimport { HelperText } from '../paper'\r\nimport { Model } from '../Provider'\r\nimport * as ImagePicker from 'expo-image-picker';\r\n\r\n\r\nexport const FileInput = ({ onChange = () => void (0), multiple = false, path = false, children = 'Upload', ...props }) => {\r\n    const [ filenames, changeFilenames ] = useState('')\r\n    let openImagePickerAsync = async (url) => {\r\n      let permissionResult = await ImagePicker.requestCameraRollPermissionsAsync();\r\n  \r\n      if (permissionResult.granted === false) {\r\n        alert(\"Permission to access camera roll is required!\");\r\n        return;\r\n      }\r\n  \r\n      let result = await ImagePicker.launchImageLibraryAsync({\r\n        base64: false\r\n      });\r\n  \r\n      if (!result.cancelled) {\r\n        // ImagePicker saves the taken photo to disk and returns a local URI to it\r\n        let localUri = result.uri;\r\n        let filename = localUri.split('/').pop();\r\n  \r\n        changeFilenames(filename)\r\n  \r\n        // Infer the type of the image\r\n        let match = /\\.(\\w+)$/.exec(filename);\r\n        let type = match ? `image/${match[1]}` : `image`;\r\n  \r\n        // Upload the image using the fetch and FormData APIs\r\n        let formData = new FormData();\r\n        // Assume \"photo\" is the name of the form field the server expects\r\n        formData.append(0, { uri: localUri, name: filename, type });\r\n  \r\n        fetch(`${url}/upload`, {\r\n          method: 'POST',\r\n          credentials: 'include',\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n          },\r\n          body: formData\r\n        })\r\n          .then(res => res.json())\r\n          .then(urls => {\r\n            onChange(multiple ? urls : urls[0])\r\n          })\r\n      }\r\n    }\r\n  \r\n    return (\r\n      <Model.Consumer>\r\n        {models =>\r\n          <>\r\n            <Button onPress={() => openImagePickerAsync(models.url)} {...props}>{children}</Button>\r\n            <HelperText>{filenames}</HelperText>\r\n          </>\r\n        }\r\n      </Model.Consumer>\r\n    );\r\n  }\r\n  "],"file":"index.native.js"}