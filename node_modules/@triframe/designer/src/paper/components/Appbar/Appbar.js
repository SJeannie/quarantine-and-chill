import * as React from 'react';
import { View, Platform, StyleSheet } from 'react-native';
import color from 'color';
import AppbarContent from './AppbarContent';
import AppbarAction from './AppbarAction';
import AppbarBackAction from './AppbarBackAction';
import AppbarHeader from './AppbarHeader';
import Surface from '../Surface';
import { withTheme } from '../../core/theming';
import { black, white } from '../../styles/colors';
import overlay from '../../styles/overlay';
export const DEFAULT_APPBAR_HEIGHT = 56;

class Appbar extends React.Component {
    render() {
        const { children, dark, style, theme, ...rest } = this.props;
        const { colors, dark: isDarkTheme, mode } = theme;
        const { backgroundColor: customBackground, elevation = 4, ...restStyle } = StyleSheet.flatten(style) || {};
        let isDark;
        const backgroundColor = customBackground
            ? customBackground
            : isDarkTheme && mode === 'adaptive'
                ? overlay(elevation, colors.surface)
                : colors.primary;
        if (typeof dark === 'boolean') {
            isDark = dark;
        }
        else {
            isDark =
                backgroundColor === 'transparent'
                    ? false
                    : !color(backgroundColor).isLight();
        }
        let shouldCenterContent = false;
        let shouldAddLeftSpacing = false;
        let shouldAddRightSpacing = false;
        if (Platform.OS === 'ios') {
            let hasAppbarContent = false;
            let leftItemsCount = 0;
            let rightItemsCount = 0;
            React.Children.forEach(children, child => {
                if (React.isValidElement(child)) {
                    if (child.type === AppbarContent) {
                        hasAppbarContent = true;
                    }
                    else if (hasAppbarContent) {
                        rightItemsCount++;
                    }
                    else {
                        leftItemsCount++;
                    }
                }
            });
            shouldCenterContent =
                hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;
            shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;
            shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;
        }
        return (<Surface
            style={[{ backgroundColor }, styles.appbar, { elevation }, restStyle]} {...rest}>
            {shouldAddLeftSpacing ? <View style={styles.spacing} /> : null}
            {React.Children.toArray(children)
                .filter(child => child != null && typeof child !== 'boolean')
                .map((child, i) => {
                    if (!React.isValidElement(child) ||
                        ![
                            AppbarContent,
                            AppbarAction,
                            AppbarBackAction,
                        ].includes(child.type)) {
                        return child;
                    }
                    const props = {
                        color: typeof child.props.color !== 'undefined'
                            ? child.props.color
                            : isDark
                                ? white
                                : black,
                    };
                    if (child.type === AppbarContent) {
                        props.style = [
                            // Since content is not first item, add extra left margin
                            i !== 0 && { marginLeft: 8 },
                            shouldCenterContent && { alignItems: 'center' },
                            child.props.style,
                        ];
                    }
                    return React.cloneElement(child, props);
                })}
            {shouldAddRightSpacing ? <View style={styles.spacing} /> : null}
        </Surface>);
    }
}

Appbar.Content = AppbarContent;

Appbar.Action = AppbarAction;

Appbar.BackAction = AppbarBackAction;

Appbar.Header = AppbarHeader;

const styles = StyleSheet.create({
    appbar: {
        height: DEFAULT_APPBAR_HEIGHT,
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 4,
        elevation: 4,
    },
    spacing: {
        width: 48,
    },
});
export default withTheme(Appbar);
