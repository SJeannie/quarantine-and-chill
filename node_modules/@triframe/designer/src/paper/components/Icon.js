// import { Icon } from '../../Icon'
import { withTheme } from '../core/theming';

// export default withTheme(Icon)

import * as React from 'react';
import { Image, I18nManager, Platform, } from 'react-native';
import { Consumer as SettingsConsumer } from '../core/settings';

const isImageSource = (source) => 
// source is an object with uri
(typeof source === 'object' &&
    source !== null &&
    Object.prototype.hasOwnProperty.call(source, 'uri') &&
    typeof source.uri === 'string') ||
    // source is a module, e.g. - require('image')
    typeof source === 'number' ||
    // image url on web
    (Platform.OS === 'web' &&
        typeof source === 'string' &&
        (source.startsWith('data:image') ||
            /\.(bmp|jpg|jpeg|png|gif|svg)$/.test(source)));
const getIconId = (source) => {
    if (typeof source === 'object' &&
        source !== null &&
        Object.prototype.hasOwnProperty.call(source, 'uri') &&
        typeof source.uri === 'string') {
        return source.uri;
    }
    return source;
};
export const isValidIcon = (source) => typeof source === 'string';
export const isEqualIcon = (a, b) => a === b || getIconId(a) === getIconId(b);
const Icon = ({ name, source, color, size, theme, ...rest }) => {
    if(source === undefined && name) source = name
    const direction = 
    // @ts-ignore
    typeof source === 'object' && source.direction && source.source
        ? source.direction === 'auto'
            ? I18nManager.isRTL
                ? 'rtl'
                : 'ltr'
            : source.direction
        : null;
    const s = 
    // @ts-ignore
    typeof source === 'object' && source.direction && source.source
        ? source.source
        : source;
    const iconColor = color || theme.colors.text;
    if (typeof s === 'string') {
        return (<SettingsConsumer>
        {({ icon }) => {
            return icon({
                name: s,
                color: iconColor,
                size,
                direction,
            });
        }}
      </SettingsConsumer>);
    }
    else if (typeof s === 'function') {
        return s({ color: iconColor, size, direction });
    }
    return null;
};
export default withTheme(Icon);
