import { getState, print, Repo, exec, fs, path, EnvironmentVariables } from "../../utils"
import { Adapters } from "../../adapters"
import { createRelease } from "./createRelease"
const sleep = time => new Promise( resolve => setTimeout(resolve, time))

const buildCommands = {
    'web': 'npx react-scripts build',
    'native': 'expo build:web'
}

const buildDestinations = {
    'web': 'build',
    'native': 'web-build'
}


export default async (name, version = undefined) => {
    let { deployments, platform } = await getState()

    let deployment = deployments[name]
    if(deployment === undefined) return print(`No such deployment '${name}'; you could add it:
    npx triframe deployment add ${name}    
`)
    let adapter = Adapters[deployment.target]

    await adapter.dependencyCheck()

    let repo = new Repo

    let initialBranch = await repo.getCurrentBranch()

    if (!await repo.isCommitted()) {
        return print('Your repo has uncommited changes; please commit before attempting to deploy')
    }

    print('Building Backend...')
    await exec(`npx babel ./src --out-dir=./dist --config-file ${path.resolve(__dirname,'./api.babel.config.js')}`, {
        printOut: true
    })

    print('Building Frontend...')
    await exec(`${buildCommands[platform]}`, {
        printOut: true
    })
    
    await fs.copy(buildDestinations[platform], './dist/public')

    await repo.checkout(`${name}`)

    await fs.copy('./dist', '.')

    try {
        await repo.checkout('master', './package.json')
        await repo.checkout('master', './package-lock.json')
        try {
            await repo.checkout('master', '.npmrc')
        } catch(err){ 
            // no op
        }
        // await sleep(1000)
        const packagePath = path.join(process.cwd(), 'package.json')

        const config = require(packagePath)
        config.engines = {
            "node": process.version.slice(1)
        }
        config.scripts = {
            "start": "node ./Api.js"
        }
        await fs.writeFile(packagePath, JSON.stringify(config, null, 2))

        await repo.add()
        await repo.commit()
    } catch(err){
        console.log(err)
    }

    deploying: {
        print('Creating Release...')
        let release = await createRelease({ name: null /* TODO */, required: adapter.requiresRelease })
        
        if(release === false && adapter.requiresRelease){
            print('Cancelling Deployment...')
            break deploying;
        }

        await adapter.deploy(name, deployment.options, release)

        print('Deployment Complete!')
    }

    print('Cleaning Up...')
    await fs.rmdir(buildDestinations[platform])

    await fs.rmdir('./dist')

    await repo.checkout(initialBranch)
}