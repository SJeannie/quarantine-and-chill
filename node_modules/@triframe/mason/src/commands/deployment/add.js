import { getState, print, prompt, saveState, Repo, exec } from "../../utils"
import { Adapters } from "../../adapters"
import { toTitleCase, toPascalCase } from "@triframe/core"

const sleep = time => new Promise( resolve => setTimeout(resolve, time))

export default async (name, target) => {
    let repo = new Repo

    if(!name.match(/^[a-z]+$/)) return print(`Deployment names must not have upper-case letters or spaces, '${name}' is invalid`)

    let { deployments  = {}, ...state } = await getState()
    if(deployments[name]) return print(`Deployment '${name}' already exists. If you would like to replace it, please remove it first:
    npx triframe deployments remove ${name}
`)

    let branches = await repo.getBranches()

    if(branches.includes(name)) return print(`A branch '${name}' already exists, please select another name for this deployment, or remove the existing branch`)

    if(!await repo.isCommitted()){
        return print('Your repo has uncommited changes; please commit before attempting to add a deployment target')
    }

    target = target || toPascalCase(await prompt('Please select a target for deployment:', Object.keys(Adapters).map(toTitleCase)))

    let options = await Adapters[target].getOptions()

    deployments[name] = {
        target, options
    }

    await saveState({ ...state, deployments })

    let initialBranch = await repo.getCurrentBranch()
   
    await repo.branch(name)

    await repo.checkout(name)

    await repo.clear()

    await sleep(10000)

    await repo.add()

    await repo.commit()

    await repo.checkout(initialBranch)

    print(`Deployment '${name}' added`)
}