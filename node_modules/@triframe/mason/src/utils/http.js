const sendRequest = ({ method, url, body, headers }) => {
    const delimeter = url.includes('?') ? '&' : '?'
    return fetch(`${url}${delimeter}access_token=${gccOAuthToken}`, {
        method,
        body: ['POST', 'PATCH', 'PUT'].includes(method) ? JSON.stringify(body) : undefined,
        headers: { ...headers, 'Content-Type': 'application/json', 'Accept': 'application/json' }
    }).then(async response => {
        return response.json()
    })
        .then(async result => {
            if (!result.error) {
                return result
            } else if (result.error.code == 401) {
                await saveState({ token: null })
                gccOAuthToken = await getGoogleCredentials()
                return sendRequest({ method, url, body, headers })
            } else {
                console.log(result.error)
                let error = new Error(result.error.message);
                Object.assign(error, result.error)
                throw error
            }
        })
}


export const get = (url, body = {}, headers = {}) => {
    const method = "GET"
    return sendRequest({ method, url, body, headers })
}

export const post = (url, body = {}, headers = {}) => {
    const method = "POST"
    return sendRequest({ method, url, body, headers })
}

export const patch = (url, body = {}, headers = {}) => {
    const method = "PATCH"
    return sendRequest({ method, url, body, headers })
}

export const put = (url, body = {}, headers = {}) => {
    const method = "PUT"
    return sendRequest({ method, url, body, headers })
}

export const del = (url, body = {}, headers = {}) => {
    const method = "DELETE"
    return sendRequest({ method, url, body, headers })
}