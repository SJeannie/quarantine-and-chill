import { exec } from './exec'
import { fs } from './fs/index.js'


export class Repo {

    constructor(){

    }

    async getRepoName(){
        let { stdout } = await exec('git remote get-url origin')
        return stdout.split('/').pop().replace('.git', '')
    }

    async getCurrentBranch(){
        let { stdout } = await exec('git branch --show-current')
        return stdout
    }

    async getRemotes(){
        let { stdout } = await exec(`git remote -v`)
        return stdout.split('\n').map( s => s.substr(0, s.indexOf('\t')))
    }

    async getBranches(){
        let { stdout } = await exec(`git branch --format '%(refname:lstrip=2)'`)
        return stdout.split('\n').map( s => s.substr(1, s.length -2))
    }

    async ignores(file){
        if(file.endsWith('.git') || file.endsWith('.gitignore')) return true
        let { code } = await exec(`git check-ignore ${file}`, {
            expectedCodes: [ 0, 1 ]
        })
        return code === 0
    }

    async push(remote = '', opts){
        await exec(`git push ${remote}`, opts)
    }

    async add(files = '.', opts){
        await exec(`git add ${files}`, opts)
    }

    async commit(message = "-", opts){
        await exec(`git commit -m "${message}"`, opts)
    }

    async checkout(branch, file = null, opts = {}){
        await exec(`git checkout ${branch}${file != null ? ` ${file}` : ''}`, opts)
    }

    async branch(name, opts){
        await exec(`git branch ${name}`, opts)
    }

    async isCommitted(){
        let { stdout } = await exec('git status --short')
        return stdout.length === 0
    }

    async clear(){

        let files = await fs.readdir('.')
        for (let fileName of files) {
            if (!await this.ignores(fileName)) {
                let file = await fs.lstat(fileName)
                if (file.isDirectory()) {
                    await fs.rmdir(fileName)
                } else {
                    await fs.unlink(fileName)
                }
            }
        }
    }

}