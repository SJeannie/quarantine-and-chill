{"version":3,"sources":["../src/deepClone.js"],"names":["deepClone","obj","Array","isArray","map","k","value"],"mappings":";;;;;QAEgBA,S,GAAAA,S;;AAFhB;;AAEO,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AAC3B,UAAQ,OAAOA,GAAf;AACI,SAAK,QAAL;AACI,UAAG,CAACA,GAAJ,EAAS,OAAOA,GAAP;;AAET,UAAGA,GAAG,CAAC,gBAAD,CAAN,EAAyB;AACrB,eAAOA,GAAP,CADqB,CAErB;AACA;AACA;AACH;;AAED,UAAGC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAH,EAAsB;AAClB,eAAOA,GAAG,CAACG,GAAJ,CAAQJ,SAAR,CAAP;AACH;;AAED,aAAO,oBAAIC,GAAJ,EAAS,CAACI,CAAD,EAAIC,KAAJ,KAAcN,SAAS,CAACM,KAAD,CAAhC,CAAP;;AACJ,SAAK,WAAL;AACI,aAAO,IAAP;AAAa;;AACjB;AACI,aAAOL,GAAP;AAAY;AAnBpB;AAqBH","sourcesContent":["import { map } from './iterators';\r\n\r\nexport function deepClone(obj) {\r\n    switch (typeof obj) {\r\n        case \"object\":\r\n            if(!obj) return obj\r\n\r\n            if(obj['[[attributes]]']){\r\n                return obj\r\n                // let Class = obj.constructor\r\n                // let attributes = _deepClone(obj['[[attributes]]'])\r\n                // return new Class(attributes)\r\n            }\r\n\r\n            if(Array.isArray(obj)){\r\n                return obj.map(deepClone)\r\n            }\r\n\r\n            return map(obj, (k, value) => deepClone(value))\r\n        case \"undefined\":\r\n            return null; //this is how JSON.stringify behaves for array items\r\n        default:\r\n            return obj; //no need to clone primitives\r\n    }\r\n}"],"file":"deepClone.js"}