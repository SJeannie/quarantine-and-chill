"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copy = copy;

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function copy(source, dest) {
  let options = {};
  return new Promise(callback => {
    var cback = value => setTimeout(() => callback(value), 1000);

    var basePath = process.cwd(),
        currentPath = _path2.default.resolve(basePath, source),
        targetPath = _path2.default.resolve(basePath, dest),
        filter = options.filter,
        rename = options.rename,
        transform = options.transform,
        clobber = options.clobber !== false,
        modified = options.modified,
        dereference = options.dereference,
        errs = null,
        started = 0,
        finished = 0,
        running = 0,
        limit = options.limit || 16;

    limit = limit < 1 ? 1 : limit > 512 ? 512 : limit;
    startCopy(currentPath);

    function startCopy(source) {
      started++;

      if (filter) {
        if (filter instanceof RegExp) {
          if (!filter.test(source)) {
            return cb(true);
          }
        } else if (typeof filter === 'function') {
          if (!filter(source)) {
            return cb(true);
          }
        }
      }

      return getStats(source);
    }

    function getStats(source) {
      var stat = dereference ? _fs2.default.stat : _fs2.default.lstat;

      if (running >= limit) {
        return setImmediate(function () {
          getStats(source);
        });
      }

      running++;
      stat(source, function (err, stats) {
        var item = {};

        if (err) {
          return onError(err);
        } // We need to get the mode from the stats object and preserve it.


        item.name = source;
        item.mode = stats.mode;
        item.mtime = stats.mtime; //modified time

        item.atime = stats.atime; //access time

        if (stats.isDirectory()) {
          return onDir(item);
        } else if (stats.isFile()) {
          return onFile(item);
        } else if (stats.isSymbolicLink()) {
          // Symlinks don't really need to know about the mode.
          return onLink(source);
        }
      });
    }

    function onFile(file) {
      var target = file.name.replace(currentPath, targetPath);

      if (rename) {
        target = rename(target);
      }

      isWritable(target, function (writable) {
        if (writable) {
          return copyFile(file, target);
        }

        if (clobber) {
          return rmFile(target, function () {
            copyFile(file, target);
          });
        }

        if (modified) {
          var stat = dereference ? _fs2.default.stat : _fs2.default.lstat;
          stat(target, function (err, stats) {
            //if souce modified time greater to target modified time copy file
            if (file.mtime.getTime() > stats.mtime.getTime()) copyFile(file, target);else return cb();
          });
        } else {
          return cb();
        }
      });
    }

    function copyFile(file, target) {
      var readStream = _fs2.default.createReadStream(file.name),
          writeStream = _fs2.default.createWriteStream(target, {
        mode: file.mode
      });

      readStream.on('error', onError);
      writeStream.on('error', onError);

      if (transform) {
        transform(readStream, writeStream, file);
      } else {
        writeStream.on('open', function () {
          readStream.pipe(writeStream);
        });
      }

      writeStream.once('finish', function () {
        if (modified) {
          //target file modified date sync.
          _fs2.default.utimesSync(target, file.atime, file.mtime);

          cb();
        } else cb();
      });
    }

    function rmFile(file, done) {
      _fs2.default.unlink(file, function (err) {
        if (err) {
          return onError(err);
        }

        return done();
      });
    }

    function onDir(dir) {
      var target = dir.name.replace(currentPath, targetPath);
      isWritable(target, function (writable) {
        if (writable) {
          return mkDir(dir, target);
        }

        copyDir(dir.name);
      });
    }

    function mkDir(dir, target) {
      _fs2.default.mkdir(target, dir.mode, function (err) {
        if (err) {
          return onError(err);
        }

        copyDir(dir.name);
      });
    }

    function copyDir(dir) {
      _fs2.default.readdir(dir, function (err, items) {
        if (err) {
          return onError(err);
        }

        items.forEach(function (item) {
          startCopy(_path2.default.join(dir, item));
        });
        return cb();
      });
    }

    function onLink(link) {
      var target = link.replace(currentPath, targetPath);

      _fs2.default.readlink(link, function (err, resolvedPath) {
        if (err) {
          return onError(err);
        }

        checkLink(resolvedPath, target);
      });
    }

    function checkLink(resolvedPath, target) {
      if (dereference) {
        resolvedPath = _path2.default.resolve(basePath, resolvedPath);
      }

      isWritable(target, function (writable) {
        if (writable) {
          return makeLink(resolvedPath, target);
        }

        _fs2.default.readlink(target, function (err, targetDest) {
          if (err) {
            return onError(err);
          }

          if (dereference) {
            targetDest = _path2.default.resolve(basePath, targetDest);
          }

          if (targetDest === resolvedPath) {
            return cb();
          }

          return rmFile(target, function () {
            makeLink(resolvedPath, target);
          });
        });
      });
    }

    function makeLink(linkPath, target) {
      _fs2.default.symlink(linkPath, target, function (err) {
        if (err) {
          return onError(err);
        }

        return cb();
      });
    }

    function isWritable(path, done) {
      _fs2.default.lstat(path, function (err) {
        if (err) {
          if (err.code === 'ENOENT') return done(true);
          return done(false);
        }

        return done(false);
      });
    }

    function onError(err) {
      if (options.stopOnError) {
        return cback(err);
      } else if (!errs && options.errs) {
        errs = _fs2.default.createWriteStream(options.errs);
      } else if (!errs) {
        errs = [];
      }

      if (typeof errs.write === 'undefined') {
        errs.push(err);
      } else {
        errs.write(err.stack + '\n\n');
      }

      return cb();
    }

    function cb(skipped) {
      if (!skipped) running--;
      finished++;

      if (started === finished && running === 0) {
        if (cback !== undefined) {
          return errs ? cback(errs) : cback(null);
        }
      }
    }
  });
}
//# sourceMappingURL=copy.js.map