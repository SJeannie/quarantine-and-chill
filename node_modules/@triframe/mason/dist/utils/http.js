"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const sendRequest = ({
  method,
  url,
  body,
  headers
}) => {
  const delimeter = url.includes('?') ? '&' : '?';
  return fetch(`${url}${delimeter}access_token=${gccOAuthToken}`, {
    method,
    body: ['POST', 'PATCH', 'PUT'].includes(method) ? JSON.stringify(body) : undefined,
    headers: _objectSpread(_objectSpread({}, headers), {}, {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    })
  }).then(async response => {
    return response.json();
  }).then(async result => {
    if (!result.error) {
      return result;
    } else if (result.error.code == 401) {
      await saveState({
        token: null
      });
      gccOAuthToken = await getGoogleCredentials();
      return sendRequest({
        method,
        url,
        body,
        headers
      });
    } else {
      console.log(result.error);
      let error = new Error(result.error.message);
      Object.assign(error, result.error);
      throw error;
    }
  });
};

const get = exports.get = (url, body = {}, headers = {}) => {
  const method = "GET";
  return sendRequest({
    method,
    url,
    body,
    headers
  });
};

const post = exports.post = (url, body = {}, headers = {}) => {
  const method = "POST";
  return sendRequest({
    method,
    url,
    body,
    headers
  });
};

const patch = exports.patch = (url, body = {}, headers = {}) => {
  const method = "PATCH";
  return sendRequest({
    method,
    url,
    body,
    headers
  });
};

const put = exports.put = (url, body = {}, headers = {}) => {
  const method = "PUT";
  return sendRequest({
    method,
    url,
    body,
    headers
  });
};

const del = exports.del = (url, body = {}, headers = {}) => {
  const method = "DELETE";
  return sendRequest({
    method,
    url,
    body,
    headers
  });
};
//# sourceMappingURL=http.js.map