{"version":3,"sources":["../../src/utils/Repo.js"],"names":["Repo","constructor","getRepoName","stdout","split","pop","replace","getCurrentBranch","getRemotes","map","s","substr","indexOf","getBranches","length","ignores","file","endsWith","code","expectedCodes","push","remote","opts","add","files","commit","message","checkout","branch","name","isCommitted","clear","fs","readdir","fileName","lstat","isDirectory","rmdir","unlink"],"mappings":"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","sourcesContent":["import { exec } from './exec'\r\nimport { fs } from './fs/index.js'\r\n\r\n\r\nexport class Repo {\r\n\r\n    constructor(){\r\n\r\n    }\r\n\r\n    async getRepoName(){\r\n        let { stdout } = await exec('git remote get-url origin')\r\n        return stdout.split('/').pop().replace('.git', '')\r\n    }\r\n\r\n    async getCurrentBranch(){\r\n        let { stdout } = await exec('git branch --show-current')\r\n        return stdout\r\n    }\r\n\r\n    async getRemotes(){\r\n        let { stdout } = await exec(`git remote -v`)\r\n        return stdout.split('\\n').map( s => s.substr(0, s.indexOf('\\t')))\r\n    }\r\n\r\n    async getBranches(){\r\n        let { stdout } = await exec(`git branch --format '%(refname:lstrip=2)'`)\r\n        return stdout.split('\\n').map( s => s.substr(1, s.length -2))\r\n    }\r\n\r\n    async ignores(file){\r\n        if(file.endsWith('.git') || file.endsWith('.gitignore')) return true\r\n        let { code } = await exec(`git check-ignore ${file}`, {\r\n            expectedCodes: [ 0, 1 ]\r\n        })\r\n        return code === 0\r\n    }\r\n\r\n    async push(remote = '', opts){\r\n        await exec(`git push ${remote}`, opts)\r\n    }\r\n\r\n    async add(files = '.', opts){\r\n        await exec(`git add ${files}`, opts)\r\n    }\r\n\r\n    async commit(message = \"-\", opts){\r\n        await exec(`git commit -m \"${message}\"`, opts)\r\n    }\r\n\r\n    async checkout(branch, file = null, opts = {}){\r\n        await exec(`git checkout ${branch}${file != null ? ` ${file}` : ''}`, opts)\r\n    }\r\n\r\n    async branch(name, opts){\r\n        await exec(`git branch ${name}`, opts)\r\n    }\r\n\r\n    async isCommitted(){\r\n        let { stdout } = await exec('git status --short')\r\n        return stdout.length === 0\r\n    }\r\n\r\n    async clear(){\r\n\r\n        let files = await fs.readdir('.')\r\n        for (let fileName of files) {\r\n            if (!await this.ignores(fileName)) {\r\n                let file = await fs.lstat(fileName)\r\n                if (file.isDirectory()) {\r\n                    await fs.rmdir(fileName)\r\n                } else {\r\n                    await fs.unlink(fileName)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}"],"file":"Repo.js"}