"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Repo = undefined;

var _exec = require("./exec");

var _index = require("./fs/index.js");

class Repo {
  constructor() {}

  async getRepoName() {
    let {
      stdout
    } = await (0, _exec.exec)('git remote get-url origin');
    return stdout.split('/').pop().replace('.git', '');
  }

  async getCurrentBranch() {
    let {
      stdout
    } = await (0, _exec.exec)('git branch --show-current');
    return stdout;
  }

  async getRemotes() {
    let {
      stdout
    } = await (0, _exec.exec)(`git remote -v`);
    return stdout.split('\n').map(s => s.substr(0, s.indexOf('\t')));
  }

  async getBranches() {
    let {
      stdout
    } = await (0, _exec.exec)(`git branch --format '%(refname:lstrip=2)'`);
    return stdout.split('\n').map(s => s.substr(1, s.length - 2));
  }

  async ignores(file) {
    if (file.endsWith('.git') || file.endsWith('.gitignore')) return true;
    let {
      code
    } = await (0, _exec.exec)(`git check-ignore ${file}`, {
      expectedCodes: [0, 1]
    });
    return code === 0;
  }

  async push(remote = '', opts) {
    await (0, _exec.exec)(`git push ${remote}`, opts);
  }

  async add(files = '.', opts) {
    await (0, _exec.exec)(`git add ${files}`, opts);
  }

  async commit(message = "-", opts) {
    await (0, _exec.exec)(`git commit -m "${message}"`, opts);
  }

  async checkout(branch, file = null, opts = {}) {
    await (0, _exec.exec)(`git checkout ${branch}${file != null ? ` ${file}` : ''}`, opts);
  }

  async branch(name, opts) {
    await (0, _exec.exec)(`git branch ${name}`, opts);
  }

  async isCommitted() {
    let {
      stdout
    } = await (0, _exec.exec)('git status --short');
    return stdout.length === 0;
  }

  async clear() {
    let files = await _index.fs.readdir('.');

    for (let fileName of files) {
      if (!(await this.ignores(fileName))) {
        let file = await _index.fs.lstat(fileName);

        if (file.isDirectory()) {
          await _index.fs.rmdir(fileName);
        } else {
          await _index.fs.unlink(fileName);
        }
      }
    }
  }

}

exports.Repo = Repo;
//# sourceMappingURL=Repo.js.map