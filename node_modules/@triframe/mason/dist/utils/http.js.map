{"version":3,"sources":["../../src/utils/http.js"],"names":["sendRequest","method","url","body","headers","delimeter","includes","fetch","gccOAuthToken","JSON","stringify","undefined","then","response","json","result","error","code","saveState","token","getGoogleCredentials","console","log","Error","message","Object","assign","get","post","patch","put","del"],"mappings":"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","sourcesContent":["const sendRequest = ({ method, url, body, headers }) => {\r\n    const delimeter = url.includes('?') ? '&' : '?'\r\n    return fetch(`${url}${delimeter}access_token=${gccOAuthToken}`, {\r\n        method,\r\n        body: ['POST', 'PATCH', 'PUT'].includes(method) ? JSON.stringify(body) : undefined,\r\n        headers: { ...headers, 'Content-Type': 'application/json', 'Accept': 'application/json' }\r\n    }).then(async response => {\r\n        return response.json()\r\n    })\r\n        .then(async result => {\r\n            if (!result.error) {\r\n                return result\r\n            } else if (result.error.code == 401) {\r\n                await saveState({ token: null })\r\n                gccOAuthToken = await getGoogleCredentials()\r\n                return sendRequest({ method, url, body, headers })\r\n            } else {\r\n                console.log(result.error)\r\n                let error = new Error(result.error.message);\r\n                Object.assign(error, result.error)\r\n                throw error\r\n            }\r\n        })\r\n}\r\n\r\n\r\nexport const get = (url, body = {}, headers = {}) => {\r\n    const method = \"GET\"\r\n    return sendRequest({ method, url, body, headers })\r\n}\r\n\r\nexport const post = (url, body = {}, headers = {}) => {\r\n    const method = \"POST\"\r\n    return sendRequest({ method, url, body, headers })\r\n}\r\n\r\nexport const patch = (url, body = {}, headers = {}) => {\r\n    const method = \"PATCH\"\r\n    return sendRequest({ method, url, body, headers })\r\n}\r\n\r\nexport const put = (url, body = {}, headers = {}) => {\r\n    const method = \"PUT\"\r\n    return sendRequest({ method, url, body, headers })\r\n}\r\n\r\nexport const del = (url, body = {}, headers = {}) => {\r\n    const method = \"DELETE\"\r\n    return sendRequest({ method, url, body, headers })\r\n}"],"file":"http.js"}