{"version":3,"sources":["../../../src/commands/deploy/index.js"],"names":["sleep","time","Promise","resolve","setTimeout","buildCommands","buildDestinations","name","version","undefined","deployments","platform","deployment","adapter","Adapters","target","dependencyCheck","repo","Repo","initialBranch","getCurrentBranch","isCommitted","path","__dirname","printOut","fs","copy","checkout","err","packagePath","join","process","cwd","config","require","engines","slice","scripts","writeFile","JSON","stringify","add","commit","console","log","deploying","release","required","requiresRelease","deploy","options","rmdir"],"mappings":"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","sourcesContent":["import { getState, print, Repo, exec, fs, path, EnvironmentVariables } from \"../../utils\"\r\nimport { Adapters } from \"../../adapters\"\r\nimport { createRelease } from \"./createRelease\"\r\nconst sleep = time => new Promise( resolve => setTimeout(resolve, time))\r\n\r\nconst buildCommands = {\r\n    'web': 'npx react-scripts build',\r\n    'native': 'expo build:web'\r\n}\r\n\r\nconst buildDestinations = {\r\n    'web': 'build',\r\n    'native': 'web-build'\r\n}\r\n\r\n\r\nexport default async (name, version = undefined) => {\r\n    let { deployments, platform } = await getState()\r\n\r\n    let deployment = deployments[name]\r\n    if(deployment === undefined) return print(`No such deployment '${name}'; you could add it:\r\n    npx triframe deployment add ${name}    \r\n`)\r\n    let adapter = Adapters[deployment.target]\r\n\r\n    await adapter.dependencyCheck()\r\n\r\n    let repo = new Repo\r\n\r\n    let initialBranch = await repo.getCurrentBranch()\r\n\r\n    if (!await repo.isCommitted()) {\r\n        return print('Your repo has uncommited changes; please commit before attempting to deploy')\r\n    }\r\n\r\n    print('Building Backend...')\r\n    await exec(`npx babel ./src --out-dir=./dist --config-file ${path.resolve(__dirname,'./api.babel.config.js')}`, {\r\n        printOut: true\r\n    })\r\n\r\n    print('Building Frontend...')\r\n    await exec(`${buildCommands[platform]}`, {\r\n        printOut: true\r\n    })\r\n    \r\n    await fs.copy(buildDestinations[platform], './dist/public')\r\n\r\n    await repo.checkout(`${name}`)\r\n\r\n    await fs.copy('./dist', '.')\r\n\r\n    try {\r\n        await repo.checkout('master', './package.json')\r\n        await repo.checkout('master', './package-lock.json')\r\n        try {\r\n            await repo.checkout('master', '.npmrc')\r\n        } catch(err){ \r\n            // no op\r\n        }\r\n        // await sleep(1000)\r\n        const packagePath = path.join(process.cwd(), 'package.json')\r\n\r\n        const config = require(packagePath)\r\n        config.engines = {\r\n            \"node\": process.version.slice(1)\r\n        }\r\n        config.scripts = {\r\n            \"start\": \"node ./Api.js\"\r\n        }\r\n        await fs.writeFile(packagePath, JSON.stringify(config, null, 2))\r\n\r\n        await repo.add()\r\n        await repo.commit()\r\n    } catch(err){\r\n        console.log(err)\r\n    }\r\n\r\n    deploying: {\r\n        print('Creating Release...')\r\n        let release = await createRelease({ name: null /* TODO */, required: adapter.requiresRelease })\r\n        \r\n        if(release === false && adapter.requiresRelease){\r\n            print('Cancelling Deployment...')\r\n            break deploying;\r\n        }\r\n\r\n        await adapter.deploy(name, deployment.options, release)\r\n\r\n        print('Deployment Complete!')\r\n    }\r\n\r\n    print('Cleaning Up...')\r\n    await fs.rmdir(buildDestinations[platform])\r\n\r\n    await fs.rmdir('./dist')\r\n\r\n    await repo.checkout(initialBranch)\r\n}"],"file":"index.js"}