{"version":3,"sources":["../../../src/commands/deploy/createRelease.js"],"names":["createRelease","name","required","repo","Repo","branch","getCurrentBranch","remotes","getRemotes","find","remote","startsWith","includes","repoName","getRemoteName","gitPersonalAccessToken","prompt","octokit","Octokit","auth","user","users","getAuthenticated","console","log","Error","repos","tag_name","target_commitish","owner"],"mappings":";;;;;;;AAAA;;AAEO,MAAMA,aAAa,WAAbA,aAAa,GAAG,OAAO;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAP,KAA8B;AACvD,MAAIC,IAAI,GAAG,IAAIC,WAAJ,EAAX;AACA,MAAIC,MAAM,GAAG,MAAMF,IAAI,CAACG,gBAAL,EAAnB;AACA,MAAIC,OAAO,GAAG,MAAMJ,IAAI,CAACK,UAAL,EAApB;;AACA,MAAG,CAACD,OAAO,CAACE,IAAR,CAAaC,MAAM,IAAIA,MAAM,CAACC,UAAP,CAAkB,QAAlB,KAA+BD,MAAM,CAACE,QAAP,CAAgB,YAAhB,CAAtD,CAAJ,EAA0F;AACtF,QAAGV,QAAH,EAAY;AACR,wBAAO,iIAAP;AACH,KAFD,MAEO;AACH,wBAAO,mFAAP;AACH;;AACD,WAAO,KAAP;AACH;;AACD,MAAIW,QAAQ,GAAG,MAAMV,IAAI,CAACW,aAAL,EAArB;AACA,MAAI;AAAEC,IAAAA;AAAF,MAA6B,MAAM,sBAAvC;;AACA,MAAI,CAACA,sBAAL,EAA4B;AACxBA,IAAAA,sBAAsB,GAAG,MAAMC,MAAM,CAAC,0CAAD,CAArC;AACA,UAAM,sBAAU;AAAED,MAAAA;AAAF,KAAV,CAAN;AACH;;AACD,MAAIE,OAAO,GAAG,IAAIC,OAAJ,CAAY;AACtBC,IAAAA,IAAI,EAAEJ;AADgB,GAAZ,CAAd;AAGA,MAAIK,IAAI,GAAG,MAAMH,OAAO,CAACI,KAAR,CAAcC,gBAAd,EAAjB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,QAAMK,KAAK,CAAC,0BAAD,CAAX;AACA,SAAO,MAAMR,OAAO,CAACS,KAAR,CAAc1B,aAAd,CAA4B;AACrCC,IAAAA,IAAI,EAAEA,IAD+B;AAErC0B,IAAAA,QAAQ,EAAG,cAAa1B,IAAK,EAFQ;AAGrCE,IAAAA,IAAI,EAAEU,QAH+B;AAIrCe,IAAAA,gBAAgB,EAAEvB,MAJmB;AAKrCwB,IAAAA,KAAK,EAAET,IAAI,CAACnB;AALyB,GAA5B,CAAb;AAOH,CA/BM","sourcesContent":["import { getState, saveState, Repo, print } from \"../../utils\"\r\n\r\nexport const createRelease = async ({ name, required }) => {\r\n    let repo = new Repo\r\n    let branch = await repo.getCurrentBranch()\r\n    let remotes = await repo.getRemotes()\r\n    if(!remotes.find(remote => remote.startsWith('origin') && remote.includes('github.com') )){\r\n        if(required){\r\n            print(`There is no GitHub 'origin' remote for this repository; a GitHub origin remote is required for the selected deployment strategy`)\r\n        } else {\r\n            print(`There is no 'origin' remote for this repository; skipping GitHub release creation`)\r\n        }\r\n        return false\r\n    }\r\n    let repoName = await repo.getRemoteName()\r\n    let { gitPersonalAccessToken } = await getState()\r\n    if (!gitPersonalAccessToken){\r\n        gitPersonalAccessToken = await prompt(\"Enter your GitHub Personal Access Token:\")\r\n        await saveState({ gitPersonalAccessToken })\r\n    }\r\n    let octokit = new Octokit({\r\n        auth: gitPersonalAccessToken\r\n    });\r\n    let user = await octokit.users.getAuthenticated();\r\n    console.log(user)\r\n    throw Error('Deal with the user first')\r\n    return await octokit.repos.createRelease({\r\n        name: name,\r\n        tag_name: `deployment@${name}`,\r\n        repo: repoName,\r\n        target_commitish: branch,\r\n        owner: user.name\r\n    })\r\n}"],"file":"createRelease.js"}