{"version":3,"sources":["../../../src/commands/deploy/gcc.js"],"names":["fsSync","require","fs","promises","exec","promisify","ncp","Path","fetch","open","express","bodyParser","Octokit","readline","GOOGLE_CLIENT_ID","BASE_DISK_NAME","GIT_DIST_BRANCH","userName","gcProjectName","gcRegion","octokit","gccOAuthToken","gcProjectNumber","projectName","gitPersonalAccessToken","name","getGoogleCredentials","duplicate","findDuplicate","tarball_url","release","data","createInstanceTemplate","createOrUpdateInstanceGroup","replace","items","templates","get","find","template","instanceGroups","group","operation","console","log","post","instanceTemplate","baseInstanceName","targetSize","patch","completionOf","findOrCreateProject","findOrCreateDisk","findOrCreateBucket","gcBucketName","getState","createStartupScript","project","projectNumber","err","error","createProject","result","disks","disk","createDisk","undefined","createBucket","buckets","bucket","response","saveState","createToken","createDiskSource","destroyDiskSource","creation","diskStartUpScript","stopping","del","Promise","resolve","poll","selfLink","status","sleep","time","setTimeout","token","app","use","urlencoded","extended","json","req","res","send","params","ok","server","close","listen","redirect_uri","encodeURIComponent","scope","characters","charactersLength","length","i","charAt","Math","floor","random"],"mappings":"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","sourcesContent":["import { prompt } from '../../utils';\r\n\r\nconst fsSync = require('fs')\r\nconst fs = fsSync.promises\r\nconst exec = require('util').promisify(require('child_process').exec)\r\nconst ncp = require('ncp').ncp;\r\nconst Path = require('path')\r\nconst fetch = require('node-fetch')\r\nconst open = require('opn')\r\nconst express = require('express')\r\nconst bodyParser = require('body-parser')\r\nconst { Octokit } = require(\"@octokit/rest\");\r\nconst readline = require(\"readline\");\r\n\r\nconst GOOGLE_CLIENT_ID = '1009774431187-m11c1cekqfsnt48pb7cl25d13kq15sj3.apps.googleusercontent.com' // hard-code\r\n\r\nconst BASE_DISK_NAME = 'triframe-base' // hard-code\r\n\r\nconst GIT_DIST_BRANCH = 'distribution' // comes from deployment\r\n\r\nconst userName = 'joshua-miles' // still not sure where this should come from\r\nconst gcProjectName = 'spiral-app' // Deployment options\r\nconst gcRegion = 'us-central1' // Deployment options\r\n\r\n\r\nlet octokit, gccOAuthToken, gcProjectNumber, projectName, gitPersonalAccessToken;\r\n\r\nexport default async (name) => {\r\n\r\n    gccOAuthToken = await getGoogleCredentials()\r\n\r\n    let duplicate = await findDuplicate(name)\r\n\r\n    const { tarball_url } = release.data\r\n\r\n    await createInstanceTemplate(tarball_url, name)\r\n\r\n    await createOrUpdateInstanceGroup(name)\r\n\r\n}\r\n\r\n\r\nconst findDuplicate = async (name) => {\r\n    name = `${projectName}-${name.replace(/\\./g, '-')}`\r\n    let { items: templates } = await get(`https://compute.googleapis.com/compute/v1/projects/${gcProjectName}/global/instanceTemplates`)\r\n    return templates.find(template => template.name === name)\r\n}\r\n\r\nconst createOrUpdateInstanceGroup = async name => {\r\n    name = `${projectName}-${name.replace(/\\./g, '-')}`\r\n    let { items: instanceGroups } = await get(`https://compute.googleapis.com/compute/v1/projects/${gcProjectName}/zones/${gcRegion}-a/instanceGroupManagers`)\r\n    let group = instanceGroups.find(group => group.name === projectName)\r\n    let operation;\r\n    if (!group) {\r\n        console.log('Creating New Instance Group...')\r\n        operation = await post(`https://compute.googleapis.com/compute/v1/projects/${gcProjectName}/zones/${gcRegion}-a/instanceGroupManagers`, {\r\n            name: projectName,\r\n            instanceTemplate: `projects/${gcProjectName}/global/instanceTemplates/${name}`,\r\n            baseInstanceName: projectName,\r\n            targetSize: 1\r\n        })\r\n    } else {\r\n        console.log('Starting Rolling Update...')\r\n        operation = await patch(`https://compute.googleapis.com/compute/v1/projects/${gcProjectName}/zones/${gcRegion}-a/instanceGroupManagers/${projectName}`, {\r\n            instanceTemplate: `projects/${gcProjectName}/global/instanceTemplates/${name}`,\r\n        })\r\n    }\r\n    await completionOf(operation)\r\n    console.log('Update Complete')\r\n}\r\n\r\nconst createInstanceTemplate = async (tarball_url, name) => {\r\n    name = `${projectName}-${name.replace(/\\./g, '-')}`\r\n    await findOrCreateProject()\r\n    await findOrCreateDisk()\r\n    await findOrCreateBucket()\r\n    // await findOrCreateDatabase\r\n    // await findOrCreateLoadBalancer\r\n    const { gcBucketName } = await getState()\r\n    console.log('Creating Instance Template...')\r\n    const operation = await post(`https://compute.googleapis.com/compute/v1/projects/${gcProjectName}/global/instanceTemplates`, {\r\n        \"name\": name,\r\n        \"description\": \"\",\r\n        \"properties\": {\r\n            \"machineType\": \"g1-small\",\r\n            \"displayDevice\": {\r\n                \"enableDisplay\": false\r\n            },\r\n            \"metadata\": {\r\n                \"kind\": \"compute#metadata\",\r\n                \"items\": [\r\n                    {\r\n                        \"key\": \"startup-script\",\r\n                        \"value\": createStartupScript(tarball_url, gcBucketName)\r\n                    }\r\n                ]\r\n            },\r\n            \"tags\": {\r\n                \"items\": [\r\n                    \"http-server\",\r\n                    \"https-server\"\r\n                ]\r\n            },\r\n            \"disks\": [\r\n                {\r\n                    \"kind\": \"compute#attachedDisk\",\r\n                    \"type\": \"PERSISTENT\",\r\n                    \"boot\": true,\r\n                    \"mode\": \"READ_WRITE\",\r\n                    \"autoDelete\": true,\r\n                    \"deviceName\": \"instance-template-5\",\r\n                    \"initializeParams\": {\r\n                        \"sourceImage\": `projects/${gcProjectName}/global/images/${BASE_DISK_NAME}`,\r\n                        \"diskType\": \"pd-standard\",\r\n                        \"diskSizeGb\": \"10\",\r\n                        \"labels\": {}\r\n                    }\r\n                }\r\n            ],\r\n            \"canIpForward\": false,\r\n            \"networkInterfaces\": [\r\n                {\r\n                    \"kind\": \"compute#networkInterface\",\r\n                    \"network\": `projects/${gcProjectName}/global/networks/default`,\r\n                    \"accessConfigs\": [\r\n                        {\r\n                            \"kind\": \"compute#accessConfig\",\r\n                            \"name\": \"External NAT\",\r\n                            \"type\": \"ONE_TO_ONE_NAT\",\r\n                            \"networkTier\": \"PREMIUM\"\r\n                        }\r\n                    ],\r\n                    \"aliasIpRanges\": []\r\n                }\r\n            ],\r\n            \"labels\": {},\r\n            \"scheduling\": {\r\n                \"preemptible\": false,\r\n                \"onHostMaintenance\": \"MIGRATE\",\r\n                \"automaticRestart\": true,\r\n                \"nodeAffinities\": []\r\n            },\r\n            \"reservationAffinity\": {\r\n                \"consumeReservationType\": \"ANY_RESERVATION\"\r\n            },\r\n            \"shieldedInstanceConfig\": {\r\n                \"enableSecureBoot\": false,\r\n                \"enableVtpm\": true,\r\n                \"enableIntegrityMonitoring\": true\r\n            },\r\n            \"serviceAccounts\": [\r\n                {\r\n                    \"email\": `${gcProjectNumber}-compute@developer.gserviceaccount.com`,\r\n                    \"scopes\": [\r\n                        \"https://www.googleapis.com/auth/devstorage.full_control\",\r\n                        \"https://www.googleapis.com/auth/logging.write\",\r\n                        \"https://www.googleapis.com/auth/monitoring.write\",\r\n                        \"https://www.googleapis.com/auth/servicecontrol\",\r\n                        \"https://www.googleapis.com/auth/service.management.readonly\",\r\n                        \"https://www.googleapis.com/auth/trace.append\",\r\n                        \"https://www.googleapis.com/auth/trace.append\",\r\n                        'https://www.googleapis.com/auth/sqlservice.admin'\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    })\r\n    await completionOf(operation)\r\n    console.log('Created Instance Template')\r\n}\r\n\r\n\r\n\r\nconst findOrCreateProject = async () => {\r\n    try {\r\n        let project = await get(`https://cloudresourcemanager.googleapis.com/v1/projects/${gcProjectName}`)\r\n        gcProjectNumber = project.projectNumber\r\n    } catch (err){\r\n        console.error('You haven\\'t built this yet :(')\r\n        // await createProject(name)\r\n    }\r\n}\r\n\r\nconst createProject = async (name) => {\r\n    // TODO: Finish this\r\n    await post(`https://cloudresourcemanager.googleapis.com/v1/projects`, {\r\n        name\r\n    })\r\n}\r\n\r\nconst findOrCreateDisk = async () => {\r\n    let result = await get(`https://compute.googleapis.com/compute/v1/projects/${gcProjectName}/global/images`)\r\n    const disks = result.items || []\r\n    const disk = disks.find(disk => disk.name === BASE_DISK_NAME)\r\n    if (!disk) await createDisk()\r\n}\r\n\r\n\r\nconst findOrCreateBucket = async () => {\r\n    const { gcBucketName } = await getState()\r\n    if (gcBucketName === undefined) return createBucket()\r\n    let result = await get(`https://storage.googleapis.com/storage/v1/b?project=${gcProjectName}`)\r\n    const buckets = result.items || []\r\n    const bucket = buckets.find(bucket => bucket.name === gcBucketName)\r\n    if (!bucket) await createBucket()\r\n}\r\n\r\nconst createBucket = async (name = `${projectName}-bucket`) => {\r\n    console.log(`Creating Bucket \"${name}\"`)\r\n    try {\r\n        const response = await post(`https://storage.googleapis.com/storage/v1/b?project=${gcProjectName}`, {\r\n            name\r\n        })\r\n        await saveState({ gcBucketName: response.name })\r\n        return response\r\n    } catch (err) {\r\n        console.log('Bucket Creation Failed...')\r\n        return await createBucket(`${name}-${createToken()}`)\r\n    }\r\n}\r\n\r\nconst createDisk = async () => {\r\n    await createDiskSource()\r\n    console.log('Creating Disk Image...')\r\n    const operation = await post(`https://compute.googleapis.com/compute/v1/projects/${gcProjectName}/global/images`, {\r\n        \"kind\": \"compute#image\",\r\n        \"name\": BASE_DISK_NAME,\r\n        \"sourceDisk\": `projects/${gcProjectName}/zones/${gcRegion}-a/disks/${BASE_DISK_NAME}`,\r\n        \"storageLocations\": [\r\n            \"us\"\r\n        ]\r\n    })\r\n    await completionOf(operation)\r\n    console.log('Created Disk Image')\r\n    await destroyDiskSource()\r\n}\r\n\r\nconst createDiskSource = async () => {\r\n    console.log('Creating Disk Source....')\r\n    let creation = await post(`https://compute.googleapis.com/compute/v1/projects/${gcProjectName}/zones/${gcRegion}-a/instances`, {\r\n        \"kind\": \"compute#instance\",\r\n        \"name\": BASE_DISK_NAME,\r\n        \"zone\": `projects/${gcProjectName}/zones/${gcRegion}-a`,\r\n        \"machineType\": `projects/${gcProjectName}/zones/${gcRegion}-a/machineTypes/g1-small`,\r\n        \"displayDevice\": {\r\n            \"enableDisplay\": false\r\n        },\r\n        \"metadata\": {\r\n            \"kind\": \"compute#metadata\",\r\n            \"items\": [\r\n                {\r\n                    \"key\": \"startup-script\",\r\n                    \"value\": diskStartUpScript\r\n                }\r\n            ]\r\n        },\r\n        \"networkInterfaces\": [\r\n            {\r\n                \"kind\": \"compute#networkInterface\",\r\n                \"subnetwork\": \"projects/spiral-app/regions/us-central1/subnetworks/default\",\r\n                \"accessConfigs\": [\r\n                    {\r\n                        \"kind\": \"compute#accessConfig\",\r\n                        \"name\": \"External NAT\",\r\n                        \"type\": \"ONE_TO_ONE_NAT\",\r\n                        \"networkTier\": \"PREMIUM\"\r\n                    }\r\n                ],\r\n                \"aliasIpRanges\": []\r\n            },\r\n        ],\r\n        \"disks\": [\r\n            {\r\n                \"kind\": \"compute#attachedDisk\",\r\n                \"type\": \"PERSISTENT\",\r\n                \"boot\": true,\r\n                \"mode\": \"READ_WRITE\",\r\n                \"autoDelete\": true,\r\n                \"deviceName\": BASE_DISK_NAME,\r\n                \"initializeParams\": {\r\n                    \"sourceImage\": \"projects/ubuntu-os-cloud/global/images/ubuntu-1604-xenial-v20200407\",\r\n                    \"diskType\": `projects/${gcProjectName}/zones/${gcRegion}-a/diskTypes/pd-ssd`,\r\n                    \"diskSizeGb\": \"10\"\r\n                },\r\n                \"diskEncryptionKey\": {}\r\n            }\r\n        ],\r\n        \"canIpForward\": false,\r\n        \"description\": \"\",\r\n        \"labels\": {},\r\n        \"scheduling\": {\r\n            \"preemptible\": false,\r\n            \"onHostMaintenance\": \"MIGRATE\",\r\n            \"automaticRestart\": true,\r\n            \"nodeAffinities\": []\r\n        },\r\n        \"deletionProtection\": false,\r\n        \"reservationAffinity\": {\r\n            \"consumeReservationType\": \"ANY_RESERVATION\"\r\n        },\r\n        \"shieldedInstanceConfig\": {\r\n            \"enableSecureBoot\": false,\r\n            \"enableVtpm\": true,\r\n            \"enableIntegrityMonitoring\": true\r\n        }\r\n    })\r\n    await completionOf(creation)\r\n    console.log('Created Disk Source')\r\n    console.log('Stopping Disc Source')\r\n    let stopping = await post(`https://compute.googleapis.com/compute/v1/projects/${gcProjectName}/zones/${gcRegion}-a/instances/${BASE_DISK_NAME}/stop`)\r\n    await completionOf(stopping)\r\n    console.log('Stopped Disc Source')\r\n}\r\n\r\nconst destroyDiskSource = async () => {\r\n    const operation = await del(`https://compute.googleapis.com/compute/v1/projects/${gcProjectName}/zones/${gcRegion}-a/instances/${BASE_DISK_NAME}`)\r\n    await completionOf(operation)\r\n    console.log('Destroyed Disk Source')\r\n}\r\n\r\n\r\nconst completionOf = (operation) => {\r\n    return new Promise(resolve => {\r\n        const poll = async () => {\r\n            const result = await post(`${operation.selfLink}/wait`)\r\n            if (result.status === 'DONE') {\r\n                resolve(result)\r\n            } else {\r\n                await sleep(5000)\r\n                poll()\r\n            }\r\n        }\r\n        poll()\r\n    })\r\n}\r\n\r\nconst sleep = time => new Promise(resolve => setTimeout(resolve, time))\r\n\r\nconst getGoogleCredentials = async () => {\r\n    const { token } = await getState()\r\n    if (token) return token\r\n    else return new Promise(resolve => {\r\n        const app = express()\r\n        app.use(bodyParser.urlencoded({ extended: false }));\r\n        app.use(bodyParser.json());\r\n        app.get('/token', async (req, res) => {\r\n            res.send(`\r\n                <html>\r\n                    <h1>Authentication Received</h1>\r\n                    <h3>Return to your terminal to complete the deployment process...</h3>\r\n                    <script>\r\n                        var fragmentString = location.hash.substring(1);\r\n                        var params = {};\r\n                        var regex = /([^&=]+)=([^&]*)/g, m;\r\n                        while (m = regex.exec(fragmentString)) {\r\n                            params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\r\n                        }\r\n                        fetch(\\`http://localhost:${5000}/save-token/\\${params['access_token']}\\`)\r\n                    </script>\r\n                </html>\r\n            `)\r\n        })\r\n        app.get('/save-token/:token', (req, res) => {\r\n            const { token } = req.params\r\n            saveState({ token })\r\n            resolve(token)\r\n            res.json({ ok: true })\r\n            server.close()\r\n        })\r\n        let server = app.listen(5000)\r\n        const redirect_uri = encodeURIComponent(`http://localhost:${5000}/token`)\r\n        const scope = encodeURIComponent('https://www.googleapis.com/auth/cloud-platform')\r\n        open(`https://accounts.google.com/o/oauth2/v2/auth?scope=${scope}&response_type=token&redirect_uri=${redirect_uri}&client_id=${GOOGLE_CLIENT_ID}`)\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\nconst diskStartUpScript = `\r\n    curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\r\n    sudo apt-get install -y nodejs\r\n`\r\n\r\nconst createStartupScript = (tarball_url, gcBucketName) => `\r\nwget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy\r\nchmod +x cloud_sql_proxy\r\n./cloud_sql_proxy -instances=spiral-app:us-central1:spiral-db=tcp:5432 &\r\ncurl -L -u '${userName}:${gitPersonalAccessToken}' '${tarball_url}' | tar xzf - --one-top-level=\"${projectName}\" --strip-components 1\r\ncd ${projectName}\r\nmkdir ./.storage\r\nexport GCSFUSE_REPO=gcsfuse-\\`lsb_release -c -s\\`\r\necho \"deb http://packages.cloud.google.com/apt $GCSFUSE_REPO main\" | sudo tee /etc/apt/sources.list.d/gcsfuse.list\r\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\r\nwhile [ 1 == 1 ]\r\ndo\r\n    sudo apt-get update\r\n    sudo apt-get install gcsfuse\r\n    if dpkg-query -W -f='\\${Status}' gcsfuse | grep \"ok installed\"; then\r\n        break 1\r\n    fi\r\ndone\r\ngcsfuse ${gcBucketName} ./.storage\r\nnpm install --only=production\r\nexport DB_HOST=\"127.0.0.1\"\r\nexport DB_PORT=\"5432\"\r\nexport DB_NAME=\"postgres\"\r\nexport DB_USER=\"postgres\"\r\nexport DB_PASSWORD=\"myNaAdJkJ1eF44Fz\"\r\nexport BACKEND_PORT=80\r\nnpm run production\r\n`\r\n\r\nconst createToken = () => {\r\n    var result = '';\r\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < 12; i++) {\r\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n}\r\n"],"file":"gcc.js"}