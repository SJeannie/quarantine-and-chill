"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRelease = undefined;

var _utils = require("../../utils");

const createRelease = exports.createRelease = async ({
  name,
  required
}) => {
  let repo = new _utils.Repo();
  let branch = await repo.getCurrentBranch();
  let remotes = await repo.getRemotes();

  if (!remotes.find(remote => remote.startsWith('origin') && remote.includes('github.com'))) {
    if (required) {
      (0, _utils.print)(`There is no GitHub 'origin' remote for this repository; a GitHub origin remote is required for the selected deployment strategy`);
    } else {
      (0, _utils.print)(`There is no 'origin' remote for this repository; skipping GitHub release creation`);
    }

    return false;
  }

  let repoName = await repo.getRemoteName();
  let {
    gitPersonalAccessToken
  } = await (0, _utils.getState)();

  if (!gitPersonalAccessToken) {
    gitPersonalAccessToken = await prompt("Enter your GitHub Personal Access Token:");
    await (0, _utils.saveState)({
      gitPersonalAccessToken
    });
  }

  let octokit = new Octokit({
    auth: gitPersonalAccessToken
  });
  let user = await octokit.users.getAuthenticated();
  console.log(user);
  throw Error('Deal with the user first');
  return await octokit.repos.createRelease({
    name: name,
    tag_name: `deployment@${name}`,
    repo: repoName,
    target_commitish: branch,
    owner: user.name
  });
};
//# sourceMappingURL=createRelease.js.map