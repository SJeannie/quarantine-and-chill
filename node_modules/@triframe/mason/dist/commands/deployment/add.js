"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require("../../utils");

var _adapters = require("../../adapters");

var _core = require("@triframe/core");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const sleep = time => new Promise(resolve => setTimeout(resolve, time));

exports.default = async (name, target) => {
  let repo = new _utils.Repo();
  if (!name.match(/^[a-z]+$/)) return (0, _utils.print)(`Deployment names must not have upper-case letters or spaces, '${name}' is invalid`);

  let _await$getState = await (0, _utils.getState)(),
      {
    deployments = {}
  } = _await$getState,
      state = _objectWithoutProperties(_await$getState, ["deployments"]);

  if (deployments[name]) return (0, _utils.print)(`Deployment '${name}' already exists. If you would like to replace it, please remove it first:
    npx triframe deployments remove ${name}
`);
  let branches = await repo.getBranches();
  if (branches.includes(name)) return (0, _utils.print)(`A branch '${name}' already exists, please select another name for this deployment, or remove the existing branch`);

  if (!(await repo.isCommitted())) {
    return (0, _utils.print)('Your repo has uncommited changes; please commit before attempting to add a deployment target');
  }

  target = target || (0, _core.toPascalCase)(await (0, _utils.prompt)('Please select a target for deployment:', Object.keys(_adapters.Adapters).map(_core.toTitleCase)));
  let options = await _adapters.Adapters[target].getOptions();
  deployments[name] = {
    target,
    options
  };
  await (0, _utils.saveState)(_objectSpread(_objectSpread({}, state), {}, {
    deployments
  }));
  let initialBranch = await repo.getCurrentBranch();
  await repo.branch(name);
  await repo.checkout(name);
  await repo.clear();
  await sleep(10000);
  await repo.add();
  await repo.commit();
  await repo.checkout(initialBranch);
  (0, _utils.print)(`Deployment '${name}' added`);
};
//# sourceMappingURL=add.js.map