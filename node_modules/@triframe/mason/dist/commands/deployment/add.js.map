{"version":3,"sources":["../../../src/commands/deployment/add.js"],"names":["sleep","time","Promise","resolve","setTimeout","name","target","repo","Repo","match","deployments","state","branches","getBranches","includes","isCommitted","Object","keys","Adapters","map","toTitleCase","options","getOptions","initialBranch","getCurrentBranch","branch","checkout","clear","add","commit"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;AAEA,MAAMA,KAAK,GAAGC,IAAI,IAAI,IAAIC,OAAJ,CAAaC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,IAAV,CAAlC,CAAtB;;kBAEe,OAAOI,IAAP,EAAaC,MAAb,KAAwB;AACnC,MAAIC,IAAI,GAAG,IAAIC,WAAJ,EAAX;AAEA,MAAG,CAACH,IAAI,CAACI,KAAL,CAAW,UAAX,CAAJ,EAA4B,OAAO,kBAAO,iEAAgEJ,IAAK,cAA5E,CAAP;;AAE5B,wBAAsC,MAAM,sBAA5C;AAAA,MAAI;AAAEK,IAAAA,WAAW,GAAI;AAAjB,GAAJ;AAAA,MAA4BC,KAA5B;;AACA,MAAGD,WAAW,CAACL,IAAD,CAAd,EAAsB,OAAO,kBAAO,eAAcA,IAAK;sCACrBA,IAAK;CADV,CAAP;AAItB,MAAIO,QAAQ,GAAG,MAAML,IAAI,CAACM,WAAL,EAArB;AAEA,MAAGD,QAAQ,CAACE,QAAT,CAAkBT,IAAlB,CAAH,EAA4B,OAAO,kBAAO,aAAYA,IAAK,iGAAxB,CAAP;;AAE5B,MAAG,EAAC,MAAME,IAAI,CAACQ,WAAL,EAAP,CAAH,EAA6B;AACzB,WAAO,kBAAM,8FAAN,CAAP;AACH;;AAEDT,EAAAA,MAAM,GAAGA,MAAM,IAAI,wBAAa,MAAM,mBAAO,wCAAP,EAAiDU,MAAM,CAACC,IAAP,CAAYC,kBAAZ,EAAsBC,GAAtB,CAA0BC,iBAA1B,CAAjD,CAAnB,CAAnB;AAEA,MAAIC,OAAO,GAAG,MAAMH,mBAASZ,MAAT,EAAiBgB,UAAjB,EAApB;AAEAZ,EAAAA,WAAW,CAACL,IAAD,CAAX,GAAoB;AAChBC,IAAAA,MADgB;AACRe,IAAAA;AADQ,GAApB;AAIA,QAAM,sDAAeV,KAAf;AAAsBD,IAAAA;AAAtB,KAAN;AAEA,MAAIa,aAAa,GAAG,MAAMhB,IAAI,CAACiB,gBAAL,EAA1B;AAEA,QAAMjB,IAAI,CAACkB,MAAL,CAAYpB,IAAZ,CAAN;AAEA,QAAME,IAAI,CAACmB,QAAL,CAAcrB,IAAd,CAAN;AAEA,QAAME,IAAI,CAACoB,KAAL,EAAN;AAEA,QAAM3B,KAAK,CAAC,KAAD,CAAX;AAEA,QAAMO,IAAI,CAACqB,GAAL,EAAN;AAEA,QAAMrB,IAAI,CAACsB,MAAL,EAAN;AAEA,QAAMtB,IAAI,CAACmB,QAAL,CAAcH,aAAd,CAAN;AAEA,oBAAO,eAAclB,IAAK,SAA1B;AACH,C","sourcesContent":["import { getState, print, prompt, saveState, Repo, exec } from \"../../utils\"\r\nimport { Adapters } from \"../../adapters\"\r\nimport { toTitleCase, toPascalCase } from \"@triframe/core\"\r\n\r\nconst sleep = time => new Promise( resolve => setTimeout(resolve, time))\r\n\r\nexport default async (name, target) => {\r\n    let repo = new Repo\r\n\r\n    if(!name.match(/^[a-z]+$/)) return print(`Deployment names must not have upper-case letters or spaces, '${name}' is invalid`)\r\n\r\n    let { deployments  = {}, ...state } = await getState()\r\n    if(deployments[name]) return print(`Deployment '${name}' already exists. If you would like to replace it, please remove it first:\r\n    npx triframe deployments remove ${name}\r\n`)\r\n\r\n    let branches = await repo.getBranches()\r\n\r\n    if(branches.includes(name)) return print(`A branch '${name}' already exists, please select another name for this deployment, or remove the existing branch`)\r\n\r\n    if(!await repo.isCommitted()){\r\n        return print('Your repo has uncommited changes; please commit before attempting to add a deployment target')\r\n    }\r\n\r\n    target = target || toPascalCase(await prompt('Please select a target for deployment:', Object.keys(Adapters).map(toTitleCase)))\r\n\r\n    let options = await Adapters[target].getOptions()\r\n\r\n    deployments[name] = {\r\n        target, options\r\n    }\r\n\r\n    await saveState({ ...state, deployments })\r\n\r\n    let initialBranch = await repo.getCurrentBranch()\r\n   \r\n    await repo.branch(name)\r\n\r\n    await repo.checkout(name)\r\n\r\n    await repo.clear()\r\n\r\n    await sleep(10000)\r\n\r\n    await repo.add()\r\n\r\n    await repo.commit()\r\n\r\n    await repo.checkout(initialBranch)\r\n\r\n    print(`Deployment '${name}' added`)\r\n}"],"file":"add.js"}