{"version":3,"sources":["../../../src/commands/start/__runner__.js"],"names":["path","require","fs","sourceMapSupport","dotenv","config","process","env","API_PORT","API_DEV_PORT","sources","maps","pipeFd","BUFFER","Buffer","alloc","DEFAULT_LOADER","extensions","readLength","fd","bytes","readSync","readUInt32BE","readFileFromPipeSync","length","result","newBytes","Math","min","concat","toString","babelWatchLoader","module_","filename","defaultHandler","send","event","source","map","JSON","parse","_compile","registerExtension","ext","split","sep","indexOf","exports","install","undefined","replaceExtensionHooks","i","on","options","transpileExtensions","environment","handleUncaughtExceptions","retrieveSourceMap","url","openSync","pipe","argv","args","runMain"],"mappings":"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","sourcesContent":["  'use strict';\r\n\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst sourceMapSupport = require('source-map-support');\r\nconst dotenv = require('dotenv');\r\ndotenv.config();\r\n\r\nprocess.env.API_PORT = process.env.API_DEV_PORT\r\n\r\nlet sources = {};\r\nlet maps = {};\r\n\r\nlet pipeFd;\r\nconst BUFFER = new Buffer.alloc(10 * 1024);\r\n\r\n// Node by default uses '.js' loader to load all the files with unknown extensions\r\nconst DEFAULT_LOADER = require.extensions['.js'];\r\n\r\nfunction readLength(fd) {\r\n  let bytes = 0;\r\n  while (typeof bytes === 'number' && bytes !== 4) {\r\n    bytes = fs.readSync(fd, BUFFER, 0, 4);\r\n  }\r\n  return BUFFER.readUInt32BE(0);\r\n}\r\n\r\nfunction readFileFromPipeSync(fd) {\r\n  let length = readLength(fd);\r\n  let result = new Buffer.alloc(0);\r\n  while (length > 0) {\r\n    const newBytes = fs.readSync(fd, BUFFER, 0, Math.min(BUFFER.length, length));\r\n    length -= newBytes;\r\n    result = Buffer.concat([result, BUFFER], result.length + newBytes);\r\n  }\r\n  return result.toString();\r\n}\r\n\r\nfunction babelWatchLoader(module_, filename, defaultHandler) {\r\n  // apparently require loader needs to be synchronous, which\r\n  // complicates things a little bit as we need to get source\r\n  // file from the parent process synchronously.\r\n  // The best method I've found so far is to use readFileSync on\r\n  // a named unix pipe (mkfifo). All the alternative ways would\r\n  // require writing native code which usually brings large\r\n  // dependencies to the project and I prefer to avoid that\r\n  process.send({\r\n    event: 'babel-watch-filename',\r\n    filename: filename,\r\n  });\r\n  const source = readFileFromPipeSync(pipeFd);\r\n  const map = readFileFromPipeSync(pipeFd);\r\n  if (source) {\r\n    maps[filename] = map && JSON.parse(map);\r\n    module_._compile(source, filename);\r\n  } else {\r\n    defaultHandler(module_, filename);\r\n  }\r\n}\r\n\r\nfunction registerExtension(ext) {\r\n  const defaultHandler = require.extensions[ext] || DEFAULT_LOADER;\r\n  require.extensions[ext] = (module_, filename) => {\r\n    // ignore node_modules by default. don't you dare contacting the parent process!\r\n    if (filename.split(path.sep).indexOf('node_modules') < 0) {\r\n      babelWatchLoader(module_, filename, defaultHandler);\r\n    } else {\r\n      defaultHandler(module_, filename);\r\n      if (filename.indexOf('/node_modules/source-map-support/') !== -1 && module_.exports.install !== undefined) {\r\n        // When app is running in babel-watch the source-map-support library should not be used by separately. The\r\n        // runner process is initializing source-map-support passing a special source map loader that makes it possible\r\n        // to use maps generated by the \"parent\" process instead of reading them from the filesystem.\r\n        // We don't allow for source-map-support library to be reinitialized\r\n        module_.exports.install = () => {};\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction replaceExtensionHooks(extensions) {\r\n  for (const ext in require.extensions) {\r\n    registerExtension(ext);\r\n  }\r\n  for (let i = 0; i < extensions.length; i++) {\r\n    const ext = extensions[i];\r\n    if (!(ext in require.extensions)) {\r\n      registerExtension(ext);\r\n    }\r\n  }\r\n}\r\n\r\nprocess.on('message', (options) => {\r\n  if (!options || options.event !== 'babel-watch-start') return;\r\n  replaceExtensionHooks(options.transpileExtensions);\r\n  sourceMapSupport.install({\r\n    environment: 'node',\r\n    handleUncaughtExceptions: !!options.handleUncaughtExceptions,\r\n    retrieveSourceMap(filename) {\r\n      const map = maps && maps[filename];\r\n      if (map) {\r\n        return {\r\n          url: filename,\r\n          map: map\r\n        };\r\n      }\r\n      return null;\r\n    },\r\n  });\r\n  // We don't allow for source-map-support library to be reinitialized (see comment in registerExtension function)\r\n  sourceMapSupport.install = () => {};\r\n\r\n  pipeFd = fs.openSync(options.pipe, 'r');\r\n  process.argv = [\"node\"].concat(options.args);\r\n  require('module').runMain();\r\n});"],"file":"__runner__.js"}