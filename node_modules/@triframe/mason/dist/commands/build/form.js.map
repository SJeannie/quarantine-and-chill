{"version":3,"sources":["../../../src/commands/build/form.js"],"names":["args","inputs","defaults","path","Name","instructions","Model","includes","split","model","toLowerCase","fields","reduce","part","index","Input","name","defaultValue","Number","isNaN","label","code","Object","keys","join","fs","writeFile"],"mappings":";;;;;;AAAA;;AACA;;kBAEe,OAAO,GAAGA,IAAV,KAAmB;AAC9B,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAI,CAAEC,IAAF,EAAQC,IAAR,EAAc,GAAGC,YAAjB,IAAiCL,IAArC;AACA,MAAIM,KAAK,GAAGF,IAAZ;AAEA,MAAGA,IAAI,CAACG,QAAL,CAAc,GAAd,CAAH,EACK,CAAED,KAAF,EAASF,IAAT,IAAkBA,IAAI,CAACI,KAAL,CAAW,GAAX,CAAnB;AAEJ,MAAIC,KAAK,GAAGH,KAAK,CAACI,WAAN,EAAZ;AACA,MAAIC,MAAM,GAAGN,YAAY,CAACO,MAAb,CAAqB,CAAED,MAAF,EAAUE,IAAV,EAAgBC,KAAhB,KAA2B;AACzD,QAAIC,KAAK,GAAG,WAAZ;AACA,QAAI,CAAEC,IAAF,EAAQC,YAAY,GAAG,EAAvB,IAA8BJ,IAAI,CAACL,KAAL,CAAW,GAAX,CAAlC;AAEA,QAAGQ,IAAI,CAACT,QAAL,CAAc,GAAd,CAAH,EACK,CAAEQ,KAAF,EAASC,IAAT,IAAkBA,IAAI,CAACR,KAAL,CAAW,GAAX,CAAnB;AAEJ,QAAGU,MAAM,CAACC,KAAP,CAAaF,YAAb,KAA8BA,YAAY,KAAK,EAAlD,EACIA,YAAY,GAAI,IAAGA,YAAa,GAAhC;AAEJhB,IAAAA,MAAM,CAACc,KAAD,CAAN,GAAgB,IAAhB;AACA,QAAIK,KAAK,GAAG,uBAAYJ,IAAZ,CAAZ;AACAd,IAAAA,QAAQ,GAAG,GAAEA,QAAS,aAAYc,IAAK,KAAIC,YAAa,GAAxD;AACAN,IAAAA,MAAM,GAAI,GAAEA,MAAO;GACxBI,KAAM;aACIK,KAAM;aACNX,KAAM,IAAGO,IAAK;gBACXA,IAAK;yBACIA,IAAK;UACpBP,KAAM,IAAGO,IAAK,MAAKA,IAAK;;;4CAGUA,IAAK;wBACzBA,IAAK;cAVrB;AAYA,WAAOL,MAAP;AACH,GA1BY,EA0BV,EA1BU,CAAb;AA2BA,MAAIU,IAAI,GAAG;yDAC0CC,MAAM,CAACC,IAAP,CAAYtB,MAAZ,EAAoBuB,IAApB,CAAyB,IAAzB,CAA+B;;eAEzE,wBAAapB,IAAb,CAAmB;;UAExBE,KAAM;;;;QAIRG,KAAM,gBAAeH,KAAM,KAAIJ,QAAS;;;0FAG0CO,KAAM;;;;;+BAKjEA,KAAM;;;;;;;;;;;SAW5B,uBAAYL,IAAZ,CAAkB;;;eAGZO,MAAO;;;;;;GA/BlB;;AAuCAc,YAAGC,SAAH,CAAc,KAAIvB,IAAK,KAAvB,EAA6BkB,IAA7B;AACH,C","sourcesContent":["import { toPascalCase, toTitleCase } from '@triframe/core'\r\nimport { fs } from '../../utils'\r\n\r\nexport default async (...args) => {\r\n    let inputs = {}\r\n    let defaults = ''\r\n    var [ path, Name, ...instructions] = args;\r\n    let Model = Name\r\n\r\n    if(Name.includes(':'))\r\n        ([ Model, Name ] = Name.split(':'))\r\n\r\n    let model = Model.toLowerCase()\r\n    let fields = instructions.reduce( ( fields, part, index ) => {\r\n        let Input = 'TextInput';\r\n        let [ name, defaultValue = '' ] = part.split('=')\r\n\r\n        if(name.includes(':'))\r\n            ([ Input, name ] = name.split(':'))\r\n\r\n        if(Number.isNaN(defaultValue) || defaultValue === \"\")\r\n            defaultValue = `\"${defaultValue}\"`\r\n\r\n        inputs[Input] = true\r\n        let label = toTitleCase(name)\r\n        defaults= `${defaults}\\n        ${name}: ${defaultValue},`\r\n        fields = `${fields}\r\n<${Input}\r\n    label=\"${label}\"\r\n    value={${model}.${name}}\r\n    onChange={${name} => {\r\n        hideErrorsFor('${name}')\r\n        ${model}.${name} = ${name} \r\n    }}\r\n/>\r\n<HelperText visible={shouldShowErrorsFor('${name}')} type=\"error\">\r\n    {errorMessageFor('${name}')}\r\n</HelperText>`\r\n        return fields\r\n    }, '')\r\n    var code= `import React from 'react'\r\nimport { tether, Container, Title, Button, HelperText, ${Object.keys(inputs).join(', ')} } from '@triframe/designer'\r\n\r\nexport const ${toPascalCase(Name)} = tether(function*({ models, props, useContext, useRouter, redirect }) {\r\n\r\nconst { ${Model} } = models\r\n\r\nconst global = yield { errorMessage: '' }\r\n\r\nconst ${model} = yield new ${Model}({${defaults}\r\n})\r\n\r\nconst { errorMessageFor, shouldShowErrorsFor, hideErrorsFor, showAllErrors, isValid } = ${model}.validation\r\n\r\nconst handleSubmit = () => {\r\nif(isValid){\r\ntry {\r\n    console.log('Submitted', ${model})\r\n} catch (err){\r\n    global.errorMessage = err.message\r\n}\r\n} else {\r\nshowAllErrors()\r\n}\r\n}\r\n\r\nreturn (\r\n<Container>\r\n<Title>${toTitleCase(Name)}</Title>\r\n<HelperText visible={global.errorMessage.length > 0} type=\"error\">\r\n    {global.errorMessage}\r\n</HelperText>${fields}\r\n<Button onPress={handleSubmit}>\r\n    Submit\r\n</Button>\r\n</Container>\r\n)\r\n})`\r\n\r\n    fs.writeFile(`./${path}.js`, code)\r\n}"],"file":"form.js"}