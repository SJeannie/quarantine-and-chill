{"version":3,"sources":["../../../src/commands/new/newNativeProject.js"],"names":["newNativeProject","name","progress","printOut","update","productionDependencies","join","developmentDependencies","packagePath","path","process","cwd","statePath","config","require","main","engines","version","slice","scripts","fs","writeFile","JSON","stringify","gitignorePath","gitignoreContent","readFile","STATE_STORAGE_PATH","assets","__dirname","mkdir","Promise","all","map","folder","source","destination","copy","stop"],"mappings":"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","sourcesContent":["import { fs, prompt, exec, path, print, printProgressBar, STATE_STORAGE_PATH } from '../../utils'\r\nimport { productionDependencies, developmentDependencies } from './dependencies'\r\n\r\nexport default async function newNativeProject(name) {\r\n    print('Starting...')\r\n    let progress = printProgressBar()\r\n  \r\n    await exec(`npx expo init \"${name}\" --template bare-minimum`, {\r\n        printOut: true\r\n    })\r\n    progress.update(50)\r\n    await exec(`cd \"${name}\" && npm install ${productionDependencies.join(' ')}`, {\r\n        printOut: true\r\n    })\r\n    await exec(`cd \"${name}\" && npm install ${developmentDependencies.join(' ')} --save-dev`, {\r\n        printOut: true\r\n    })\r\n    const packagePath = path.join(process.cwd(), name, 'package.json')\r\n    const statePath = path.join(process.cwd(), name, '.triframe')\r\n    const config = require(packagePath)\r\n    config.main = './registerApp.js'\r\n    config.engines = {\r\n        \"node\": process.version.slice(1)\r\n    }\r\n    config.scripts = {\r\n        \"start\": \"triframe start\"\r\n    }\r\n    await fs.writeFile(packagePath, JSON.stringify(config, null, 2))\r\n    await fs.writeFile(statePath, `{\"name\":\"${name}\",\"platform\":\"native\"}`)\r\n\r\n    const gitignorePath = path.join(process.cwd(), name, '.gitignore')\r\n    const gitignoreContent = await fs.readFile(gitignorePath)\r\n    await fs.writeFile(gitignorePath, `${gitignoreContent}\r\n.expo\r\nweb-build\r\ndist\r\n${STATE_STORAGE_PATH}\r\n.storage\r\n.env\r\n`)\r\n\r\n    progress.update(75)\r\n\r\n    const assets = path.join(__dirname, '..', '..', '..', '__assets__')\r\n\r\n    await fs.mkdir(path.join(process.cwd(), name, \"src\"))\r\n\r\n    await Promise.all([ 'App.js', 'Api.js', 'views', 'models'].map(async folder => {\r\n        let source = path.join(assets, folder)\r\n        let destination = path.join(process.cwd(), name, \"src\", folder)\r\n        await fs.copy(source, destination)\r\n    }))\r\n    await Promise.all(['registerApp.js', '.env'].map(async folder => {\r\n        let source = path.join(assets, folder)\r\n        let destination = path.join(process.cwd(), name, folder)\r\n        await fs.copy(source, destination)\r\n    }))\r\n    progress.update(100)\r\n    progress.stop()\r\n    print(`Project setup complete! Next Steps:\r\n        1. Open \"${name}\"\r\n        2. Configure your Postgres connection in the .env file\r\n        3. Run 'npm start'\r\n    `)\r\n}"],"file":"newNativeProject.js"}