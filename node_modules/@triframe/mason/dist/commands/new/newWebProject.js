"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = newWebProject;

var _utils = require("../../utils");

var _dependencies = require("./dependencies");

async function newWebProject(name) {
  (0, _utils.print)('Starting...');
  let progress = (0, _utils.printProgressBar)();
  await (0, _utils.exec)(`npx create-react-app "${name}"`, {
    printOut: true
  });
  progress.update(50);
  await (0, _utils.exec)(`cd "${name}" && npm install ${_dependencies.productionDependencies.join(' ')}`, {
    printOut: true
  });
  await (0, _utils.exec)(`cd "${name}" && npm install ${_dependencies.developmentDependencies.join(' ')} --save-dev`, {
    printOut: true
  });

  const packagePath = _utils.path.join(process.cwd(), name, 'package.json');

  const statePath = _utils.path.join(process.cwd(), name, '.triframe');

  const config = require(packagePath);

  config.engines = {
    "node": process.version.slice(1)
  };
  config.scripts = {
    "start": "triframe start"
  };
  await _utils.fs.writeFile(packagePath, JSON.stringify(config, null, 2));
  await _utils.fs.writeFile(statePath, `{"name":"${name}","platform":"web"}`);

  const gitignorePath = _utils.path.join(process.cwd(), name, '.gitignore');

  const gitignoreContent = await _utils.fs.readFile(gitignorePath);
  await _utils.fs.writeFile(gitignorePath, `${gitignoreContent}
dist
build
${_utils.STATE_STORAGE_PATH}
.storage
.env
`);

  const assets = _utils.path.join(__dirname, '..', '..', '..', '__assets__');

  progress.update(75);

  const srcPath = _utils.path.join(process.cwd(), name, "src");

  await _utils.fs.rmdir(srcPath);
  await _utils.fs.mkdir(srcPath);
  await Promise.all(['App.js', 'Api.js', 'views', 'models', 'index.js'].map(async folder => {
    let source = _utils.path.join(assets, folder);

    let destination = _utils.path.join(process.cwd(), name, "src", folder);

    await _utils.fs.copy(source, destination);
  }));
  await Promise.all(['index.html'].map(async folder => {
    let source = _utils.path.join(assets, folder);

    let destination = _utils.path.join(process.cwd(), name, "public", folder);

    await _utils.fs.copy(source, destination);
  }));
  await Promise.all(['.env'].map(async folder => {
    let source = _utils.path.join(assets, folder);

    let destination = _utils.path.join(process.cwd(), name, folder);

    await _utils.fs.copy(source, destination);
  }));
  progress.update(100);
  progress.stop();
  (0, _utils.print)(`Project setup complete! Next Steps:
        1. Open "${name}"
        2. Configure your Postgres connection in the .env file
        3. Run 'npm start'
    `);
}