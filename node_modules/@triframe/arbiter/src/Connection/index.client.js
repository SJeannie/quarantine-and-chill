import { Client } from './ws'
import { ConnectionBase } from './Base'

let sleep = time => new Promise(resolve => setTimeout(resolve, time))

export class Connection extends ConnectionBase {

    constructor(ws){
        super()
        this.bind(ws)
        const { storage } = this
        ws.addEventListener('open', () => {
            ws.send('initialize')
        })
        ws.addEventListener('reconnect', ({ number }) => {
            ws.send(`mount ${this.id}`)
        })
        this.on('__id__', id => this.id = id)
        this.on('__reload__', () => window.location.reload())
        // TODO: Fix this for native using an abstracted storage handler and asynchrony
        this.on('__load_session__', async (_, respond) => {
            let item = await storage.getItem('session')
            respond(item)
        })
        this.on('__save_session__', (session) => storage.setItem('session', session))
        this.startPinging()
    }

    async startPinging(){
        while(true){
            await sleep(5000)
            this.emit('__ping__')
        }
    }

    static establish(httpUrl){
        const parsed = new URL(httpUrl)
        const { protocol: httpProtocol, host, pathname, port } = parsed 
        const wsProtocol = httpProtocol === 'https:' ? 'wss:' : 'ws:';
        const ws = new Client(`${wsProtocol}//${host}${pathname}`)
        return new Connection(ws)
    }

}