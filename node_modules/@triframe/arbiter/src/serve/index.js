import express from 'express'
import { Server } from 'http'
import { Connection } from '../Connection'
import { serialize } from '../serialize'

import { jsonParserMiddleware, urlEncodedParserMiddleware, corsMiddleware, httpRedirectMiddleware, formFileParsingMiddleware, staticFileMiddleware } from './middleware'

import { initializeDatabase, initializeServer } from './initializers'

import { cdnHandler, cdnUploadHandler } from './fs-storage'
import { socketHandler, frontendHandler } from './handlers'
import { requireDir } from './requireDir'

let defaultPort = process.env.API_PORT

// In production ONLY, accept the PORT env variable to accomodate heroku
// Cannot use PORT in a development environment as this conflicts with the environment variable used by create-react-app to run the frontend
if(process.env.NODE_ENV === 'production' && process.env.PORT) defaultPort = process.env.PORT

const defaultConfig = {
    
    port: defaultPort,
    databaseUrl: process.env.DATABASE_URL,
    session: {},
    routes: () => null,

    initializeDatabase, initializeServer,

    jsonParserMiddleware, urlEncodedParserMiddleware, corsMiddleware, httpRedirectMiddleware, formFileParsingMiddleware, staticFileMiddleware,
    
    cdnHandler, cdnUploadHandler, socketHandler, frontendHandler,

    require: function(variableName){
        if(this[variableName] === undefined) throw Error(`Could not find required config variable '${variableName}'`)
        else  return this[variableName]
    }

}

export const serve = async (models = {}, configOptions = {}) => {
    let config = { ...defaultConfig, ...configOptions }
    let { port, databaseUrl, session, routes, initializeDatabase, initializeServer, httpRedirectMiddleware, urlEncodedParserMiddleware, jsonParserMiddleware, corsMiddleware, formFileParsingMiddleware, staticFileMiddleware, cdnHandler, cdnUploadHandler, frontendHandler, socketHandler } = config

    if(typeof models == 'string') models = requireDir(models)

    let router = express()
    let server = Server(router)
    let schema = serialize(models)

    if(databaseUrl) await initializeDatabase(databaseUrl)

    await initializeServer(server, port)

    let middleware = [httpRedirectMiddleware, urlEncodedParserMiddleware, jsonParserMiddleware, corsMiddleware, formFileParsingMiddleware, staticFileMiddleware]
        .filter( middleware => !!middleware ).map(middleware => middleware.bind(config) )
    
    router.use(...middleware)

    routes(router)

    router.get('/cdn/*', cdnHandler)
    router.post('/upload', cdnUploadHandler)
    router.get('/*', frontendHandler)

    Connection.listen(server, session, socket => socketHandler(socket, schema))

    console.log(`Listening on ${port}`)
}