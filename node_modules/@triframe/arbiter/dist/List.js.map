{"version":3,"sources":["../src/List.js"],"names":["List","Array","constructor","elements","Object","defineProperty","enumerable","value","EventEmitter","on","args","emit","push","length","patches","map","element","op","path","createObservable","observe","_splice","splice","index","deleted","origin","Math","min","replacementPatches","i","removedPatches","additionPatches","insert","patch","replace","map$","callback","forEach","remove","start","end","resource","agent","monitor","node","key","get","set","newValue","crawl","primativeTypes","isPlain","includes","name","obj"],"mappings":"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","sourcesContent":["import { EventEmitter, each } from \"triframe/core\"\r\n\r\nexport class List extends Array {\r\n\r\n    constructor(...elements) {\r\n        super(...elements)\r\n        Object.defineProperty(this, '[[patches]]', {\r\n            enumerable: false,\r\n            value: []\r\n        })\r\n        Object.defineProperty(this, '[[events]]', {\r\n            enumerable: false,\r\n            value: new EventEmitter\r\n        })\r\n    }\r\n\r\n    on(...args) {\r\n        return this['[[events]]'].on(...args)\r\n    }\r\n\r\n    emit(...args) {\r\n        return this['[[events]]'].emit(...args)\r\n    }\r\n\r\n    push(...elements) {\r\n        let length = this.length\r\n        let patches = elements.map(element => ({\r\n            op: 'add',\r\n            path: `/${length++}`,\r\n            value: element\r\n        }))\r\n        createObservable(elements).observe( () => this.emit('Δ.change', []))\r\n        this[\"[[patches]]\"].push(...patches)\r\n        this.emit('Δ.change', patches)\r\n        super.push(...elements)\r\n    }\r\n\r\n    _splice(...args){\r\n        return super.splice(...args)\r\n    }\r\n\r\n    splice(index, deleted, ...elements) {\r\n        super.splice(index, deleted, ...elements)\r\n        \r\n        let origin = Math.min(deleted + index, elements.length + index)\r\n    \r\n        let replacementPatches = []\r\n        for(let i = index; i < origin; i++) replacementPatches.push({\r\n            op: 'replace',\r\n            path: `/${i}`,\r\n            value: elements[i - index]\r\n        })\r\n\r\n        let removedPatches = []\r\n        for(let i = origin; i < index + deleted; i++) removedPatches.push({\r\n            op: 'remove',\r\n            path: `/${i}`,\r\n        })\r\n\r\n        let additionPatches = []\r\n        for(let i = origin; i < index + elements.length; i++) removedPatches.push({\r\n            op: 'add',\r\n            path: `/${i}`,\r\n            value: elements[i - index]\r\n        })\r\n\r\n        let patches = [ ...replacementPatches, ...removedPatches, ...additionPatches ]\r\n\r\n        this[\"[[patches]]\"].push(...patches)\r\n        this.emit('Δ.change', patches)\r\n    }\r\n\r\n    insert(element, index) {\r\n        super.splice(index, 0, element)\r\n        let patch = {\r\n            op: 'add',\r\n            path: `/${index}`,\r\n            value: element\r\n        }\r\n        this[\"[[patches]]\"].push(patch)\r\n        this.emit('Δ.change', [patch])\r\n    }\r\n\r\n\r\n    replace(index, value) {\r\n        this[index] = value\r\n        let patch = {\r\n            op: 'replace',\r\n            path: `/${index}`,\r\n            value\r\n        }\r\n        this[\"[[patches]]\"].push(patch)\r\n        this.emit('Δ.change', [patch])\r\n    }\r\n\r\n\r\n    map$(callback) {\r\n        let patches = []\r\n        this.forEach((element, index) => {\r\n            let value = callback(element, index)\r\n            if (value != element) {\r\n                this[index] = value\r\n                let patch = {\r\n                    op: 'replace',\r\n                    path: `/${index}`,\r\n                    value\r\n                }\r\n                patches.push(patch)\r\n            }\r\n        })\r\n        this[\"[[patches]]\"].push(...patches)\r\n        this.emit('Δ.change', patches)\r\n    }\r\n\r\n\r\n    remove(start, end = null) {\r\n        if (end == null) end = start\r\n        super.splice(start, 1 + end - start)\r\n        let patches = []\r\n        for (let index = start; index <= end; index++) {\r\n            patches.push({\r\n                op: 'remove',\r\n                path: `/${start}`\r\n            })\r\n        }\r\n        this[\"[[patches]]\"].push(...patches)\r\n        this.emit('Δ.change', patches)\r\n    }\r\n}\r\n\r\nlet createObservable = resource => {\r\n    const agent = new EventEmitter;\r\n    const monitor = node => {\r\n        if(typeof node.on === 'function') node.on('Δ.change', () => agent.emit(`change`) )\r\n        else each(node, (key, value) => {\r\n            Object.defineProperty(node, key, {\r\n                    enumerable: true,\r\n                    get: () => value,\r\n                    set: newValue => {\r\n                        value = newValue\r\n                        agent.emit(`change`)\r\n                    }\r\n                })\r\n        })\r\n    }\r\n    crawl(resource, monitor)\r\n    return agent.on('change')\r\n}\r\nconst primativeTypes = ['String', 'Boolean', 'Number', 'Date', 'Function']\r\nconst isPlain = value => value && typeof value === 'object' && !primativeTypes.includes(value.constructor.name)\r\nconst crawl = (obj, callback) => {\r\n    if (isPlain(obj)) {\r\n        callback(obj)\r\n        for (let key in obj) {\r\n            let value = obj[key]\r\n            crawl(value, callback)\r\n        }\r\n    }\r\n}"],"file":"List.js"}