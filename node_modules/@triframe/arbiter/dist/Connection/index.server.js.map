{"version":3,"sources":["../../src/Connection/index.server.js"],"names":["id","connections","store","connection","unstore","Connection","ConnectionBase","constructor","ws","bind","emit","clientSecret","addEventListener","clearInterval","clearReceiptsTimer","session","sessionHead","createSlice","listen","server","sessionModel","callback","Session","wss","Server","on","establishClientSecret","establishConnection","headers","request","cookie","parse","createSecret","push","serialize","data","target","strategy","identifier","split","removeEventListener","loadFor","send","result","characters","charactersLength","length","i","charAt","Math","floor","random"],"mappings":"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","sourcesContent":["import { Server } from './ws'\r\nimport cookie from 'cookie'\r\nimport { ConnectionBase } from './Base'\r\nimport { createSession } from './createSession'\r\n\r\nlet id = 0\r\nconst connections = {}\r\nconst store = (connection) => {\r\n    connections[++id] = connection\r\n    return id\r\n}\r\nconst unstore = (id) => {\r\n    delete connections[id]\r\n}\r\n\r\n\r\nexport class Connection extends ConnectionBase {\r\n    \r\n    constructor(ws){\r\n        super()\r\n        let id = store(this)\r\n        this.id = id\r\n        this.bind(ws)        \r\n        this.emit('__id__', id)\r\n        this.clientSecret = ws.clientSecret\r\n        ws.addEventListener('close', () => {\r\n            clearInterval(this.clearReceiptsTimer)\r\n            //unstore(id)\r\n        })\r\n    }\r\n\r\n    get session(){\r\n        return this.sessionHead ? this.sessionHead.createSlice() : null\r\n    }\r\n    \r\n    static listen(server, sessionModel, callback){\r\n\r\n        const Session = createSession(sessionModel)\r\n\r\n        const wss = new Server({ server });\r\n\r\n        wss.on('headers', establishClientSecret)\r\n       \r\n        wss.on('connection', ws => {\r\n            ws.addEventListener('message', establishConnection)\r\n        })\r\n\r\n        function establishClientSecret(headers, request, ws){\r\n            let { clientSecret } = cookie.parse(request.headers.cookie || '')\r\n            if(!clientSecret){\r\n                clientSecret = createSecret()\r\n                headers.push( `Set-Cookie: ${cookie.serialize('clientSecret', clientSecret)}`)\r\n            }\r\n            ws.clientSecret = clientSecret\r\n        }\r\n\r\n        async function establishConnection({ data, target }){\r\n            const [ strategy, identifier ] = data.split(' ')\r\n            switch(strategy){\r\n                case 'initialize':\r\n                    target.removeEventListener('message', establishConnection)\r\n                    let connection = new Connection(target)\r\n                    connection.sessionHead = await Session.loadFor(connection)\r\n                    callback(connection)\r\n                break;\r\n                case 'mount':\r\n                    target.removeEventListener('message', establishConnection)\r\n                    if(connections[identifier])\r\n                        connections[identifier].bind(target)\r\n                    else\r\n                        target.send('[\"__reload__\"]')\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nfunction createSecret(){\r\n    var result = '';\r\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < 40; i++) {\r\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n}"],"file":"index.server.js"}