"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Connection = undefined;

var _ws = require("./ws");

var _Base = require("./Base");

let sleep = time => new Promise(resolve => setTimeout(resolve, time));

class Connection extends _Base.ConnectionBase {
  constructor(ws) {
    super();
    this.bind(ws);
    ws.addEventListener('open', () => {
      ws.send('initialize');
    });
    ws.addEventListener('reconnect', ({
      number
    }) => {
      ws.send(`mount ${this.id}`);
    });
    this.on('__id__', id => this.id = id);
    this.on('__reload__', () => window.location.reload()); // TODO: Fix this for native using an abstracted storage handler and asynchrony

    this.on('__load_session__', async (_, respond) => {
      let item = await this.storage.getItem('session');
      respond(item);
    });
    this.on('__save_session__', session => this.storage.setItem('session', session));
    this.startPinging();
  }

  async startPinging() {
    while (true) {
      await sleep(5000);
      this.emit('__ping__');
    }
  }

  static establish(httpUrl) {
    const parsed = new URL(httpUrl);
    const {
      protocol: httpProtocol,
      host,
      pathname,
      port
    } = parsed;
    const wsProtocol = httpProtocol === 'https:' ? 'wss:' : 'ws:';
    const ws = new _ws.Client(`${wsProtocol}//${host}${pathname}`);
    return new Connection(ws);
  }

}

exports.Connection = Connection;
//# sourceMappingURL=index.client.js.map