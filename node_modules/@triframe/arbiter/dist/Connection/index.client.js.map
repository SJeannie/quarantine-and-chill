{"version":3,"sources":["../../src/Connection/index.client.js"],"names":["sleep","time","Promise","resolve","setTimeout","Connection","ConnectionBase","constructor","ws","bind","addEventListener","send","number","id","on","window","location","reload","_","respond","item","storage","getItem","session","setItem","startPinging","emit","establish","httpUrl","parsed","URL","protocol","httpProtocol","host","pathname","port","wsProtocol","Client"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,IAAIA,KAAK,GAAGC,IAAI,IAAI,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,IAAV,CAAjC,CAApB;;AAEO,MAAMI,UAAN,SAAyBC,oBAAzB,CAAwC;AAE3CC,EAAAA,WAAW,CAACC,EAAD,EAAI;AACX;AACA,SAAKC,IAAL,CAAUD,EAAV;AACAA,IAAAA,EAAE,CAACE,gBAAH,CAAoB,MAApB,EAA4B,MAAM;AAC9BF,MAAAA,EAAE,CAACG,IAAH,CAAQ,YAAR;AACH,KAFD;AAGAH,IAAAA,EAAE,CAACE,gBAAH,CAAoB,WAApB,EAAiC,CAAC;AAAEE,MAAAA;AAAF,KAAD,KAAgB;AAC7CJ,MAAAA,EAAE,CAACG,IAAH,CAAS,SAAQ,KAAKE,EAAG,EAAzB;AACH,KAFD;AAGA,SAAKC,EAAL,CAAQ,QAAR,EAAkBD,EAAE,IAAI,KAAKA,EAAL,GAAUA,EAAlC;AACA,SAAKC,EAAL,CAAQ,YAAR,EAAsB,MAAMC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAA5B,EAVW,CAWX;;AACA,SAAKH,EAAL,CAAQ,kBAAR,EAA4B,OAAOI,CAAP,EAAUC,OAAV,KAAsB;AAC9C,UAAIC,IAAI,GAAG,MAAM,KAAKC,OAAL,CAAaC,OAAb,CAAqB,SAArB,CAAjB;AACAH,MAAAA,OAAO,CAACC,IAAD,CAAP;AACH,KAHD;AAIA,SAAKN,EAAL,CAAQ,kBAAR,EAA6BS,OAAD,IAAa,KAAKF,OAAL,CAAaG,OAAb,CAAqB,SAArB,EAAgCD,OAAhC,CAAzC;AACA,SAAKE,YAAL;AACH;;AAED,QAAMA,YAAN,GAAoB;AAChB,WAAM,IAAN,EAAW;AACP,YAAMzB,KAAK,CAAC,IAAD,CAAX;AACA,WAAK0B,IAAL,CAAU,UAAV;AACH;AACJ;;AAED,SAAOC,SAAP,CAAiBC,OAAjB,EAAyB;AACrB,UAAMC,MAAM,GAAG,IAAIC,GAAJ,CAAQF,OAAR,CAAf;AACA,UAAM;AAAEG,MAAAA,QAAQ,EAAEC,YAAZ;AAA0BC,MAAAA,IAA1B;AAAgCC,MAAAA,QAAhC;AAA0CC,MAAAA;AAA1C,QAAmDN,MAAzD;AACA,UAAMO,UAAU,GAAGJ,YAAY,KAAK,QAAjB,GAA4B,MAA5B,GAAqC,KAAxD;AACA,UAAMxB,EAAE,GAAG,IAAI6B,UAAJ,CAAY,GAAED,UAAW,KAAIH,IAAK,GAAEC,QAAS,EAA7C,CAAX;AACA,WAAO,IAAI7B,UAAJ,CAAeG,EAAf,CAAP;AACH;;AAnC0C;;QAAlCH,U,GAAAA,U","sourcesContent":["import { Client } from './ws'\r\nimport { ConnectionBase } from './Base'\r\n\r\nlet sleep = time => new Promise(resolve => setTimeout(resolve, time))\r\n\r\nexport class Connection extends ConnectionBase {\r\n\r\n    constructor(ws){\r\n        super()\r\n        this.bind(ws)\r\n        ws.addEventListener('open', () => {\r\n            ws.send('initialize')\r\n        })\r\n        ws.addEventListener('reconnect', ({ number }) => {\r\n            ws.send(`mount ${this.id}`)\r\n        })\r\n        this.on('__id__', id => this.id = id)\r\n        this.on('__reload__', () => window.location.reload())\r\n        // TODO: Fix this for native using an abstracted storage handler and asynchrony\r\n        this.on('__load_session__', async (_, respond) => {\r\n            let item = await this.storage.getItem('session')\r\n            respond(item)\r\n        })\r\n        this.on('__save_session__', (session) => this.storage.setItem('session', session))\r\n        this.startPinging()\r\n    }\r\n\r\n    async startPinging(){\r\n        while(true){\r\n            await sleep(5000)\r\n            this.emit('__ping__')\r\n        }\r\n    }\r\n\r\n    static establish(httpUrl){\r\n        const parsed = new URL(httpUrl)\r\n        const { protocol: httpProtocol, host, pathname, port } = parsed \r\n        const wsProtocol = httpProtocol === 'https:' ? 'wss:' : 'ws:';\r\n        const ws = new Client(`${wsProtocol}//${host}${pathname}`)\r\n        return new Connection(ws)\r\n    }\r\n\r\n}"],"file":"index.client.js"}