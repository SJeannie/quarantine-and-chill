{"version":3,"sources":["../../../src/Connection/ws/limiter.js"],"names":["kDone","Symbol","kRun","Limiter","constructor","concurrency","pending","Infinity","jobs","add","job","push","length","shift"],"mappings":"AAAA;;;;;AAEA,MAAMA,KAAK,GAAGC,MAAM,CAAC,OAAD,CAApB;AACA,MAAMC,IAAI,GAAGD,MAAM,CAAC,MAAD,CAAnB;AAEA;;;;;AAIA,MAAME,OAAN,CAAc;AACZ;;;;;;AAMAC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACvB,SAAKL,KAAL,IAAc,MAAM;AAClB,WAAKM,OAAL;AACA,WAAKJ,IAAL;AACD,KAHD;;AAIA,SAAKG,WAAL,GAAmBA,WAAW,IAAIE,QAAlC;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKF,OAAL,GAAe,CAAf;AACD;AAED;;;;;;;AAKAG,EAAAA,GAAG,CAACC,GAAD,EAAM;AACP,SAAKF,IAAL,CAAUG,IAAV,CAAeD,GAAf;AACA,SAAKR,IAAL;AACD;AAED;;;;;;;AAKA,GAACA,IAAD,IAAS;AACP,QAAI,KAAKI,OAAL,KAAiB,KAAKD,WAA1B,EAAuC;;AAEvC,QAAI,KAAKG,IAAL,CAAUI,MAAd,EAAsB;AACpB,YAAMF,GAAG,GAAG,KAAKF,IAAL,CAAUK,KAAV,EAAZ;AAEA,WAAKP,OAAL;AACAI,MAAAA,GAAG,CAAC,KAAKV,KAAL,CAAD,CAAH;AACD;AACF;;AAzCW;;kBA4CCG,O","sourcesContent":["'use strict';\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} concurrency The maximum number of jobs allowed to run\n   *     concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nexport default Limiter;\n"],"file":"limiter.js"}