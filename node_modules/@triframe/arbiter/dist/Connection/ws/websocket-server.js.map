{"version":3,"sources":["../../../src/Connection/ws/websocket-server.js"],"names":["EventEmitter","require","createHash","createServer","STATUS_CODES","PerMessageDeflate","default","WebSocket","format","parse","GUID","keyRegex","kUsedByWebSocketServer","Symbol","WebSocketServer","constructor","options","callback","maxPayload","perMessageDeflate","handleProtocols","clientTracking","verifyClient","noServer","backlog","server","host","path","port","TypeError","_server","req","res","body","writeHead","length","end","listen","Error","_removeListeners","addListeners","listening","emit","bind","error","upgrade","socket","head","handleUpgrade","ws","clients","Set","address","close","cb","once","client","terminate","process","nextTick","emitClose","shouldHandle","index","url","indexOf","pathname","slice","on","socketOnError","key","headers","undefined","trim","version","extensions","method","toLowerCase","test","abortHandshake","offers","extensionName","accept","err","info","origin","secure","connection","authorized","encrypted","verified","code","message","completeUpgrade","readable","writable","destroy","digest","update","protocol","split","push","params","value","_extensions","write","concat","join","removeListener","setSocket","handshake","add","delete","map","event","Object","keys","removeListeners","Connection","Buffer","byteLength","h"],"mappings":"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","sourcesContent":["'use strict';\n\nconst EventEmitter = require('events')\nconst { createHash } = require('crypto')\nconst { createServer, STATUS_CODES } = require('http')\n\nconst PerMessageDeflate = require('./permessage-deflate').default\nconst WebSocket = require('./websocket').default\nconst { format, parse } = require('./extension').default\nconst { GUID } = require('./constants').default\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\nconst kUsedByWebSocketServer = Symbol('kUsedByWebSocketServer');\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} options.backlog The maximum length of the queue of pending\n   *     connections\n   * @param {Boolean} options.clientTracking Specifies whether or not to track\n   *     clients\n   * @param {Function} options.handleProtocols A hook to handle protocols\n   * @param {String} options.host The hostname where to bind the server\n   * @param {Number} options.maxPayload The maximum allowed message size\n   * @param {Boolean} options.noServer Enable no server mode\n   * @param {String} options.path Accept only connections matching this path\n   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable\n   *     permessage-deflate\n   * @param {Number} options.port The port where to bind the server\n   * @param {http.Server} options.server A pre-created HTTP/S server to use\n   * @param {Function} options.verifyClient A hook to reject connections\n   * @param {Function} callback A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      maxPayload: 100 * 1024 * 1024,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      ...options\n    };\n\n    if (options.port == null && !options.server && !options.noServer) {\n      throw new TypeError(\n        'One of the \"port\", \"server\", or \"noServer\" options must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = createServer((req, res) => {\n        const body = STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      if (options.server[kUsedByWebSocketServer]) {\n        throw new Error(\n          'The HTTP/S server is already being used by another WebSocket server'\n        );\n      }\n\n      options.server[kUsedByWebSocketServer] = true;\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, (ws) => {\n            this.emit('connection', ws, req);\n          });\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) this.clients = new Set();\n    this.options = options;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Close the server.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */\n  close(cb) {\n    if (cb) this.once('close', cb);\n\n    //\n    // Terminate all associated clients.\n    //\n    if (this.clients) {\n      for (const client of this.clients) client.terminate();\n    }\n\n    const server = this._server;\n\n    if (server) {\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // Close the http server if it was internally created.\n      //\n      if (this.options.port != null) {\n        server.close(() => this.emit('close'));\n        return;\n      }\n\n      delete server[kUsedByWebSocketServer];\n    }\n\n    process.nextTick(emitClose, this);\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key =\n      req.headers['sec-websocket-key'] !== undefined\n        ? req.headers['sec-websocket-key'].trim()\n        : false;\n    const version = +req.headers['sec-websocket-version'];\n    const extensions = {};\n\n    if (\n      req.method !== 'GET' ||\n      req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !key ||\n      !keyRegex.test(key) ||\n      (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortHandshake(socket, 400);\n    }\n\n    if (this.options.perMessageDeflate) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = parse(req.headers['sec-websocket-extensions']);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.connection.authorized || req.connection.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(key, extensions, req, socket, head, cb);\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(key, extensions, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Object} extensions The accepted extensions\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @private\n   */\n  completeUpgrade(key, extensions, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new WebSocket(null);\n    let protocol = req.headers['sec-websocket-protocol'];\n\n    if (protocol) {\n      protocol = protocol.trim().split(/ *, */);\n\n      //\n      // Optionally call external protocol selection handler.\n      //\n      if (this.options.handleProtocols) {\n        protocol = this.options.handleProtocols(protocol, req);\n      } else {\n        protocol = protocol[0];\n      }\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws.protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req, ws);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, this.options.maxPayload);\n    ws.handshake = req\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => this.clients.delete(ws));\n    }\n\n    cb(ws);\n  }\n}\n\nexport default WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server.emit('close');\n}\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {net.Socket} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || STATUS_CODES[code];\n    headers = {\n      Connection: 'close',\n      'Content-Type': 'text/html',\n      'Content-Length': Buffer.byteLength(message),\n      ...headers\n    };\n\n    socket.write(\n      `HTTP/1.1 ${code} ${STATUS_CODES[code]}\\r\\n` +\n        Object.keys(headers)\n          .map((h) => `${h}: ${headers[h]}`)\n          .join('\\r\\n') +\n        '\\r\\n\\r\\n' +\n        message\n    );\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n"],"file":"websocket-server.js"}