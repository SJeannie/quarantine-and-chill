"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connect = undefined;

var _Connection = require("./Connection");

var _unserializer = require("./unserializer");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const connect = exports.connect = (url = "/", {
  storage = null
} = {}) => {
  if (url === "/") {
    if (typeof window !== 'undefined') {
      url = window.location.href;
    } else {
      throw Error('No valid URL provided to connect in Non-Browser Environment');
    }
  }

  return new Promise(resolve => {
    const io = _Connection.Connection.establish(url);

    if (storage !== null) io.mountStorage(storage);
    const unserialize = (0, _unserializer.createUnserializer)(io);
    io.on('install', apiSchema => {
      const api = unserialize(apiSchema);
      resolve(_objectSpread(_objectSpread({}, api), {}, {
        url
      }));
    });
  });
};
//# sourceMappingURL=connect.js.map