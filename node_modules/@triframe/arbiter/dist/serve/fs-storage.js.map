{"version":3,"sources":["../../src/serve/fs-storage.js"],"names":["UPLOADS_PATH","cdnHandler","req","res","path","url","replace","extension","split","pop","stat","fs","statSync","mimeType","mime","getType","writeHead","size","readStream","createReadStream","pipe","cdnUploadHandler","urls","files","forEach","file","name","filepath","createToken","push","existsSync","mkdirSync","end","JSON","stringify","result","characters","charactersLength","length","i","charAt","Math","floor","random"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,YAAY,GAAI,YAAtB;;AAEO,MAAMC,UAAU,WAAVA,UAAU,GAAG,UAASC,GAAT,EAAcC,GAAd,EAAkB;AACxC,QAAMC,IAAI,GAAGF,GAAG,CAACG,GAAJ,CAAQC,OAAR,CAAgB,MAAhB,EAAyB,GAAEN,YAAa,GAAxC,CAAb;AACA,QAAMO,SAAS,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,GAAhB,EAAlB;;AACA,QAAMC,IAAI,GAAGC,aAAGC,QAAH,CAAYR,IAAZ,CAAb;;AACA,QAAMS,QAAQ,GAAGC,eAAKC,OAAL,CAAaR,SAAb,CAAjB;;AACAJ,EAAAA,GAAG,CAACa,SAAJ,CAAc,GAAd,EAAmB;AACf,oBAAgBH,QADD;AAEf,sBAAkBH,IAAI,CAACO;AAFR,GAAnB;;AAIA,QAAMC,UAAU,GAAGP,aAAGQ,gBAAH,CAAoBf,IAApB,CAAnB;;AACAc,EAAAA,UAAU,CAACE,IAAX,CAAgBjB,GAAhB;AACH,CAXM;;AAaA,MAAMkB,gBAAgB,WAAhBA,gBAAgB,GAAG,UAASnB,GAAT,EAAcC,GAAd,EAAkB;AAC9C,QAAMmB,IAAI,GAAG,EAAb;AACApB,EAAAA,GAAG,CAACqB,KAAJ,CAAUC,OAAV,CAAkBC,IAAI,IAAI;AACtB,UAAMlB,SAAS,GAAGkB,IAAI,CAACC,IAAL,CAAUlB,KAAV,CAAgB,GAAhB,EAAqBC,GAArB,EAAlB;AACA,UAAMkB,QAAQ,GAAI,GAAEC,WAAW,EAAG,IAAGrB,SAAU,EAA/C;AACAe,IAAAA,IAAI,CAACO,IAAL,CAAW,QAAOF,QAAS,EAA3B;;AACA,QAAI,CAAChB,aAAGmB,UAAH,CAAc9B,YAAd,CAAL,EAAkC;AAC9BW,mBAAGoB,SAAH,CAAa/B,YAAb;AACH;;AACD,uBAAIyB,IAAI,CAACrB,IAAT,EAAgB,GAAEJ,YAAa,IAAG2B,QAAS,EAA3C;AACH,GARD;AASAxB,EAAAA,GAAG,CAAC6B,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAeZ,IAAf,CAAR;AACH,CAZM;;AAcP,MAAMM,WAAW,GAAG,MAAM;AACtB,MAAIO,MAAM,GAAG,EAAb;AACA,MAAIC,UAAU,GAAG,gEAAjB;AACA,MAAIC,gBAAgB,GAAGD,UAAU,CAACE,MAAlC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBJ,IAAAA,MAAM,IAAIC,UAAU,CAACI,MAAX,CAAkBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,gBAA3B,CAAlB,CAAV;AACH;;AACD,SAAOF,MAAP;AACH,CARD","sourcesContent":["import fs from 'fs'\r\nimport mime from 'mime';\r\nimport ncp from 'ncp'\r\n\r\nconst UPLOADS_PATH = `./.storage`\r\n\r\nexport const cdnHandler = function(req, res){\r\n    const path = req.url.replace('/cdn', `${UPLOADS_PATH}/`)\r\n    const extension = path.split('.').pop()\r\n    const stat = fs.statSync(path);\r\n    const mimeType = mime.getType(extension);\r\n    res.writeHead(200, {\r\n        'Content-Type': mimeType,\r\n        'Content-Length': stat.size\r\n    });\r\n    const readStream = fs.createReadStream(path);\r\n    readStream.pipe(res);\r\n}\r\n\r\nexport const cdnUploadHandler = function(req, res){\r\n    const urls = []\r\n    req.files.forEach(file => {\r\n        const extension = file.name.split('.').pop()\r\n        const filepath = `${createToken()}.${extension}`\r\n        urls.push(`/cdn/${filepath}`)\r\n        if (!fs.existsSync(UPLOADS_PATH)) {\r\n            fs.mkdirSync(UPLOADS_PATH);\r\n        }\r\n        ncp(file.path, `${UPLOADS_PATH}/${filepath}`);\r\n    })\r\n    res.end(JSON.stringify(urls));\r\n}\r\n\r\nconst createToken = () => {\r\n    var result = '';\r\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < 12; i++) {\r\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n}"],"file":"fs-storage.js"}