"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cdnUploadHandler = exports.cdnHandler = undefined;

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _mime = require("mime");

var _mime2 = _interopRequireDefault(_mime);

var _ncp = require("ncp");

var _ncp2 = _interopRequireDefault(_ncp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const UPLOADS_PATH = `./.storage`;

const cdnHandler = exports.cdnHandler = function (req, res) {
  const path = req.url.replace('/cdn', `${UPLOADS_PATH}/`);
  const extension = path.split('.').pop();

  const stat = _fs2.default.statSync(path);

  const mimeType = _mime2.default.getType(extension);

  res.writeHead(200, {
    'Content-Type': mimeType,
    'Content-Length': stat.size
  });

  const readStream = _fs2.default.createReadStream(path);

  readStream.pipe(res);
};

const cdnUploadHandler = exports.cdnUploadHandler = function (req, res) {
  const urls = [];
  req.files.forEach(file => {
    const extension = file.name.split('.').pop();
    const filepath = `${createToken()}.${extension}`;
    urls.push(`/cdn/${filepath}`);

    if (!_fs2.default.existsSync(UPLOADS_PATH)) {
      _fs2.default.mkdirSync(UPLOADS_PATH);
    }

    (0, _ncp2.default)(file.path, `${UPLOADS_PATH}/${filepath}`);
  });
  res.end(JSON.stringify(urls));
};

const createToken = () => {
  var result = '';
  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  var charactersLength = characters.length;

  for (var i = 0; i < 12; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }

  return result;
};
//# sourceMappingURL=fs-storage.js.map