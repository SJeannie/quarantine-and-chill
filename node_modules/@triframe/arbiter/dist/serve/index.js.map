{"version":3,"sources":["../../src/serve/index.js"],"names":["defaultPort","process","env","API_PORT","NODE_ENV","PORT","defaultConfig","port","databaseUrl","DATABASE_URL","session","routes","initializeDatabase","initializeServer","jsonParserMiddleware","urlEncodedParserMiddleware","corsMiddleware","httpRedirectMiddleware","formFileParsingMiddleware","staticFileMiddleware","cdnHandler","cdnUploadHandler","socketHandler","frontendHandler","require","variableName","undefined","Error","serve","models","configOptions","config","router","server","schema","middleware","filter","map","bind","use","get","post","Connection","listen","socket","console","log"],"mappings":"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","sourcesContent":["import express from 'express'\r\nimport { Server } from 'http'\r\nimport { Connection } from '../Connection'\r\nimport { serialize } from '../serialize'\r\n\r\nimport { jsonParserMiddleware, urlEncodedParserMiddleware, corsMiddleware, httpRedirectMiddleware, formFileParsingMiddleware, staticFileMiddleware } from './middleware'\r\n\r\nimport { initializeDatabase, initializeServer } from './initializers'\r\n\r\nimport { cdnHandler, cdnUploadHandler } from './fs-storage'\r\nimport { socketHandler, frontendHandler } from './handlers'\r\nimport { requireDir } from './requireDir'\r\n\r\nlet defaultPort = process.env.API_PORT\r\n\r\n// In production ONLY, accept the PORT env variable to accomodate heroku\r\n// Cannot use PORT in a development environment as this conflicts with the environment variable used by create-react-app to run the frontend\r\nif(process.env.NODE_ENV === 'production' && process.env.PORT) defaultPort = process.env.PORT\r\n\r\nconst defaultConfig = {\r\n    \r\n    port: defaultPort,\r\n    databaseUrl: process.env.DATABASE_URL,\r\n    session: {},\r\n    routes: () => null,\r\n\r\n    initializeDatabase, initializeServer,\r\n\r\n    jsonParserMiddleware, urlEncodedParserMiddleware, corsMiddleware, httpRedirectMiddleware, formFileParsingMiddleware, staticFileMiddleware,\r\n    \r\n    cdnHandler, cdnUploadHandler, socketHandler, frontendHandler,\r\n\r\n    require: function(variableName){\r\n        if(this[variableName] === undefined) throw Error(`Could not find required config variable '${variableName}'`)\r\n        else  return this[variableName]\r\n    }\r\n\r\n}\r\n\r\nexport const serve = async (models = {}, configOptions = {}) => {\r\n    let config = { ...defaultConfig, ...configOptions }\r\n    let { port, databaseUrl, session, routes, initializeDatabase, initializeServer, httpRedirectMiddleware, urlEncodedParserMiddleware, jsonParserMiddleware, corsMiddleware, formFileParsingMiddleware, staticFileMiddleware, cdnHandler, cdnUploadHandler, frontendHandler, socketHandler } = config\r\n\r\n    if(typeof models == 'string') models = requireDir(models)\r\n\r\n    let router = express()\r\n    let server = Server(router)\r\n    let schema = serialize(models)\r\n\r\n    if(databaseUrl) await initializeDatabase(databaseUrl)\r\n\r\n    await initializeServer(server, port)\r\n\r\n    let middleware = [httpRedirectMiddleware, urlEncodedParserMiddleware, jsonParserMiddleware, corsMiddleware, formFileParsingMiddleware, staticFileMiddleware]\r\n        .filter( middleware => !!middleware ).map(middleware => middleware.bind(config) )\r\n    \r\n    router.use(...middleware)\r\n\r\n    routes(router)\r\n\r\n    router.get('/cdn/*', cdnHandler)\r\n    router.post('/upload', cdnUploadHandler)\r\n    router.get('/*', frontendHandler)\r\n\r\n    Connection.listen(server, session, socket => socketHandler(socket, schema))\r\n\r\n    console.log(`Listening on ${port}`)\r\n}"],"file":"index.js"}