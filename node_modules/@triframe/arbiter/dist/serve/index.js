"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serve = undefined;

var _express = require("express");

var _express2 = _interopRequireDefault(_express);

var _http = require("http");

var _Connection = require("../Connection");

var _serialize = require("../serialize");

var _middleware = require("./middleware");

var _initializers = require("./initializers");

var _fsStorage = require("./fs-storage");

var _handlers = require("./handlers");

var _requireDir = require("./requireDir");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let defaultPort = process.env.API_PORT; // In production ONLY, accept the PORT env variable to accomodate heroku
// Cannot use PORT in a development environment as this conflicts with the environment variable used by create-react-app to run the frontend

if (process.env.NODE_ENV === 'production' && process.env.PORT) defaultPort = process.env.PORT;
const defaultConfig = {
  port: defaultPort,
  databaseUrl: process.env.DATABASE_URL,
  session: {},
  routes: () => null,
  initializeDatabase: _initializers.initializeDatabase,
  initializeServer: _initializers.initializeServer,
  jsonParserMiddleware: _middleware.jsonParserMiddleware,
  urlEncodedParserMiddleware: _middleware.urlEncodedParserMiddleware,
  corsMiddleware: _middleware.corsMiddleware,
  httpRedirectMiddleware: _middleware.httpRedirectMiddleware,
  formFileParsingMiddleware: _middleware.formFileParsingMiddleware,
  staticFileMiddleware: _middleware.staticFileMiddleware,
  cdnHandler: _fsStorage.cdnHandler,
  cdnUploadHandler: _fsStorage.cdnUploadHandler,
  socketHandler: _handlers.socketHandler,
  frontendHandler: _handlers.frontendHandler,
  require: function (variableName) {
    if (this[variableName] === undefined) throw Error(`Could not find required config variable '${variableName}'`);else return this[variableName];
  }
};

const serve = exports.serve = async (models = {}, configOptions = {}) => {
  let config = _objectSpread(_objectSpread({}, defaultConfig), configOptions);

  let {
    port,
    databaseUrl,
    session,
    routes,
    initializeDatabase,
    initializeServer,
    httpRedirectMiddleware,
    urlEncodedParserMiddleware,
    jsonParserMiddleware,
    corsMiddleware,
    formFileParsingMiddleware,
    staticFileMiddleware,
    cdnHandler,
    cdnUploadHandler,
    frontendHandler,
    socketHandler
  } = config;
  if (typeof models == 'string') models = (0, _requireDir.requireDir)(models);
  let router = (0, _express2.default)();
  let server = (0, _http.Server)(router);
  let schema = (0, _serialize.serialize)(models);
  if (databaseUrl) await initializeDatabase(databaseUrl);
  await initializeServer(server, port);
  let middleware = [httpRedirectMiddleware, urlEncodedParserMiddleware, jsonParserMiddleware, corsMiddleware, formFileParsingMiddleware, staticFileMiddleware].filter(middleware => !!middleware).map(middleware => middleware.bind(config));
  router.use(...middleware);
  routes(router);
  router.get('/cdn/*', cdnHandler);
  router.post('/upload', cdnUploadHandler);
  router.get('/*', frontendHandler);

  _Connection.Connection.listen(server, session, socket => socketHandler(socket, schema));

  console.log(`Listening on ${port}`);
};
//# sourceMappingURL=index.js.map