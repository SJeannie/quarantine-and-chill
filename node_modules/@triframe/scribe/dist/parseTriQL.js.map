{"version":3,"sources":["../src/parseTriQL.js"],"names":["SINGLE_QUOTES","opening","closing","endsTerm","DOUBLE_QUOTES","TEMPLATE_STRING","PARENTHESIS","CURLY_BRACES","SQUARE_BRACKETS","symbolsByOpening","reduce","result","symbol","postWhereKeywords","nestedQueryMarker","Symbol","directivesMarker","models","applicationMetadata","isKeyword","term","toUpperCase","includes","isWhitespace","character","test","parseTriQL","triQl","metadata","_","className","Class","key","type","undefined","query","expectedClosingSymbols","opens","char","closes","insideOf","find","expected","automatedGrouping","autoGroup","grouping","primaryRelation","definePrimaryRelation","relation","relationAliases","defineRelationAlias","relationName","aliasName","events","registerEventListener","event","some","otherClass","otherEvent","push","append","string","endTerm","replace","x","toLowerCase","trimmedTerm","fieldName","split","propertyName","Model","console","log","definition","buildModel","Error","selectionContext","i","length","shift","unshift","createSelectionContext","parse","close","selectionModel","pointer","property","parent","directiveContext","defineSelectionEndpoint","createDirectiveContext","directives","Object","defineProperty","enumerable","value","keys","SyntaxError","join","sqlFor","directiveKey","directiveValue","defineDirective","properties","suffix","selectClause","buildSelectClause","fromClause","buildJoinClause","label","alias","nested","columns","persisted","assign","selectProperty","endpoint","options","joinType","nextRelationName","a","an","of","nextRelation","orderClause","orderBy","orderDirection","NextClass","defaultValue","testProperties","includesVirtualFields","columnDefinition","format","joins","addJoin","name","currentClassName","currentAlias","through","path","isEmpty","myAliasName","as","CurrentClass","model","toString","get","directiveAcceptor","__proto__","prototype","JSON","stringify","Date","obj"],"mappings":"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","sourcesContent":["import { each, group, map, deepMap, index, find, filter, toClassName, toSingular, toForeignKeyName, toTableName, metadata, toUnderscored, toCamelCase, getMetadata, Pipe } from \"@triframe/core\"\r\n\r\nconst SINGLE_QUOTES = { opening: \"'\", closing: \"'\", endsTerm: true }\r\nconst DOUBLE_QUOTES = { opening: '\"', closing: '\"', endsTerm: false }\r\nconst TEMPLATE_STRING = { opening: \"`\", closing: \"`\", endsTerm: false }\r\nconst PARENTHESIS = { opening: \"(\", closing: \")\", endsTerm: true }\r\nconst CURLY_BRACES = { opening: \"{\", closing: \"}\", endsTerm: false }\r\nconst SQUARE_BRACKETS = { opening: \"{\", closing: \"}\", endsTerm: false }\r\nconst symbolsByOpening = [SINGLE_QUOTES, DOUBLE_QUOTES, TEMPLATE_STRING, PARENTHESIS, CURLY_BRACES, SQUARE_BRACKETS].reduce( \r\n    (result, symbol) => ({ ...result, [symbol.opening]: symbol }), {}\r\n)\r\n\r\nconst postWhereKeywords = ['GROUP', 'HAVING', 'ORDER', 'OFFSET', 'FETCH']\r\n\r\nconst nestedQueryMarker = Symbol()\r\nconst directivesMarker = Symbol()\r\n\r\nlet models, applicationMetadata;\r\n\r\nconst isKeyword = term => term.toUpperCase() === term || ['as'].includes(term);\r\nconst isWhitespace = character => /\\s/.test(character)\r\n\r\nexport const parseTriQL = triQl => {\r\n    // if(triQl.includes('UPDATE')) return { query: triQl, pipes: []} // <- Whe does update query get super skrewed up?\r\n    if (!models) models = index(metadata, (_, { className }) => className, (_, { Class }) => Class)\r\n    if (!applicationMetadata) applicationMetadata = map(group(filter(metadata, (key, { type }) => type != undefined), 'className'), (_, metadata) => index(metadata, 'key'))\r\n    let query = ''\r\n    let term = ''\r\n    let expectedClosingSymbols = []\r\n    let opens = char => !closes(char) && symbolsByOpening[char];\r\n    let closes = char => char == expectedClosingSymbols[0]?.closing;\r\n    let insideOf = symbol => !!expectedClosingSymbols.find(expected => expected.closing === symbol.closing)\r\n\r\n    let automatedGrouping = null\r\n    let autoGroup = grouping => automatedGrouping = grouping\r\n    let primaryRelation = null\r\n    let definePrimaryRelation = relation => primaryRelation = relation\r\n    let relationAliases = {}\r\n    let defineRelationAlias = (relationName, aliasName) => relationAliases[aliasName] = relationName\r\n    let events = []\r\n    let registerEventListener = (Class, event) => { if(!events.some(({ Class: otherClass, event: otherEvent}) => Class == otherClass && event == otherEvent)) events.push({ Class, event }) }\r\n\r\n    const append = string => query += string;\r\n    const endTerm = (symbol) => {\r\n        if(automatedGrouping !== null && (postWhereKeywords.includes(term)) ){\r\n            append(` GROUP BY ${automatedGrouping} `)\r\n            automatedGrouping = null\r\n        }\r\n        if (term){\r\n            if(term === 'GROUP') automatedGrouping = null\r\n            if (isKeyword(term)) {\r\n                append(term)\r\n            } else {\r\n                if(!insideOf(SINGLE_QUOTES) && symbol !== SINGLE_QUOTES){\r\n                    term = term.replace(/[A-Z]/g, x => `_${x.toLowerCase()}`)\r\n                }\r\n                if(primaryRelation) {\r\n                    let trimmedTerm = term.replace(/\"/g, '')\r\n                    let relationName, fieldName;\r\n                    if(trimmedTerm.includes('.')) ([ relationName, fieldName] = trimmedTerm.split('.'))\r\n                    else ([ relationName, fieldName ] = [ primaryRelation, trimmedTerm])\r\n                    if(relationAliases[relationName]) relationName = relationAliases[relationName]\r\n                    let className = toClassName(relationName)\r\n                    let propertyName = toCamelCase(fieldName)\r\n                    let metadata = applicationMetadata[className][propertyName]\r\n                    if(metadata !== undefined){\r\n                        switch(metadata.type){\r\n                            case 'persisted':\r\n                                let Model = models[className]\r\n                                if(!Model) console.log('WARNING:', className)\r\n                                registerEventListener(Model, `*.changed.${propertyName}`)\r\n                                append(term)\r\n                            break;\r\n                            case 'sql-derived':\r\n                                const { definition } = metadata\r\n                                append(definition(buildModel(className, {}, {}), {}))\r\n                            break;\r\n                            case 'code-derived':\r\n                                throw Error(`Cannot reference a derived property, without a SQL Definition, in query body (tried to reference \"${relationName}.${propertyName}\")`)\r\n                            break;\r\n                            default:\r\n                                append(term)\r\n                            break\r\n                        }\r\n                    } else {\r\n                        append(term)\r\n                    }\r\n                } else {\r\n                    append(term)\r\n                }\r\n            }\r\n        } \r\n        if(automatedGrouping !== null && symbol === true  ){\r\n            append(` GROUP BY ${automatedGrouping} `)\r\n            automatedGrouping = null\r\n        }\r\n        term = ''\r\n    }\r\n    let selectionContext = null;\r\n    for (let i = 0; i < triQl.length; i++) {\r\n        let symbol;\r\n        const character = triQl[i]\r\n        if (closes(character)) {\r\n            symbol = expectedClosingSymbols.shift()\r\n        }\r\n        if (opens(character)) {\r\n            symbol = symbolsByOpening[character]\r\n            expectedClosingSymbols.unshift(symbol)\r\n        }\r\n        if (insideOf(CURLY_BRACES) && !selectionContext) {\r\n            selectionContext = createSelectionContext({ insideOf, autoGroup, registerEventListener, definePrimaryRelation, defineRelationAlias })\r\n            continue\r\n        }\r\n        if (insideOf(CURLY_BRACES)) {\r\n            selectionContext.parse(character)\r\n            continue\r\n        }\r\n        if (!insideOf(CURLY_BRACES) && selectionContext) {\r\n            append(selectionContext.close())\r\n            selectionContext = null\r\n            continue\r\n        }\r\n        if(symbol && symbol.endsTerm){\r\n            endTerm(symbol)\r\n            append(character)\r\n            continue;\r\n        }\r\n        if (isWhitespace(character)) {\r\n            endTerm()\r\n            append(character)\r\n            continue;\r\n        }\r\n        term += character\r\n    }\r\n    endTerm(true)\r\n    return { query, events }\r\n}\r\n\r\n\r\nlet createSelectionContext = ({ insideOf, autoGroup, registerEventListener, definePrimaryRelation, defineRelationAlias }) => {\r\n\r\n    let selectionModel = {};\r\n    let pointer = selectionModel;\r\n    let property = ''\r\n    let parent = Symbol()\r\n    let directiveContext = null\r\n    let defineSelectionEndpoint = () => {\r\n        if(property.length) pointer[property] = pointer[property] || true\r\n    }\r\n\r\n    let parse = (character) => {\r\n        if (insideOf(PARENTHESIS) && !directiveContext) {\r\n            directiveContext = createDirectiveContext({ insideOf })\r\n            return;\r\n        }\r\n        if (insideOf(PARENTHESIS)) {\r\n            directiveContext.parse(character)\r\n            return;\r\n        }\r\n        if (!insideOf(PARENTHESIS) && directiveContext) {\r\n            let directives = directiveContext.close()\r\n            pointer[property] = {}\r\n            Object.defineProperty(pointer[property], directivesMarker, {\r\n                enumerable: false,\r\n                value: directives\r\n            })\r\n            directiveContext = null\r\n            return;\r\n        }\r\n        if (isWhitespace(character)) {\r\n            return\r\n        }\r\n        if (character == '{') {\r\n            pointer[property] = pointer[property] || {}\r\n            pointer[property][parent] = pointer\r\n            pointer = pointer[property]\r\n            property = ''\r\n            return\r\n        }\r\n        if (character == '}') {\r\n            defineSelectionEndpoint()\r\n            pointer = pointer[parent]\r\n            property = ''\r\n            return\r\n        }\r\n        if (character == ',') {\r\n            defineSelectionEndpoint()\r\n            property = ''\r\n            return\r\n        }\r\n        property += character\r\n    }\r\n\r\n    const close = () => {\r\n        defineSelectionEndpoint()\r\n\r\n        const keys = Object.keys(selectionModel)\r\n        const [ key ] = keys;\r\n\r\n        if(pointer !== selectionModel) throw SyntaxError('Unexpected End of Input for Query')\r\n        if (keys.length > 1) throw Error(`Cannot select ${keys.join(', ')} simultaneously`)\r\n\r\n        definePrimaryRelation(key)\r\n        autoGroup(`${key}.id`)\r\n\r\n        return sqlFor(selectionModel, registerEventListener, defineRelationAlias)\r\n    }\r\n\r\n    return { parse, close }\r\n}\r\n\r\n\r\nlet createDirectiveContext = ({ insideOf }) => {\r\n\r\n    let directives = {}\r\n    let directiveKey = \"\"\r\n    let directiveValue = \"\"\r\n    let directiveContext = \"key\"\r\n\r\n    let defineDirective = () => {\r\n        directives[directiveKey] = directiveValue\r\n        directiveKey = \"\"\r\n        directiveValue = \"\"\r\n    }\r\n\r\n    let parse = (character) => {\r\n        if (isWhitespace(character) && !insideOf(SINGLE_QUOTES) && !insideOf(DOUBLE_QUOTES)) {\r\n            return\r\n        }\r\n        if (character === ':') {\r\n            directiveContext = \"value\"\r\n            return\r\n        }\r\n        if (character === ',') {\r\n            defineDirective()\r\n            directiveContext = \"key\"\r\n            return\r\n        }\r\n        if (directiveContext === \"key\") {\r\n            directiveKey += character\r\n        }\r\n        if (directiveContext === \"value\") {\r\n            directiveValue += character\r\n        }\r\n        return\r\n    }\r\n\r\n    const close = () => {\r\n        defineDirective()\r\n        return directives\r\n    }\r\n\r\n    return { parse, close }\r\n}\r\n\r\n\r\nfunction sqlFor(selectionModel, registerEventListener = () => null, defineRelationAlias ) {\r\n\r\n    const [key] = Object.keys(selectionModel)\r\n    const className = toClassName(key)\r\n    const properties = selectionModel[key]\r\n\r\n    \r\n    // TODO: ~~Parse the where clause~~ scratch that, move the residual parser here, get ALL properties involved \r\n    //          in the query while transforming them to snake case\r\n    //          Maybe parse the where clause after for the id, maybe don't, idk\r\n    // Register event listeners for the change of columns in the where clause or order by clause\r\n    // Optimize existing event listeners by checking for the id in the where clause\r\n\r\n    let suffix = ''\r\n    if(!defineRelationAlias) suffix = ` GROUP BY ${key}.id`\r\n\r\n    const selectClause = buildSelectClause(className, properties, { registerEventListener, defineRelationAlias }) // <-- `properties` WILL be mutated to account for virtual columns\r\n    const fromClause = buildJoinClause(className, properties, { registerEventListener })\r\n\r\n    const Class = models[className]\r\n    registerEventListener(Class, `deleted.*`)\r\n    registerEventListener(Class, `created.*`)\r\n\r\n    // let [remaining1, remaining2 = \"\"] = remaining.split('ORDER BY')\r\n    // if (remaining2) remaining2 = `ORDER BY ${remaining2}`\r\n    return `${selectClause} FROM ${key} ${fromClause}${suffix}`\r\n}\r\n\r\nfunction buildSelectClause(className, properties, { label = false, alias = false, nested = false, registerEventListener = () => null, defineRelationAlias = () => null } = {}) {\r\n    const columns = []\r\n    const metadata = applicationMetadata[className]\r\n    const relationName = alias || toTableName(className)\r\n    columns.push(\r\n        label ? `'id', \"${relationName}\".id` : `\"${relationName}\".id`,\r\n        label ? `'__class__', '${className}'` : `'${className}' as __class__`\r\n    )\r\n    if(properties['*']){\r\n        delete properties['*']\r\n        let persisted = map(filter(metadata, (key, value) => value.type === 'persisted'), () => true)\r\n        Object.assign(properties, persisted)\r\n    }\r\n    let selectProperty = (key, value) => {\r\n        if(!metadata[key]) throw Error(`Cannot query for undefined property ${className}#${key}`)\r\n        const { type } = metadata[key]\r\n        const directives = value[directivesMarker]\r\n        const endpoint = (\r\n            typeof value === 'boolean'\r\n                ||\r\n            Object.keys(value).length === 0\r\n        )\r\n        switch (type) {\r\n            case 'persisted':\r\n                if (!endpoint) throw Error(`Cannot select subfields of property ${className}#${key}`)\r\n                if(directives) throw Error(`Cannot provide directives for persisted property ${className}#${key}`)\r\n                columns.push(\r\n                    label ? `'${toUnderscored(key)}', \"${relationName}\".${toUnderscored(key)}` : `\"${relationName}\".${toUnderscored(key)}`\r\n                )\r\n                break;\r\n            case 'relationship':\r\n                if (endpoint) throw Error(`Must select subfields for relation ${className}#${key}`)\r\n                const { options, joinType } = metadata[key]\r\n                const nextRelationName = toClassName(options.a || options.an || options.of || key)\r\n                defineRelationAlias(nextRelationName, key)\r\n                let nextRelation;\r\n                switch (joinType) {\r\n                    case 'belongsTo':\r\n                        nextRelation = `(array_agg(json_build_object(${buildSelectClause(nextRelationName, value, { label: true, alias: toUnderscored(key), nested: true, registerEventListener, defineRelationAlias })})))[1]`\r\n                        break;\r\n                    case 'hasOne':\r\n                        nextRelation = `(array_agg(json_build_object(${buildSelectClause(nextRelationName, value, { label: true, alias: toUnderscored(key), nested: true, registerEventListener, defineRelationAlias })})))[1]`\r\n                        break;\r\n                    case 'hasMany':\r\n                        let orderClause = ''\r\n                        if(directives && directives.orderBy){\r\n                            const { orderBy, orderDirection } = directives\r\n                            const NextClass = models[nextRelationName]\r\n                            registerEventListener(NextClass, `*.changed.${orderBy}`)\r\n                            orderClause = ` ORDER BY ${orderBy} ${orderDirection || 'ASC'}`\r\n                        }\r\n                        nextRelation = `array_agg(json_build_object(${buildSelectClause(nextRelationName, value, { label: true, alias: toUnderscored(key), nested: true, registerEventListener, defineRelationAlias })})${orderClause})`\r\n                        break;\r\n                }\r\n                if (!nested) {\r\n                    columns.push(\r\n                        label\r\n                            ? `'${toUnderscored(key)}', ${nextRelation}`\r\n                            : `${nextRelation} as ${toUnderscored(key)}`\r\n                    )\r\n                } else {\r\n                    Object.defineProperty(properties, nestedQueryMarker, {\r\n                        enumerable: false,\r\n                        value: true\r\n                    })\r\n                    columns.push(\r\n                        label ? `'${toUnderscored(key)}', \"${relationName}\".${toUnderscored(key)}` : toUnderscored(key)\r\n                    )\r\n                }\r\n                break;\r\n            case 'sql-derived':\r\n                if (!endpoint) throw Error(`Cannot select subfields of property ${className}#${key}`)\r\n                var { definition, defaultValue } = metadata[key]\r\n                const testProperties = {}\r\n                definition(buildModel(className, testProperties, { nested, alias }), directives || {})\r\n                const includesVirtualFields = find(testProperties, key => applicationMetadata[className][key]?.type === 'relationship')\r\n                if (!nested || !includesVirtualFields) {\r\n                    // TODO \r\n                    // Listen for when testProperties change\r\n                    // let CurrentClass = models[className]\r\n                    // each(testProperties, (key, value) => {\r\n                    //     registerEventListener(CurrentClass, `*.changed.${key}`)\r\n                    // })\r\n\r\n                    let columnDefinition = definition(buildModel(className, properties, { nested, alias }, registerEventListener), directives || {})\r\n                    if (defaultValue !== undefined) columnDefinition = `COALESCE(${columnDefinition}, ${format(defaultValue)})`\r\n                    columns.push(\r\n                        label ? `'${toUnderscored(key)}', ${columnDefinition}` : `${columnDefinition} as ${toUnderscored(key)}`\r\n                    )\r\n                } else {\r\n                    Object.defineProperty(properties, nestedQueryMarker, {\r\n                        enumerable: false,\r\n                        value: true\r\n                    })\r\n                    columns.push(\r\n                        label ? `'${toUnderscored(key)}', \"${relationName}\".${toUnderscored(key)}` : toUnderscored(key)\r\n                    )\r\n                }\r\n                break;\r\n            case 'code-derived':\r\n                var { definition, defaultValue } = metadata[key]\r\n                columns.push(\r\n                    label ? `'${toUnderscored(key)}', '[[intermediate value]]'` : `'[[intermediate value]]' as ${toUnderscored(key)}`\r\n                )\r\n            break;\r\n        }\r\n    }\r\n    each(properties, selectProperty)\r\n    return columns.join(', ')\r\n}\r\n\r\nfunction buildJoinClause(className, properties, { label = false, alias = false, nested = false, registerEventListener = () => null } = {}) {\r\n    const joins = []\r\n    const addJoin = join => {\r\n        if(!joins.includes(join)) joins.push(join)\r\n    }\r\n    each(properties, (key, value) => {\r\n        let name = toUnderscored(key)\r\n        let joinType;\r\n        let metadata = applicationMetadata[className]\r\n        let { type, options } = metadata[key]\r\n        let endpoint = typeof value === 'boolean'\r\n        let currentClassName = className\r\n        let currentAlias  = alias\r\n        if (type === 'relationship') {\r\n            if (endpoint) throw Error(`Must select subfields for relation ${className}#${key}`)\r\n            if (options.through) {\r\n                let path = {}\r\n                options.through(buildModel(className, path))\r\n                while (true) {\r\n                    ; ([key] = Object.keys(path))\r\n                    if (isEmpty(path[key])) break\r\n                    const { options, joinType } = metadata[key]\r\n                    addJoin(buildJoinClause(currentClassName, { [key]: {} }, { registerEventListener }))\r\n                    path = path[key]\r\n                    currentClassName = toClassName(options.a || options.an || options.of || key)\r\n                    metadata = applicationMetadata[currentClassName]\r\n                    currentAlias = toTableName(key)\r\n                }\r\n            }\r\n            ; ({ options, joinType } = metadata[key])\r\n            const relationName = currentAlias || toTableName(currentClassName)\r\n            const nextRelationName = toClassName(options.a || options.an || options.of || key)\r\n            const myAliasName = options.as || currentClassName\r\n            let CurrentClass = models[currentClassName]\r\n            let NextClass = models[nextRelationName]\r\n\r\n            registerEventListener(NextClass, `created.*`)\r\n            registerEventListener(NextClass, `deleted.*`)\r\n\r\n            switch (joinType) {\r\n                case 'belongsTo':\r\n\r\n                    // TODO\r\n                    // maybe? (save a function with this event\r\n                    // after the query returns, create the event listeners using against the id before emiting\r\n                    // to work on nested relations, this would have to follow the nesting path in the resolver)\r\n                    registerEventListener(CurrentClass, `*.changed.${toCamelCase(toForeignKeyName(key))}`)\r\n                    \r\n\r\n                    //value[toForeignKeyName(key)] = true\r\n                    addJoin(\r\n                        !(value[nestedQueryMarker])\r\n                            ? `LEFT JOIN ${toTableName(nextRelationName)} as \"${name}\" ON ${relationName}.${toForeignKeyName(key)} = \"${name}\".id`\r\n                            : `LEFT JOIN (\r\n                                        SELECT ${sqlFor({ [toTableName(nextRelationName)]: value }, registerEventListener)}\r\n                                    ) as \"${name}\" ON ${relationName}.${toForeignKeyName(key)} = \"${name}\".id`\r\n                    )\r\n                    break;\r\n                case 'hasOne':\r\n\r\n                    // TODO\r\n                    // listen to when any one from the next class changes their foreign key\r\n                    // if their foreign key was changed to me or from me, emit\r\n                    registerEventListener(NextClass, `*.changed.${toCamelCase(toForeignKeyName(myAliasName))}`)\r\n\r\n                    value[toCamelCase(toForeignKeyName(myAliasName))] = true\r\n                    addJoin(\r\n                        !(value[nestedQueryMarker])\r\n                            ? `LEFT JOIN ${toTableName(nextRelationName)} as \"${name}\" ON \"${name}\".${toForeignKeyName(myAliasName)} = ${relationName}.id`\r\n                            : `LEFT JOIN (\r\n                                    SELECT ${sqlFor({ [toTableName(nextRelationName)]: value }, registerEventListener)}\r\n                                ) as \"${name}\" ON \"${name}\".${toForeignKeyName(myAliasName)} = ${relationName}.id`\r\n                    )\r\n                    break;\r\n                case 'hasMany':\r\n\r\n                    // TODO\r\n                    // listen to when any one from the next class changes their foreign key\r\n                    // if their foreign key was changed to me or from me, emit\r\n                    registerEventListener(NextClass, `*.changed.${toCamelCase(toForeignKeyName(myAliasName))}`)\r\n\r\n                    value[toCamelCase(toForeignKeyName(myAliasName))] = true\r\n                    addJoin(\r\n                        !(value[nestedQueryMarker])\r\n                            ? `LEFT JOIN ${toTableName(nextRelationName)} as \"${name}\" ON \"${name}\".${toForeignKeyName(myAliasName)} = ${relationName}.id`\r\n                            : `LEFT JOIN (\r\n                                    SELECT ${sqlFor({ [toTableName(nextRelationName)]: value }, registerEventListener)}\r\n                                ) as \"${name}\" ON \"${name}\".${toForeignKeyName(myAliasName)} = ${relationName}.id`\r\n                    )\r\n                    break;\r\n            }\r\n        }\r\n    })\r\n    return joins.join(' ')\r\n}\r\n\r\n\r\nfunction buildModel(className, properties, { nested, alias } = {}, registerEventListener = () => null) {\r\n    const relationName = alias || toTableName(className)\r\n\r\n    const model = { toString: () => relationName }\r\n    const metadata = applicationMetadata[className]\r\n    const Class = models[className]\r\n    each(metadata, (key, value) => {\r\n        Object.defineProperty(model, key, {\r\n            get: function () {\r\n                const { type } = metadata[key]\r\n                switch (type) {\r\n                    case 'persisted':\r\n                        registerEventListener(Class, `*.changed.${key}`)\r\n                        properties[key] = properties[key] || true\r\n                        return `\"${relationName}\".${toUnderscored(key)}`\r\n                        break;\r\n                    case 'relationship':\r\n                        const { options } = metadata[key]\r\n                        const nextRelationName = toClassName(options.a || options.an || options.of || key)\r\n                        properties[key] = properties[key] || {}\r\n                        return buildModel(nextRelationName, properties[key], { nested: true, alias: toUnderscored(key) }, registerEventListener)\r\n                        break;\r\n                    case 'sql-derived':\r\n\r\n                        function directiveAcceptor(directives = {}) {\r\n                            const { definition, defaultValue } = metadata[key]\r\n                            if (!nested) {\r\n                                return defaultValue !== undefined\r\n                                    ? `COALESCE(${definition(model, directives)}, ${defaultValue})`\r\n                                    : definition(model, directives)\r\n                            } else {\r\n                                definition(model, directives)\r\n                                return `\"${relationName}\".${toUnderscored(key)}`\r\n                            }\r\n                        }\r\n\r\n                        directiveAcceptor.toString = directiveAcceptor\r\n\r\n                        return directiveAcceptor\r\n                        break;\r\n                }\r\n            }\r\n        })\r\n    })\r\n    return model\r\n}\r\n\r\n\r\nconst format = function (defaultValue) {\r\n    if (defaultValue === null) {\r\n        return \"NULL\"\r\n    }\r\n    if (typeof defaultValue == 'number' || typeof defaultValue == 'boolean') {\r\n        return defaultValue\r\n    }\r\n    if (typeof defaultValue == 'string') {\r\n        return `'${defaultValue}'`\r\n    }\r\n    if (typeof defaultValue == 'object' && (defaultValue.__proto__ == Object.prototype /* || defaultValue instanceof List */)) {\r\n        return `'${JSON.stringify(defaultValue)}'::json`\r\n    }\r\n    if (defaultValue instanceof Date) {\r\n        return \"NOW()\"\r\n    }\r\n\r\n    throw Error(`Variable type cannot be coalesced for sql query: ${defaultValue}`)\r\n}\r\n\r\nfunction isEmpty(obj) {\r\n    return Object.keys(obj).length === 0\r\n}"],"file":"parseTriQL.js"}