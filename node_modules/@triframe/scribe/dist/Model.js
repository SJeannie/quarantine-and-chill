"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Model = undefined;

var _sql = require("./sql");

var _core = require("@triframe/core");

var _decorators = require("./decorators");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }

function _getDecoratorsApi() { _getDecoratorsApi = function () { return api; }; var api = { elementsDefinitionOrder: [["method"], ["field"]], initializeInstanceElements: function (O, elements) { ["method", "field"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === "own") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function (F, elements) { var proto = F.prototype; ["method", "field"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === "static" || placement === "prototype")) { var receiver = placement === "static" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function (receiver, element) { var descriptor = element.descriptor; if (element.kind === "field") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function (elements, decorators) { var newElements = []; var finishers = []; var placements = { static: [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function (element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError("Duplicated element (" + element.key + ")"); } keys.push(element.key); }, decorateElement: function (element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function (elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError("Duplicated element (" + elements[j].key + ")"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function (element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: "Descriptor", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === "field") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function (elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, "finisher", "An element descriptor"); this.disallowProperty(elementObject, "extras", "An element descriptor"); return element; }, this); }, toElementDescriptor: function (elementObject) { var kind = String(elementObject.kind); if (kind !== "method" && kind !== "field") { throw new TypeError('An element descriptor\'s .kind property must be either "method" or' + ' "field", but a decorator created an element descriptor with' + ' .kind "' + kind + '"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== "static" && placement !== "prototype" && placement !== "own") { throw new TypeError('An element descriptor\'s .placement property must be one of "static",' + ' "prototype" or "own", but a decorator created an element descriptor' + ' with .placement "' + placement + '"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, "elements", "An element descriptor"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== "field") { this.disallowProperty(elementObject, "initializer", "A method descriptor"); } else { this.disallowProperty(descriptor, "get", "The property descriptor of a field descriptor"); this.disallowProperty(descriptor, "set", "The property descriptor of a field descriptor"); this.disallowProperty(descriptor, "value", "The property descriptor of a field descriptor"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function (elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, "finisher"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function (elements) { var obj = { kind: "class", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: "Descriptor", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function (obj) { var kind = String(obj.kind); if (kind !== "class") { throw new TypeError('A class descriptor\'s .kind property must be "class", but a decorator' + ' created a class descriptor with .kind "' + kind + '"'); } this.disallowProperty(obj, "key", "A class descriptor"); this.disallowProperty(obj, "placement", "A class descriptor"); this.disallowProperty(obj, "descriptor", "A class descriptor"); this.disallowProperty(obj, "initializer", "A class descriptor"); this.disallowProperty(obj, "extras", "A class descriptor"); var finisher = _optionalCallableProperty(obj, "finisher"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function (constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== "function") { throw new TypeError("Finishers must return a constructor."); } constructor = newConstructor; } } return constructor; }, disallowProperty: function (obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + " can't have a ." + name + " property."); } } }; return api; }

function _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === "method") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === "get") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === "set") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === "field") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === "field" ? "field" : "method", key: key, placement: def.static ? "static" : def.kind === "field" ? "own" : "prototype", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === "field") element.initializer = def.value; return element; }

function _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }

function _coalesceClassElements(elements) { var newElements = []; var isSameElement = function (other) { return other.kind === "method" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === "method" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError("Duplicated methods (" + element.key + ") can't be decorated."); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError("Decorators can't be placed on different accessors with for " + "the same property (" + element.key + ")."); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }

function _hasDecorators(element) { return element.decorators && element.decorators.length; }

function _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }

function _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== "function") { throw new TypeError("Expected '" + name + "' to be a function"); } return value; }

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }

function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

let Model = _decorate(null, function (_initialize) {
  class Model {
    constructor() {
      _initialize(this);
    }

  }

  return {
    F: Model,
    d: [{
      kind: "field",
      decorators: [_decorators.pk],
      key: "id",
      value: void 0
    }, {
      kind: "method",
      key: "onConstruct",
      value: function onConstruct() {
        if (this.on) this.on('Δ.sync', e => this.commit(e));
      } // ============================ CRUDL ============================
      // static async create(attributes, columns = null){
      //     const { relation } = this;
      //     const fields = this.fieldsFrom(attributes)
      //     let [ { id } ] = await sql`
      //         INSERT INTO ${relation} (${keys(fields).join(', ')}) 
      //         VALUES (${values(fields).join(', ')})
      //         RETURNING id
      //     `
      //     this.emit(`created.${id}`)
      //     return await this.read(id, columns)
      // }

    }, {
      kind: "method",
      decorators: [_decorators.stream],
      static: true,
      key: "read",
      value: function* read(id, columns = '*') {
        const {
          relation
        } = this;
        let [result] = yield _sql.sql`
            SELECT {
                ${relation} {
                    ${(0, _sql.literal)(columns)}
                }
            }
            WHERE ${relation}.id = ${id}
        `;
        return result || null;
      }
    }, {
      kind: "method",
      static: true,
      key: "create",
      value: async function create(attributes) {
        let instance = new this(attributes);
        await instance.persist();
        return instance;
      }
    }, {
      kind: "method",
      decorators: [_decorators.shared],
      key: "update",
      value: function update(attributes) {
        Object.assign(this, attributes);
      }
    }, {
      kind: "method",
      key: "commit",
      value: async function commit(e) {
        if (!this.id) return false;
        const {
          relation
        } = this.constructor;
        if (e.patches.length === 0) return null;
        const attributes = e.patches.reduce((attributes, patch) => {
          let key = patch.path.slice(1).split('/')[0];
          return _objectSpread(_objectSpread({}, attributes), {}, {
            [key]: this[key]
          });
        }, {});
        const fields = this.constructor.fieldsFrom(attributes);
        const result = await _sql.sql`
            UPDATE ${relation} 
            SET ${(0, _sql.reduce)(fields, (key, value) => `${key} = ${value}`)}
            WHERE id = ${this.id}
        `;
        (0, _core.each)(fields, key => this.constructor.emit(`${this.id}.changed.${key}`));
        e.hasBeenCommitted();
        return result;
      }
    }, {
      kind: "method",
      key: "persist",
      value: async function persist() {
        const {
          relation
        } = this.constructor;
        const fields = this.constructor.fieldsFrom(this);
        let [{
          id
        }] = await _sql.sql`
            INSERT INTO ${relation} (${(0, _sql.keys)(fields).join(', ')}) 
            VALUES (${(0, _sql.values)(fields).join(', ')})
            RETURNING id
        `;
        this['[[attributes]]'].id = this['[[base]]'].id = id;
        this.constructor.emit(`created.${id}`);
        return id;
      }
    }, {
      kind: "method",
      key: "delete",
      value: async function _delete() {
        const {
          relation
        } = this.constructor;
        const result = await _sql.sql`
            DELETE FROM ${relation} WHERE id = ${this.id}
        `;
        this.constructor.emit(`deleted.${this.id}`);
        return result;
      }
    }, {
      kind: "method",
      decorators: [_decorators.stream],
      static: true,
      key: "list",
      value: function* list(columns = '*') {
        const {
          relation
        } = this;
        return _sql.sql`
            SELECT {
                ${relation} {
                    ${(0, _sql.literal)(columns)}
                }
            }
            ORDER BY ${relation}.id ASC
        `;
      } // ============================ SEARCHERS ============================

    }, {
      kind: "method",
      decorators: [_decorators.stream],
      static: true,
      key: "where",
      value: function* where(conditions, columns = '*') {
        const {
          relation
        } = this;
        return _sql.sql`
            SELECT {
                ${relation} {
                    ${(0, _sql.literal)(columns)}
                }
            }
            WHERE ${(0, _sql.all)(conditions, (key, value, {
          rawValue,
          escape
        }) => when(rawValue === null, () => `"${relation.value}".${key} IS NULL`, otherwiseWhen(Array.isArray(rawValue), () => `"${relation.value}".${key} IN (${rawValue.map(escape).join(', ')})`), otherwise(() => `"${relation.value}".${key} = ${value}`)))}
            ORDER BY ${relation}.id ASC
        `;
      }
    }, {
      kind: "method",
      decorators: [_decorators.stream],
      static: true,
      key: "search",
      value: function* search(conditions, columns = '*') {
        const {
          relation
        } = this;
        return _sql.sql`
            SELECT {
                ${relation} {
                    ${(0, _sql.literal)(columns)}
                }
            }
            WHERE ${(0, _sql.any)(conditions, (key, value) => `"${relation.value}".${key} LIKE ${value}`)}
            ORDER BY ${relation}.id ASC
        `;
      }
    }, {
      kind: "method",
      static: true,
      key: "truncate",
      value: async function truncate() {
        const {
          relation
        } = this;
        return _sql.sql`
            DELETE FROM ${relation} WHERE true
        `;
      } // ============================ UTILS ============================

    }, {
      kind: "get",
      static: true,
      key: "relation",
      value: function relation() {
        return (0, _sql.literal)((0, _core.toTableName)(this.name));
      }
    }, {
      kind: "get",
      static: true,
      key: "persistedFields",
      value: function persistedFields() {
        return (0, _core.index)((0, _core.filter)(_core.metadata, (key, value) => value.className === this.name && value.type === 'persisted'), 'key');
      }
    }, {
      kind: "method",
      static: true,
      key: "fieldsFrom",
      value: function fieldsFrom(obj) {
        const tempInstance = new this();
        const {
          persistedFields
        } = this;
        const fields = {};
        (0, _core.each)(persistedFields, key => {
          if (obj[key] !== undefined) {
            const {
              sqlEncode
            } = (0, _core.getMetadata)(tempInstance, key);
            if (sqlEncode) fields[key] = sqlEncode(obj[key]);else fields[key] = obj[key];
          }
        });
        return fields;
      }
    }, {
      kind: "method",
      static: true,
      key: "connect",
      value: function connect() {}
    }]
  };
});

const when = (condition, result, ...alternatives) => {
  if (condition) return result();else {
    let alternative = alternatives.find(alternative => alternative.predicate == true);
    if (alternative) return alternative.result();else return null;
  }
};

const otherwiseWhen = (predicate, result) => {
  return {
    predicate,
    result
  };
};

const otherwise = result => {
  return {
    predicate: true,
    result
  };
};

exports.Model = Model;
//# sourceMappingURL=Model.js.map