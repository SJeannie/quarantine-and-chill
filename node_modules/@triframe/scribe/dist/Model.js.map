{"version":3,"sources":["../src/Model.js"],"names":["Model","pk","on","e","commit","stream","id","columns","relation","result","sql","attributes","instance","persist","shared","Object","assign","constructor","patches","length","reduce","patch","key","path","slice","split","fields","fieldsFrom","value","emit","hasBeenCommitted","join","conditions","rawValue","escape","when","otherwiseWhen","Array","isArray","map","otherwise","name","metadata","className","type","obj","tempInstance","persistedFields","undefined","sqlEncode","condition","alternatives","alternative","find","predicate"],"mappings":"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","sourcesContent":["import { sql, literal, keys, values, pairs, all, any, reduce } from \"./sql\";\r\nimport { metadata, filter, index, each, getMetadata, EventEmitter, toCapitalized, toTableName } from \"@triframe/core\";\r\nimport { pk, stream, hidden, shared } from \"./decorators\";\r\n\r\n\r\nclass Model {\r\n\r\n    @pk \r\n    id\r\n\r\n\r\n    onConstruct() {\r\n        if (this.on) this.on('Î”.sync', (e) => this.commit(e))\r\n    }\r\n\r\n    // ============================ CRUDL ============================\r\n\r\n    // static async create(attributes, columns = null){\r\n    //     const { relation } = this;\r\n    //     const fields = this.fieldsFrom(attributes)\r\n    //     let [ { id } ] = await sql`\r\n    //         INSERT INTO ${relation} (${keys(fields).join(', ')}) \r\n    //         VALUES (${values(fields).join(', ')})\r\n    //         RETURNING id\r\n    //     `\r\n    //     this.emit(`created.${id}`)\r\n    //     return await this.read(id, columns)\r\n    // }\r\n\r\n    @stream\r\n    static *read(id, columns = '*') {\r\n        const { relation } = this;\r\n        let [result] = yield sql`\r\n            SELECT {\r\n                ${relation} {\r\n                    ${literal(columns)}\r\n                }\r\n            }\r\n            WHERE ${relation}.id = ${id}\r\n        `\r\n        return result || null\r\n    }\r\n\r\n\r\n    static async create(attributes) {\r\n        let instance = new this(attributes)\r\n        await instance.persist()\r\n        return instance\r\n    }\r\n\r\n    @shared\r\n    update(attributes) {\r\n        Object.assign(this, attributes)\r\n    }\r\n\r\n    async commit(e) {\r\n        if (!this.id) return false\r\n        const { relation } = this.constructor;\r\n        if (e.patches.length === 0) return null\r\n        const attributes = e.patches.reduce((attributes, patch) => {\r\n            let key = patch.path.slice(1).split('/')[0]\r\n            return {\r\n                ...attributes,\r\n                [key]: this[key]\r\n            }\r\n        }, { })\r\n        const fields = this.constructor.fieldsFrom(attributes)\r\n        const result = await sql`\r\n            UPDATE ${relation} \r\n            SET ${reduce(fields, (key, value) =>\r\n            `${key} = ${value}`\r\n        )}\r\n            WHERE id = ${this.id}\r\n        `\r\n        each(fields, key => this.constructor.emit(`${this.id}.changed.${key}`))\r\n        e.hasBeenCommitted()\r\n        return result\r\n    }\r\n\r\n    async persist() {\r\n        const { relation } = this.constructor;\r\n        const fields = this.constructor.fieldsFrom(this)\r\n        let [{ id }] = await sql`\r\n            INSERT INTO ${relation} (${keys(fields).join(', ')}) \r\n            VALUES (${values(fields).join(', ')})\r\n            RETURNING id\r\n        `\r\n        this['[[attributes]]'].id = this['[[base]]'].id = id\r\n      \r\n        this.constructor.emit(`created.${id}`)\r\n        return id\r\n    }\r\n\r\n    async delete() {\r\n        const { relation } = this.constructor;\r\n        const result = await sql`\r\n            DELETE FROM ${relation} WHERE id = ${this.id}\r\n        `\r\n        this.constructor.emit(`deleted.${this.id}`)\r\n        return result\r\n    }\r\n\r\n    @stream\r\n    static *list(columns = '*') {\r\n        const { relation } = this;\r\n        return sql`\r\n            SELECT {\r\n                ${relation} {\r\n                    ${literal(columns)}\r\n                }\r\n            }\r\n            ORDER BY ${relation}.id ASC\r\n        `\r\n    }\r\n\r\n    // ============================ SEARCHERS ============================\r\n\r\n    @stream\r\n    static *where(conditions, columns = '*') {\r\n        const { relation } = this;\r\n\r\n        return sql`\r\n            SELECT {\r\n                ${relation} {\r\n                    ${literal(columns)}\r\n                }\r\n            }\r\n            WHERE ${all(conditions, (key, value, {rawValue, escape }) =>\r\n                when(rawValue === null, () => (\r\n                    `\"${relation.value}\".${key} IS NULL`\r\n                    ),\r\n                    otherwiseWhen(Array.isArray(rawValue), () => (\r\n                        `\"${relation.value}\".${key} IN (${rawValue.map(escape).join(', ')})`\r\n                    )),\r\n                    otherwise(() => (\r\n                        `\"${relation.value}\".${key} = ${value}`\r\n                    ))\r\n                )\r\n            )}\r\n            ORDER BY ${relation}.id ASC\r\n        `\r\n    }\r\n\r\n    @stream\r\n    static *search(conditions, columns = '*') {\r\n        const { relation } = this;\r\n\r\n        return sql`\r\n            SELECT {\r\n                ${relation} {\r\n                    ${literal(columns)}\r\n                }\r\n            }\r\n            WHERE ${any(conditions, (key, value) =>\r\n            `\"${relation.value}\".${key} LIKE ${value}`\r\n        )}\r\n            ORDER BY ${relation}.id ASC\r\n        `\r\n\r\n    }\r\n\r\n    static async truncate() {\r\n        const { relation } = this;\r\n        return sql`\r\n            DELETE FROM ${relation} WHERE true\r\n        `\r\n    }\r\n\r\n\r\n    // ============================ UTILS ============================\r\n\r\n    static get relation() {\r\n        return literal(toTableName(this.name))\r\n    }\r\n\r\n    static get persistedFields() {\r\n        return index(filter(metadata, (key, value) => value.className === this.name && value.type === 'persisted'), 'key')\r\n    }\r\n\r\n    static fieldsFrom(obj) {\r\n        const tempInstance = new this;\r\n        const { persistedFields } = this;\r\n        const fields = {}\r\n        each(persistedFields, key => {\r\n            if (obj[key] !== undefined) {\r\n                const { sqlEncode } = getMetadata(tempInstance, key)\r\n                if (sqlEncode) fields[key] = sqlEncode(obj[key])\r\n                else fields[key] = obj[key]\r\n            }\r\n        })\r\n        return fields\r\n    }\r\n\r\n    static connect(){\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst when = (condition, result, ...alternatives) => {\r\n   if(condition) return result()\r\n   else {\r\n       let alternative = alternatives.find(alternative => alternative.predicate == true)\r\n       if(alternative) return alternative.result()\r\n       else return null\r\n   }\r\n}\r\n\r\nconst otherwiseWhen = (predicate, result) => {\r\n    return {\r\n        predicate,\r\n        result\r\n    }\r\n}\r\n\r\nconst otherwise = (result) => {\r\n    return {\r\n        predicate: true,\r\n        result\r\n    }\r\n}\r\n\r\n\r\nexport { Model }"],"file":"Model.js"}